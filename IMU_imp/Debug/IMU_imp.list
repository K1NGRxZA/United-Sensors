
IMU_imp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800a818  0800a818  0001a818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b288  0800b288  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b288  0800b288  0001b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b290  0800b290  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b290  0800b290  0001b290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b294  0800b294  0001b294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  200001e8  0800b480  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800b480  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c91  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028ac  00000000  00000000  00034eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001012  00000000  00000000  00038c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002906f  00000000  00000000  00039c32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016876  00000000  00000000  00062ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcf13  00000000  00000000  00079517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ad8  00000000  00000000  0017642c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017cf04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a800 	.word	0x0800a800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a800 	.word	0x0800a800

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fab0 	bl	80014b6 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d141      	bne.n	8000fe6 <bmi08a_init+0xa2>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7b1b      	ldrb	r3, [r3, #12]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10c      	bne.n	8000f84 <bmi08a_init+0x40>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	739a      	strb	r2, [r3, #14]
//            printf("Dev correct\n\r");
            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f70:	f107 010e 	add.w	r1, r7, #14
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fac0 	bl	80014fe <get_regs>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e002      	b.n	8000f8a <bmi08a_init+0x46>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d129      	bne.n	8000fe6 <bmi08a_init+0xa2>
        {
//        	chip_id = 0;
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000f92:	f107 010e 	add.w	r1, r7, #14
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 faaf 	bl	80014fe <get_regs>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d11c      	bne.n	8000fe6 <bmi08a_init+0xa2>
            {
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4810      	ldr	r0, [pc, #64]	; (8000ff4 <bmi08a_init+0xb0>)
 8000fb2:	f006 fceb 	bl	800798c <iprintf>
                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI085_ACCEL_CHIP_ID))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7b5b      	ldrb	r3, [r3, #13]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d106      	bne.n	8000fcc <bmi08a_init+0x88>
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	d103      	bne.n	8000fcc <bmi08a_init+0x88>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fc4:	7bba      	ldrb	r2, [r7, #14]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e00c      	b.n	8000fe6 <bmi08a_init+0xa2>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	7b5b      	ldrb	r3, [r3, #13]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d106      	bne.n	8000fe2 <bmi08a_init+0x9e>
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	2b1e      	cmp	r3, #30
 8000fd8:	d103      	bne.n	8000fe2 <bmi08a_init+0x9e>
                {
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000fda:	7bba      	ldrb	r2, [r7, #14]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e001      	b.n	8000fe6 <bmi08a_init+0xa2>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000fe2:	23fd      	movs	r3, #253	; 0xfd
 8000fe4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	0800a818 	.word	0x0800a818

08000ff8 <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001008:	6838      	ldr	r0, [r7, #0]
 800100a:	f000 fa54 	bl	80014b6 <null_ptr_check>
 800100e:	4603      	mov	r3, r0
 8001010:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001012:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d111      	bne.n	800103e <bmi08a_get_regs+0x46>
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d00e      	beq.n	800103e <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001026:	7bf8      	ldrb	r0, [r7, #15]
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	68b9      	ldr	r1, [r7, #8]
 800102e:	f000 fa66 	bl	80014fe <get_regs>
 8001032:	4603      	mov	r3, r0
 8001034:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001036:	e004      	b.n	8001042 <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001038:	23f9      	movs	r3, #249	; 0xf9
 800103a:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800103c:	e001      	b.n	8001042 <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800103e:	23ff      	movs	r3, #255	; 0xff
 8001040:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001042:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800105e:	6838      	ldr	r0, [r7, #0]
 8001060:	f000 fa29 	bl	80014b6 <null_ptr_check>
 8001064:	4603      	mov	r3, r0
 8001066:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001068:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12c      	bne.n	80010ca <bmi08a_set_regs+0x7c>
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d029      	beq.n	80010ca <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d023      	beq.n	80010c4 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 800107c:	7bf8      	ldrb	r0, [r7, #15]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	f000 fa8b 	bl	800159e <set_regs>
 8001088:	4603      	mov	r3, r0
 800108a:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	7bdb      	ldrb	r3, [r3, #15]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d108      	bne.n	80010a6 <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	6852      	ldr	r2, [r2, #4]
 800109c:	4611      	mov	r1, r2
 800109e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 80010a2:	4798      	blx	r3
        if (len > 0)
 80010a4:	e013      	b.n	80010ce <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	7bdb      	ldrb	r3, [r3, #15]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d107      	bne.n	80010be <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	6852      	ldr	r2, [r2, #4]
 80010b6:	4611      	mov	r1, r2
 80010b8:	2002      	movs	r0, #2
 80010ba:	4798      	blx	r3
        if (len > 0)
 80010bc:	e007      	b.n	80010ce <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 80010be:	23fb      	movs	r3, #251	; 0xfb
 80010c0:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010c2:	e004      	b.n	80010ce <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80010c4:	23f9      	movs	r3, #249	; 0xf9
 80010c6:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80010c8:	e001      	b.n	80010ce <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80010ca:	23ff      	movs	r3, #255	; 0xff
 80010cc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <bmi08a_soft_reset>:

/*!
 *  @brief This API resets the accel sensor.
 */
int8_t bmi08a_soft_reset(struct bmi08x_dev *dev)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f9e7 	bl	80014b6 <null_ptr_check>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80010ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d123      	bne.n	800113c <bmi08a_soft_reset+0x62>
    {
        data = BMI08X_SOFT_RESET_CMD;
 80010f4:	23b6      	movs	r3, #182	; 0xb6
 80010f6:	73bb      	strb	r3, [r7, #14]

        /* Reset accel device */
        rslt = set_regs(BMI08X_REG_ACCEL_SOFTRESET, &data, 1, dev);
 80010f8:	f107 010e 	add.w	r1, r7, #14
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	207e      	movs	r0, #126	; 0x7e
 8001102:	f000 fa4c 	bl	800159e <set_regs>
 8001106:	4603      	mov	r3, r0
 8001108:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 800110a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d114      	bne.n	800113c <bmi08a_soft_reset+0x62>
        {
            /* Delay 1 ms after reset value is written to its register */
            dev->delay_us(BMI08X_MS_TO_US(BMI08X_ACCEL_SOFTRESET_DELAY_MS), dev->intf_ptr_accel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6852      	ldr	r2, [r2, #4]
 800111a:	4611      	mov	r1, r2
 800111c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001120:	4798      	blx	r3

            /* After soft reset SPI mode in the initialization phase, need to  perform a dummy SPI read
             * operation, The soft-reset performs a fundamental reset to the device,
             * which is largely equivalent to a power cycle. */
            if (dev->intf == BMI08X_SPI_INTF)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7b1b      	ldrb	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <bmi08a_soft_reset+0x62>
            {
                /* Dummy SPI read operation of Chip-ID */
                rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CHIP_ID, &data, 1, dev);
 800112a:	f107 010e 	add.w	r1, r7, #14
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff60 	bl	8000ff8 <bmi08a_get_regs>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001150:	2300      	movs	r3, #0
 8001152:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 8001154:	2300      	movs	r3, #0
 8001156:	75bb      	strb	r3, [r7, #22]
 8001158:	2300      	movs	r3, #0
 800115a:	757b      	strb	r3, [r7, #21]
 800115c:	2300      	movs	r3, #0
 800115e:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f9a8 	bl	80014b6 <null_ptr_check>
 8001166:	4603      	mov	r3, r0
 8001168:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800116a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d171      	bne.n	8001256 <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	7c9b      	ldrb	r3, [r3, #18]
 8001176:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7c5b      	ldrb	r3, [r3, #17]
 800117c:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7c1b      	ldrb	r3, [r3, #16]
 8001182:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 8001184:	7cfb      	ldrb	r3, [r7, #19]
 8001186:	2b04      	cmp	r3, #4
 8001188:	d902      	bls.n	8001190 <bmi08a_set_meas_conf+0x48>
 800118a:	7cfb      	ldrb	r3, [r7, #19]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d901      	bls.n	8001194 <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001190:	2301      	movs	r3, #1
 8001192:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 8001194:	7cbb      	ldrb	r3, [r7, #18]
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d901      	bls.n	800119e <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 800119a:	2301      	movs	r3, #1
 800119c:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7b5b      	ldrb	r3, [r3, #13]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d104      	bne.n	80011b0 <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 80011a6:	7c7b      	ldrb	r3, [r7, #17]
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d901      	bls.n	80011b0 <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 80011ac:	2301      	movs	r3, #1
 80011ae:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7b5b      	ldrb	r3, [r3, #13]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d104      	bne.n	80011c2 <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 80011b8:	7c7b      	ldrb	r3, [r7, #17]
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d901      	bls.n	80011c2 <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 80011be:	2301      	movs	r3, #1
 80011c0:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 80011c2:	7dbb      	ldrb	r3, [r7, #22]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d144      	bne.n	8001252 <bmi08a_set_meas_conf+0x10a>
 80011c8:	7d7b      	ldrb	r3, [r7, #21]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d141      	bne.n	8001252 <bmi08a_set_meas_conf+0x10a>
 80011ce:	7d3b      	ldrb	r3, [r7, #20]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d13e      	bne.n	8001252 <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 80011d4:	f107 010c 	add.w	r1, r7, #12
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	2040      	movs	r0, #64	; 0x40
 80011de:	f7ff ff0b 	bl	8000ff8 <bmi08a_get_regs>
 80011e2:	4603      	mov	r3, r0
 80011e4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 80011e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d133      	bne.n	8001256 <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 80011ee:	7b3b      	ldrb	r3, [r7, #12]
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	f023 030f 	bic.w	r3, r3, #15
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	b25b      	sxtb	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b25b      	sxtb	r3, r3
 8001206:	b2db      	uxtb	r3, r3
 8001208:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 800120a:	7b3b      	ldrb	r3, [r7, #12]
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	b25a      	sxtb	r2, r3
 8001214:	7cbb      	ldrb	r3, [r7, #18]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	b25b      	sxtb	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b25b      	sxtb	r3, r3
 800121e:	b2db      	uxtb	r3, r3
 8001220:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 8001222:	7b7b      	ldrb	r3, [r7, #13]
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f023 0303 	bic.w	r3, r3, #3
 800122a:	b25a      	sxtb	r2, r3
 800122c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b25b      	sxtb	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2202      	movs	r2, #2
 8001246:	2040      	movs	r0, #64	; 0x40
 8001248:	f000 f9a9 	bl	800159e <set_regs>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8001250:	e001      	b.n	8001256 <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001252:	23f8      	movs	r3, #248	; 0xf8
 8001254:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001256:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b084      	sub	sp, #16
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 800126a:	2300      	movs	r3, #0
 800126c:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f000 f921 	bl	80014b6 <null_ptr_check>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001278:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d143      	bne.n	8001308 <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7bdb      	ldrb	r3, [r3, #15]
 8001284:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 800128c:	2300      	movs	r3, #0
 800128e:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 8001290:	2304      	movs	r3, #4
 8001292:	737b      	strb	r3, [r7, #13]
 8001294:	e009      	b.n	80012aa <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d104      	bne.n	80012a6 <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 800129c:	2303      	movs	r3, #3
 800129e:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	737b      	strb	r3, [r7, #13]
 80012a4:	e001      	b.n	80012aa <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 80012a6:	23fb      	movs	r3, #251	; 0xfb
 80012a8:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 80012aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d12a      	bne.n	8001308 <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 80012b2:	f107 010c 	add.w	r1, r7, #12
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	207c      	movs	r0, #124	; 0x7c
 80012bc:	f000 f96f 	bl	800159e <set_regs>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80012c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d11d      	bne.n	8001308 <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	6852      	ldr	r2, [r2, #4]
 80012d4:	4611      	mov	r1, r2
 80012d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80012da:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	1c59      	adds	r1, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	207d      	movs	r0, #125	; 0x7d
 80012e8:	f000 f959 	bl	800159e <set_regs>
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80012f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d107      	bne.n	8001308 <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6852      	ldr	r2, [r2, #4]
 8001300:	4611      	mov	r1, r2
 8001302:	f241 3088 	movw	r0, #5000	; 0x1388
 8001306:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 8001308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	2300      	movs	r3, #0
 8001324:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001326:	6838      	ldr	r0, [r7, #0]
 8001328:	f000 f8c5 	bl	80014b6 <null_ptr_check>
 800132c:	4603      	mov	r3, r0
 800132e:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 8001330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d140      	bne.n	80013ba <bmi08a_get_data+0xa6>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d03d      	beq.n	80013ba <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 800133e:	f107 010c 	add.w	r1, r7, #12
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	2206      	movs	r2, #6
 8001346:	2012      	movs	r0, #18
 8001348:	f7ff fe56 	bl	8000ff8 <bmi08a_get_regs>
 800134c:	4603      	mov	r3, r0
 800134e:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d132      	bne.n	80013be <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 8001358:	7b3b      	ldrb	r3, [r7, #12]
 800135a:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 800135c:	7b7b      	ldrb	r3, [r7, #13]
 800135e:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001360:	7d7b      	ldrb	r3, [r7, #21]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	b21a      	sxth	r2, r3
 8001366:	7dbb      	ldrb	r3, [r7, #22]
 8001368:	b21b      	sxth	r3, r3
 800136a:	4313      	orrs	r3, r2
 800136c:	b21b      	sxth	r3, r3
 800136e:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 8001370:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 800137c:	7bfb      	ldrb	r3, [r7, #15]
 800137e:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001380:	7d7b      	ldrb	r3, [r7, #21]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7dbb      	ldrb	r3, [r7, #22]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 8001390:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001398:	7c3b      	ldrb	r3, [r7, #16]
 800139a:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 800139c:	7c7b      	ldrb	r3, [r7, #17]
 800139e:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80013a0:	7d7b      	ldrb	r3, [r7, #21]
 80013a2:	021b      	lsls	r3, r3, #8
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	7dbb      	ldrb	r3, [r7, #22]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21b      	sxth	r3, r3
 80013ae:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80013b0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80013b8:	e001      	b.n	80013be <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80013ba:	23ff      	movs	r3, #255	; 0xff
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80013d6:	6838      	ldr	r0, [r7, #0]
 80013d8:	f000 f86d 	bl	80014b6 <null_ptr_check>
 80013dc:	4603      	mov	r3, r0
 80013de:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 80013e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d13a      	bne.n	800145e <bmi08a_set_int_config+0x92>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d037      	beq.n	800145e <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d82f      	bhi.n	8001456 <bmi08a_set_int_config+0x8a>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <bmi08a_set_int_config+0x30>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	08001411 	.word	0x08001411
 8001400:	0800141f 	.word	0x0800141f
 8001404:	0800142d 	.word	0x0800142d
 8001408:	0800143b 	.word	0x0800143b
 800140c:	08001449 	.word	0x08001449
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f97e 	bl	8001714 <set_accel_data_ready_int>
 8001418:	4603      	mov	r3, r0
 800141a:	73fb      	strb	r3, [r7, #15]
                break;
 800141c:	e01e      	b.n	800145c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f9d5 	bl	80017d0 <set_accel_sync_data_ready_int>
 8001426:	4603      	mov	r3, r0
 8001428:	73fb      	strb	r3, [r7, #15]
                break;
 800142a:	e017      	b.n	800145c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 800142c:	6839      	ldr	r1, [r7, #0]
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f000 fa13 	bl	800185a <set_accel_sync_input>
 8001434:	4603      	mov	r3, r0
 8001436:	73fb      	strb	r3, [r7, #15]
                break;
 8001438:	e010      	b.n	800145c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 800143a:	6839      	ldr	r1, [r7, #0]
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 fa26 	bl	800188e <set_fifo_wm_int>
 8001442:	4603      	mov	r3, r0
 8001444:	73fb      	strb	r3, [r7, #15]
                break;
 8001446:	e009      	b.n	800145c <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 8001448:	6839      	ldr	r1, [r7, #0]
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa7d 	bl	800194a <set_fifo_full_int>
 8001450:	4603      	mov	r3, r0
 8001452:	73fb      	strb	r3, [r7, #15]
                break;
 8001454:	e002      	b.n	800145c <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001456:	23f8      	movs	r3, #248	; 0xf8
 8001458:	73fb      	strb	r3, [r7, #15]
                break;
 800145a:	bf00      	nop
        switch (int_config->int_type)
 800145c:	e001      	b.n	8001462 <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 800145e:	23ff      	movs	r3, #255	; 0xff
 8001460:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop

08001470 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d010      	beq.n	80014a6 <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 8001484:	f107 010e 	add.w	r1, r7, #14
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	2201      	movs	r2, #1
 800148c:	201d      	movs	r0, #29
 800148e:	f7ff fdb3 	bl	8000ff8 <bmi08a_get_regs>
 8001492:	4603      	mov	r3, r0
 8001494:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d105      	bne.n	80014aa <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 800149e:	7bba      	ldrb	r2, [r7, #14]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e001      	b.n	80014aa <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80014a6:	23ff      	movs	r3, #255	; 0xff
 80014a8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00f      	beq.n	80014e4 <null_ptr_check+0x2e>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <null_ptr_check+0x2e>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <null_ptr_check+0x2e>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 80014e4:	23ff      	movs	r3, #255	; 0xff
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	e001      	b.n	80014ee <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80014ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80014fe:	b590      	push	{r4, r7, lr}
 8001500:	b0a7      	sub	sp, #156	; 0x9c
 8001502:	af00      	add	r7, sp, #0
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	7b1b      	ldrb	r3, [r3, #12]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d103      	bne.n	8001524 <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001522:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6a1c      	ldr	r4, [r3, #32]
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	7b9b      	ldrb	r3, [r3, #14]
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	441a      	add	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f107 0114 	add.w	r1, r7, #20
 800153a:	7bf8      	ldrb	r0, [r7, #15]
 800153c:	47a0      	blx	r4
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 800154e:	2b00      	cmp	r3, #0
 8001550:	d11c      	bne.n	800158c <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8001552:	2300      	movs	r3, #0
 8001554:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001558:	e012      	b.n	8001580 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 800155a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	7b92      	ldrb	r2, [r2, #14]
 8001562:	441a      	add	r2, r3
 8001564:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	440b      	add	r3, r1
 800156c:	3298      	adds	r2, #152	; 0x98
 800156e:	443a      	add	r2, r7
 8001570:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 8001574:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 8001576:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800157a:	3301      	adds	r3, #1
 800157c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8001580:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	d8e7      	bhi.n	800155a <get_regs+0x5c>
 800158a:	e002      	b.n	8001592 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 800158c:	23fe      	movs	r3, #254	; 0xfe
 800158e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 8001592:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 8001596:	4618      	mov	r0, r3
 8001598:	379c      	adds	r7, #156	; 0x9c
 800159a:	46bd      	mov	sp, r7
 800159c:	bd90      	pop	{r4, r7, pc}

0800159e <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800159e:	b590      	push	{r4, r7, lr}
 80015a0:	b087      	sub	sp, #28
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4603      	mov	r3, r0
 80015ac:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	7b1b      	ldrb	r3, [r3, #12]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d103      	bne.n	80015c2 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015c0:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	7bf8      	ldrb	r0, [r7, #15]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	47a0      	blx	r4
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 80015e6:	23fe      	movs	r3, #254	; 0xfe
 80015e8:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80015ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd90      	pop	{r4, r7, pc}

080015f6 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001600:	2300      	movs	r3, #0
 8001602:	73bb      	strb	r3, [r7, #14]
 8001604:	2300      	movs	r3, #0
 8001606:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d002      	beq.n	8001616 <set_int_pin_config+0x20>
 8001610:	2b01      	cmp	r3, #1
 8001612:	d003      	beq.n	800161c <set_int_pin_config+0x26>
 8001614:	e005      	b.n	8001622 <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 8001616:	2353      	movs	r3, #83	; 0x53
 8001618:	73bb      	strb	r3, [r7, #14]
            break;
 800161a:	e005      	b.n	8001628 <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 800161c:	2354      	movs	r3, #84	; 0x54
 800161e:	73bb      	strb	r3, [r7, #14]
            break;
 8001620:	e002      	b.n	8001628 <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001622:	2301      	movs	r3, #1
 8001624:	737b      	strb	r3, [r7, #13]
            break;
 8001626:	bf00      	nop
    }

    if (!is_channel_invalid)
 8001628:	7b7b      	ldrb	r3, [r7, #13]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d16a      	bne.n	8001704 <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 800162e:	f107 010c 	add.w	r1, r7, #12
 8001632:	7bb8      	ldrb	r0, [r7, #14]
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	f7ff ff61 	bl	80014fe <get_regs>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d15f      	bne.n	8001708 <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 8001648:	7b3b      	ldrb	r3, [r7, #12]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	f023 0302 	bic.w	r3, r3, #2
 8001650:	b25a      	sxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	789b      	ldrb	r3, [r3, #2]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	b25b      	sxtb	r3, r3
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	b25b      	sxtb	r3, r3
 8001660:	4313      	orrs	r3, r2
 8001662:	b25b      	sxtb	r3, r3
 8001664:	b2db      	uxtb	r3, r3
 8001666:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 8001668:	7b3b      	ldrb	r3, [r7, #12]
 800166a:	b25b      	sxtb	r3, r3
 800166c:	f023 0304 	bic.w	r3, r3, #4
 8001670:	b25a      	sxtb	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	78db      	ldrb	r3, [r3, #3]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b25b      	sxtb	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	785b      	ldrb	r3, [r3, #1]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d11a      	bne.n	80016c6 <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 8001690:	7b3b      	ldrb	r3, [r7, #12]
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 800169a:	7b3b      	ldrb	r3, [r7, #12]
 800169c:	b25b      	sxtb	r3, r3
 800169e:	f023 0310 	bic.w	r3, r3, #16
 80016a2:	b25a      	sxtb	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	791b      	ldrb	r3, [r3, #4]
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	b25b      	sxtb	r3, r3
 80016ac:	f003 0310 	and.w	r3, r3, #16
 80016b0:	b25b      	sxtb	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 80016ba:	7b3b      	ldrb	r3, [r7, #12]
 80016bc:	f023 0308 	bic.w	r3, r3, #8
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	733b      	strb	r3, [r7, #12]
 80016c4:	e014      	b.n	80016f0 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 80016c6:	7b3b      	ldrb	r3, [r7, #12]
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	f023 0308 	bic.w	r3, r3, #8
 80016ce:	b25a      	sxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	791b      	ldrb	r3, [r3, #4]
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	b25b      	sxtb	r3, r3
 80016de:	4313      	orrs	r3, r2
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 80016e6:	7b3b      	ldrb	r3, [r7, #12]
 80016e8:	f023 0310 	bic.w	r3, r3, #16
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 80016f0:	f107 010c 	add.w	r1, r7, #12
 80016f4:	7bb8      	ldrb	r0, [r7, #14]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f7ff fca8 	bl	800104e <bmi08a_set_regs>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]
 8001702:	e001      	b.n	8001708 <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 8001704:	23fb      	movs	r3, #251	; 0xfb
 8001706:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 800171e:	2300      	movs	r3, #0
 8001720:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001722:	f107 010d 	add.w	r1, r7, #13
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	2058      	movs	r0, #88	; 0x58
 800172c:	f7ff fee7 	bl	80014fe <get_regs>
 8001730:	4603      	mov	r3, r0
 8001732:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d143      	bne.n	80017c4 <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	791b      	ldrb	r3, [r3, #4]
 8001740:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <set_accel_data_ready_int+0x3c>
 800174a:	2b01      	cmp	r3, #1
 800174c:	d010      	beq.n	8001770 <set_accel_data_ready_int+0x5c>
 800174e:	e01f      	b.n	8001790 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 8001750:	7b7b      	ldrb	r3, [r7, #13]
 8001752:	b25b      	sxtb	r3, r3
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	b25a      	sxtb	r2, r3
 800175a:	7bbb      	ldrb	r3, [r7, #14]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	b25b      	sxtb	r3, r3
 8001766:	4313      	orrs	r3, r2
 8001768:	b25b      	sxtb	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	737b      	strb	r3, [r7, #13]
                break;
 800176e:	e012      	b.n	8001796 <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 8001770:	7b7b      	ldrb	r3, [r7, #13]
 8001772:	b25b      	sxtb	r3, r3
 8001774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001778:	b25a      	sxtb	r2, r3
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	019b      	lsls	r3, r3, #6
 800177e:	b25b      	sxtb	r3, r3
 8001780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001784:	b25b      	sxtb	r3, r3
 8001786:	4313      	orrs	r3, r2
 8001788:	b25b      	sxtb	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	737b      	strb	r3, [r7, #13]
                break;
 800178e:	e002      	b.n	8001796 <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001790:	23fb      	movs	r3, #251	; 0xfb
 8001792:	73fb      	strb	r3, [r7, #15]
                break;
 8001794:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d112      	bne.n	80017c4 <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff28 	bl	80015f6 <set_int_pin_config>
 80017a6:	4603      	mov	r3, r0
 80017a8:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d108      	bne.n	80017c4 <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80017b2:	f107 010d 	add.w	r1, r7, #13
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	2058      	movs	r0, #88	; 0x58
 80017bc:	f7ff fc47 	bl	800104e <bmi08a_set_regs>
 80017c0:	4603      	mov	r3, r0
 80017c2:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80017c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017de:	6838      	ldr	r0, [r7, #0]
 80017e0:	f7ff fe69 	bl	80014b6 <null_ptr_check>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 80017e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d12e      	bne.n	800184e <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <set_accel_sync_data_ready_int+0x32>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d003      	beq.n	8001808 <set_accel_sync_data_ready_int+0x38>
 8001800:	e005      	b.n	800180e <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 8001802:	2356      	movs	r3, #86	; 0x56
 8001804:	73bb      	strb	r3, [r7, #14]
                break;
 8001806:	e005      	b.n	8001814 <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 8001808:	2357      	movs	r3, #87	; 0x57
 800180a:	73bb      	strb	r3, [r7, #14]
                break;
 800180c:	e002      	b.n	8001814 <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800180e:	23fb      	movs	r3, #251	; 0xfb
 8001810:	73fb      	strb	r3, [r7, #15]
                break;
 8001812:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d118      	bne.n	800184e <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	791b      	ldrb	r3, [r3, #4]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 8001824:	2301      	movs	r3, #1
 8001826:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001828:	f107 010d 	add.w	r1, r7, #13
 800182c:	7bb8      	ldrb	r0, [r7, #14]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	f7ff fc0c 	bl	800104e <bmi08a_set_regs>
 8001836:	4603      	mov	r3, r0
 8001838:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d105      	bne.n	800184e <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8001842:	6839      	ldr	r1, [r7, #0]
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fed6 	bl	80015f6 <set_int_pin_config>
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff fe26 	bl	80014b6 <null_ptr_check>
 800186a:	4603      	mov	r3, r0
 800186c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 800186e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d105      	bne.n	8001882 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 8001876:	6839      	ldr	r1, [r7, #0]
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff febc 	bl	80015f6 <set_int_pin_config>
 800187e:	4603      	mov	r3, r0
 8001880:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001898:	2300      	movs	r3, #0
 800189a:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800189c:	f107 010d 	add.w	r1, r7, #13
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2201      	movs	r2, #1
 80018a4:	2058      	movs	r0, #88	; 0x58
 80018a6:	f7ff fe2a 	bl	80014fe <get_regs>
 80018aa:	4603      	mov	r3, r0
 80018ac:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d143      	bne.n	800193e <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d002      	beq.n	80018ca <set_fifo_wm_int+0x3c>
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d010      	beq.n	80018ea <set_fifo_wm_int+0x5c>
 80018c8:	e01f      	b.n	800190a <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 80018ca:	7b7b      	ldrb	r3, [r7, #13]
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f023 0302 	bic.w	r3, r3, #2
 80018d2:	b25a      	sxtb	r2, r3
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	737b      	strb	r3, [r7, #13]
                break;
 80018e8:	e012      	b.n	8001910 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 80018ea:	7b7b      	ldrb	r3, [r7, #13]
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	f023 0320 	bic.w	r3, r3, #32
 80018f2:	b25a      	sxtb	r2, r3
 80018f4:	7bbb      	ldrb	r3, [r7, #14]
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	f003 0320 	and.w	r3, r3, #32
 80018fe:	b25b      	sxtb	r3, r3
 8001900:	4313      	orrs	r3, r2
 8001902:	b25b      	sxtb	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	737b      	strb	r3, [r7, #13]
                break;
 8001908:	e002      	b.n	8001910 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800190a:	23fb      	movs	r3, #251	; 0xfb
 800190c:	73fb      	strb	r3, [r7, #15]
                break;
 800190e:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d112      	bne.n	800193e <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fe6b 	bl	80015f6 <set_int_pin_config>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d108      	bne.n	800193e <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800192c:	f107 010d 	add.w	r1, r7, #13
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	2058      	movs	r0, #88	; 0x58
 8001936:	f7ff fb8a 	bl	800104e <bmi08a_set_regs>
 800193a:	4603      	mov	r3, r0
 800193c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b084      	sub	sp, #16
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001954:	2300      	movs	r3, #0
 8001956:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001958:	f107 010d 	add.w	r1, r7, #13
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	2201      	movs	r2, #1
 8001960:	2058      	movs	r0, #88	; 0x58
 8001962:	f7ff fdcc 	bl	80014fe <get_regs>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d142      	bne.n	80019f8 <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	791b      	ldrb	r3, [r3, #4]
 8001976:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <set_fifo_full_int+0x3c>
 8001980:	2b01      	cmp	r3, #1
 8001982:	d00f      	beq.n	80019a4 <set_fifo_full_int+0x5a>
 8001984:	e01e      	b.n	80019c4 <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 8001986:	7b7b      	ldrb	r3, [r7, #13]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	b25a      	sxtb	r2, r3
 8001990:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	b25b      	sxtb	r3, r3
 800199a:	4313      	orrs	r3, r2
 800199c:	b25b      	sxtb	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	737b      	strb	r3, [r7, #13]
                break;
 80019a2:	e012      	b.n	80019ca <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 80019a4:	7b7b      	ldrb	r3, [r7, #13]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	f023 0310 	bic.w	r3, r3, #16
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	7bbb      	ldrb	r3, [r7, #14]
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	737b      	strb	r3, [r7, #13]
                break;
 80019c2:	e002      	b.n	80019ca <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80019c4:	23fb      	movs	r3, #251	; 0xfb
 80019c6:	73fb      	strb	r3, [r7, #15]
                break;
 80019c8:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80019ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d112      	bne.n	80019f8 <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80019d2:	6839      	ldr	r1, [r7, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff fe0e 	bl	80015f6 <set_int_pin_config>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80019de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d108      	bne.n	80019f8 <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80019e6:	f107 010d 	add.w	r1, r7, #13
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2201      	movs	r2, #1
 80019ee:	2058      	movs	r0, #88	; 0x58
 80019f0:	f7ff fb2d 	bl	800104e <bmi08a_set_regs>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa1f 	bl	8001e54 <null_ptr_check>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11a      	bne.n	8001a58 <bmi08g_init+0x54>
    {
        /* Read gyro chip id */


        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8001a22:	f107 010e 	add.w	r1, r7, #14
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 fa36 	bl	8001e9c <get_regs>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
        printf("%d: Chip id\r\n", chip_id);
 8001a34:	7bbb      	ldrb	r3, [r7, #14]
 8001a36:	4619      	mov	r1, r3
 8001a38:	480a      	ldr	r0, [pc, #40]	; (8001a64 <bmi08g_init+0x60>)
 8001a3a:	f005 ffa7 	bl	800798c <iprintf>
        if (rslt == BMI08X_OK)
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d108      	bne.n	8001a58 <bmi08g_init+0x54>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 8001a46:	7bbb      	ldrb	r3, [r7, #14]
 8001a48:	2b0f      	cmp	r3, #15
 8001a4a:	d103      	bne.n	8001a54 <bmi08g_init+0x50>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8001a4c:	7bba      	ldrb	r2, [r7, #14]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	705a      	strb	r2, [r3, #1]
 8001a52:	e001      	b.n	8001a58 <bmi08g_init+0x54>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8001a54:	23fd      	movs	r3, #253	; 0xfd
 8001a56:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	0800a82c 	.word	0x0800a82c

08001a68 <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	4603      	mov	r3, r0
 8001a76:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a78:	6838      	ldr	r0, [r7, #0]
 8001a7a:	f000 f9eb 	bl	8001e54 <null_ptr_check>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001a82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d111      	bne.n	8001aae <bmi08g_get_regs+0x46>
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00e      	beq.n	8001aae <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8001a96:	7bf8      	ldrb	r0, [r7, #15]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	f000 f9fd 	bl	8001e9c <get_regs>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001aa6:	e004      	b.n	8001ab2 <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001aa8:	23f9      	movs	r3, #249	; 0xf9
 8001aaa:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001aac:	e001      	b.n	8001ab2 <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001aae:	23ff      	movs	r3, #255	; 0xff
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
 8001ac8:	603b      	str	r3, [r7, #0]
 8001aca:	4603      	mov	r3, r0
 8001acc:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001ace:	6838      	ldr	r0, [r7, #0]
 8001ad0:	f000 f9c0 	bl	8001e54 <null_ptr_check>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8001ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d130      	bne.n	8001b42 <bmi08g_set_regs+0x84>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d02d      	beq.n	8001b42 <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d027      	beq.n	8001b3c <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001aec:	7bf8      	ldrb	r0, [r7, #15]
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	68b9      	ldr	r1, [r7, #8]
 8001af4:	f000 f9fe 	bl	8001ef4 <set_regs>
 8001af8:	4603      	mov	r3, r0
 8001afa:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	7cdb      	ldrb	r3, [r3, #19]
 8001b00:	2b80      	cmp	r3, #128	; 0x80
 8001b02:	d003      	beq.n	8001b0c <bmi08g_set_regs+0x4e>
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	7cdb      	ldrb	r3, [r3, #19]
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d108      	bne.n	8001b1e <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	6892      	ldr	r2, [r2, #8]
 8001b14:	4611      	mov	r1, r2
 8001b16:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8001b1a:	4798      	blx	r3
        if (len > 0)
 8001b1c:	e013      	b.n	8001b46 <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7cdb      	ldrb	r3, [r3, #19]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	6892      	ldr	r2, [r2, #8]
 8001b2e:	4611      	mov	r1, r2
 8001b30:	2002      	movs	r0, #2
 8001b32:	4798      	blx	r3
        if (len > 0)
 8001b34:	e007      	b.n	8001b46 <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8001b36:	23fb      	movs	r3, #251	; 0xfb
 8001b38:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b3a:	e004      	b.n	8001b46 <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001b3c:	23f9      	movs	r3, #249	; 0xf9
 8001b3e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001b40:	e001      	b.n	8001b46 <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001b42:	23ff      	movs	r3, #255	; 0xff
 8001b44:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b084      	sub	sp, #16
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73bb      	strb	r3, [r7, #14]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f976 	bl	8001e54 <null_ptr_check>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d166      	bne.n	8001c42 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7d9b      	ldrb	r3, [r3, #22]
 8001b78:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7d1b      	ldrb	r3, [r3, #20]
 8001b7e:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	d901      	bls.n	8001b8a <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d901      	bls.n	8001b94 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 8001b94:	7b7b      	ldrb	r3, [r7, #13]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d14f      	bne.n	8001c3a <bmi08g_set_meas_conf+0xe8>
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d14c      	bne.n	8001c3a <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001ba0:	f107 010a 	add.w	r1, r7, #10
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2010      	movs	r0, #16
 8001baa:	f7ff ff5d 	bl	8001a68 <bmi08g_get_regs>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d142      	bne.n	8001c40 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 8001bba:	7abb      	ldrb	r3, [r7, #10]
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	f023 030f 	bic.w	r3, r3, #15
 8001bc2:	b25a      	sxtb	r2, r3
 8001bc4:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	b25b      	sxtb	r3, r3
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	b25b      	sxtb	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 8001bd6:	f107 010a 	add.w	r1, r7, #10
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2010      	movs	r0, #16
 8001be0:	f7ff ff6d 	bl	8001abe <bmi08g_set_regs>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d127      	bne.n	8001c40 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001bf0:	f107 010a 	add.w	r1, r7, #10
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	200f      	movs	r0, #15
 8001bfa:	f7ff ff35 	bl	8001a68 <bmi08g_get_regs>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11a      	bne.n	8001c40 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 8001c0a:	7abb      	ldrb	r3, [r7, #10]
 8001c0c:	b25b      	sxtb	r3, r3
 8001c0e:	f023 0307 	bic.w	r3, r3, #7
 8001c12:	b25a      	sxtb	r2, r3
 8001c14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001c26:	f107 010a 	add.w	r1, r7, #10
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	200f      	movs	r0, #15
 8001c30:	f7ff ff45 	bl	8001abe <bmi08g_set_regs>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 8001c38:	e002      	b.n	8001c40 <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8001c3a:	23f8      	movs	r3, #248	; 0xf8
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	e000      	b.n	8001c42 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8001c40:	bf00      	nop
        }
    }

    return rslt;
 8001c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 8001c56:	2301      	movs	r3, #1
 8001c58:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8fa 	bl	8001e54 <null_ptr_check>
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d13a      	bne.n	8001ce2 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 8001c6c:	f107 010c 	add.w	r1, r7, #12
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	2011      	movs	r0, #17
 8001c76:	f7ff fef7 	bl	8001a68 <bmi08g_get_regs>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d12d      	bne.n	8001ce2 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7cdb      	ldrb	r3, [r3, #19]
 8001c8a:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 8001c8c:	7b7b      	ldrb	r3, [r7, #13]
 8001c8e:	2b80      	cmp	r3, #128	; 0x80
 8001c90:	d104      	bne.n	8001c9c <bmi08g_set_power_mode+0x4e>
 8001c92:	7b3b      	ldrb	r3, [r7, #12]
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d101      	bne.n	8001c9c <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 8001c9c:	7b7b      	ldrb	r3, [r7, #13]
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d104      	bne.n	8001cac <bmi08g_set_power_mode+0x5e>
 8001ca2:	7b3b      	ldrb	r3, [r7, #12]
 8001ca4:	2b80      	cmp	r3, #128	; 0x80
 8001ca6:	d101      	bne.n	8001cac <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 8001cac:	7bbb      	ldrb	r3, [r7, #14]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 8001cb2:	f107 010d 	add.w	r1, r7, #13
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	2011      	movs	r0, #17
 8001cbc:	f7ff feff 	bl	8001abe <bmi08g_set_regs>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10a      	bne.n	8001ce2 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6892      	ldr	r2, [r2, #8]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f247 5030 	movw	r0, #30000	; 0x7530
 8001cda:	4798      	blx	r3
 8001cdc:	e001      	b.n	8001ce2 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8001cde:	23fb      	movs	r3, #251	; 0xfb
 8001ce0:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	b086      	sub	sp, #24
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 8001cf8:	23c8      	movs	r3, #200	; 0xc8
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001d00:	6838      	ldr	r0, [r7, #0]
 8001d02:	f000 f8a7 	bl	8001e54 <null_ptr_check>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8001d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d140      	bne.n	8001d94 <bmi08g_get_data+0xa6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d03d      	beq.n	8001d94 <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 8001d18:	f107 010c 	add.w	r1, r7, #12
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	2206      	movs	r2, #6
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff fea1 	bl	8001a68 <bmi08g_get_regs>
 8001d26:	4603      	mov	r3, r0
 8001d28:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d132      	bne.n	8001d98 <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001d36:	7b7b      	ldrb	r3, [r7, #13]
 8001d38:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d3a:	7d7b      	ldrb	r3, [r7, #21]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	7dbb      	ldrb	r3, [r7, #22]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	4313      	orrs	r3, r2
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001d4a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d5a:	7d7b      	ldrb	r3, [r7, #21]
 8001d5c:	021b      	lsls	r3, r3, #8
 8001d5e:	b21a      	sxth	r2, r3
 8001d60:	7dbb      	ldrb	r3, [r7, #22]
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001d6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001d72:	7c3b      	ldrb	r3, [r7, #16]
 8001d74:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001d76:	7c7b      	ldrb	r3, [r7, #17]
 8001d78:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001d7a:	7d7b      	ldrb	r3, [r7, #21]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b21a      	sxth	r2, r3
 8001d80:	7dbb      	ldrb	r3, [r7, #22]
 8001d82:	b21b      	sxth	r3, r3
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001d8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001d92:	e001      	b.n	8001d98 <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001d94:	23ff      	movs	r3, #255	; 0xff
 8001d96:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f000 f850 	bl	8001e54 <null_ptr_check>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11e      	bne.n	8001dfe <bmi08g_set_int_config+0x5a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01b      	beq.n	8001dfe <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <bmi08g_set_int_config+0x36>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db11      	blt.n	8001df6 <bmi08g_set_int_config+0x52>
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d80e      	bhi.n	8001df6 <bmi08g_set_int_config+0x52>
 8001dd8:	e006      	b.n	8001de8 <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f8e1 	bl	8001fa4 <set_gyro_data_ready_int>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
                break;
 8001de6:	e009      	b.n	8001dfc <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001de8:	6839      	ldr	r1, [r7, #0]
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f94c 	bl	8002088 <set_fifo_int>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
                break;
 8001df4:	e002      	b.n	8001dfc <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001df6:	23f8      	movs	r3, #248	; 0xf8
 8001df8:	73fb      	strb	r3, [r7, #15]
                break;
 8001dfa:	bf00      	nop
        switch (int_config->int_type)
 8001dfc:	e001      	b.n	8001e02 <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001dfe:	23ff      	movs	r3, #255	; 0xff
 8001e00:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001e22:	f107 010e 	add.w	r1, r7, #14
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f7ff fe1c 	bl	8001a68 <bmi08g_get_regs>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 8001e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001e3c:	7bba      	ldrb	r2, [r7, #14]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	701a      	strb	r2, [r3, #0]
 8001e42:	e001      	b.n	8001e48 <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001e44:	23ff      	movs	r3, #255	; 0xff
 8001e46:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00f      	beq.n	8001e82 <null_ptr_check+0x2e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <null_ptr_check+0x2e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d007      	beq.n	8001e82 <null_ptr_check+0x2e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001e82:	23ff      	movs	r3, #255	; 0xff
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	e001      	b.n	8001e8c <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b087      	sub	sp, #28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	7b1b      	ldrb	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d103      	bne.n	8001ec0 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ebe:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6a1c      	ldr	r4, [r3, #32]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	7bf8      	ldrb	r0, [r7, #15]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	47a0      	blx	r4
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8001ee4:	23fe      	movs	r3, #254	; 0xfe
 8001ee6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd90      	pop	{r4, r7, pc}

08001ef4 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001ef4:	b590      	push	{r4, r7, lr}
 8001ef6:	b087      	sub	sp, #28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	7b1b      	ldrb	r3, [r3, #12]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d103      	bne.n	8001f1c <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1a:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d113      	bne.n	8001f4a <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	7bf8      	ldrb	r0, [r7, #15]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	68b9      	ldr	r1, [r7, #8]
 8001f30:	47a0      	blx	r4
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001f46:	23fe      	movs	r3, #254	; 0xfe
 8001f48:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d923      	bls.n	8001f98 <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001f50:	2300      	movs	r3, #0
 8001f52:	75bb      	strb	r3, [r7, #22]
 8001f54:	e01c      	b.n	8001f90 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001f5a:	7dbb      	ldrb	r3, [r7, #22]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	18d1      	adds	r1, r2, r3
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	7bf8      	ldrb	r0, [r7, #15]
 8001f66:	2201      	movs	r2, #1
 8001f68:	47a0      	blx	r4
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001f84:	23fe      	movs	r3, #254	; 0xfe
 8001f86:	75fb      	strb	r3, [r7, #23]
                break;
 8001f88:	e006      	b.n	8001f98 <set_regs+0xa4>
        for (count = 0; count < len; count++)
 8001f8a:	7dbb      	ldrb	r3, [r7, #22]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	75bb      	strb	r3, [r7, #22]
 8001f90:	7dbb      	ldrb	r3, [r7, #22]
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8de      	bhi.n	8001f56 <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001f98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd90      	pop	{r4, r7, pc}

08001fa4 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001fae:	2300      	movs	r3, #0
 8001fb0:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001fb2:	f107 010c 	add.w	r1, r7, #12
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	2018      	movs	r0, #24
 8001fbc:	f7ff ff6e 	bl	8001e9c <get_regs>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	791b      	ldrb	r3, [r3, #4]
 8001fd0:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <set_gyro_data_ready_int+0x3c>
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d00f      	beq.n	8001ffe <set_gyro_data_ready_int+0x5a>
 8001fde:	e01b      	b.n	8002018 <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 8001fe0:	7b3b      	ldrb	r3, [r7, #12]
 8001fe2:	b25b      	sxtb	r3, r3
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	733b      	strb	r3, [r7, #12]
                break;
 8001ffc:	e00f      	b.n	800201e <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 8001ffe:	7b3b      	ldrb	r3, [r7, #12]
 8002000:	b25b      	sxtb	r3, r3
 8002002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002006:	b25a      	sxtb	r2, r3
 8002008:	7bbb      	ldrb	r3, [r7, #14]
 800200a:	01db      	lsls	r3, r3, #7
 800200c:	b25b      	sxtb	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b25b      	sxtb	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	733b      	strb	r3, [r7, #12]
                break;
 8002016:	e002      	b.n	800201e <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002018:	23fb      	movs	r3, #251	; 0xfb
 800201a:	73fb      	strb	r3, [r7, #15]
                break;
 800201c:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800201e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d12a      	bne.n	800207c <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	f003 0381 	and.w	r3, r3, #129	; 0x81
 800202c:	2b00      	cmp	r3, #0
 800202e:	d002      	beq.n	8002036 <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	737b      	strb	r3, [r7, #13]
 8002034:	e001      	b.n	800203a <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 8002036:	2300      	movs	r3, #0
 8002038:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 800203a:	f107 010c 	add.w	r1, r7, #12
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2201      	movs	r2, #1
 8002042:	2018      	movs	r0, #24
 8002044:	f7ff fd3b 	bl	8001abe <bmi08g_set_regs>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800204c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d113      	bne.n	800207c <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8002054:	6839      	ldr	r1, [r7, #0]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f88c 	bl	8002174 <set_int_pin_config>
 800205c:	4603      	mov	r3, r0
 800205e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d109      	bne.n	800207c <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	1c59      	adds	r1, r3, #1
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	2015      	movs	r0, #21
 8002074:	f7ff fd23 	bl	8001abe <bmi08g_set_regs>
 8002078:	4603      	mov	r3, r0
 800207a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800207c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8002092:	2300      	movs	r3, #0
 8002094:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002096:	f107 010c 	add.w	r1, r7, #12
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2201      	movs	r2, #1
 800209e:	2018      	movs	r0, #24
 80020a0:	f7ff fefc 	bl	8001e9c <get_regs>
 80020a4:	4603      	mov	r3, r0
 80020a6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80020a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d15b      	bne.n	8002168 <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	791b      	ldrb	r3, [r3, #4]
 80020b4:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <set_fifo_int+0x3c>
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d010      	beq.n	80020e4 <set_fifo_int+0x5c>
 80020c2:	e01f      	b.n	8002104 <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 80020c4:	7b3b      	ldrb	r3, [r7, #12]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	f023 0304 	bic.w	r3, r3, #4
 80020cc:	b25a      	sxtb	r2, r3
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b25b      	sxtb	r3, r3
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	733b      	strb	r3, [r7, #12]
                break;
 80020e2:	e012      	b.n	800210a <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 80020e4:	7b3b      	ldrb	r3, [r7, #12]
 80020e6:	b25b      	sxtb	r3, r3
 80020e8:	f023 0320 	bic.w	r3, r3, #32
 80020ec:	b25a      	sxtb	r2, r3
 80020ee:	7bbb      	ldrb	r3, [r7, #14]
 80020f0:	015b      	lsls	r3, r3, #5
 80020f2:	b25b      	sxtb	r3, r3
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b25b      	sxtb	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
                break;
 8002102:	e002      	b.n	800210a <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8002104:	23fb      	movs	r3, #251	; 0xfb
 8002106:	73fb      	strb	r3, [r7, #15]
                break;
 8002108:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 800210a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d12a      	bne.n	8002168 <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 8002112:	7b3b      	ldrb	r3, [r7, #12]
 8002114:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8002118:	2b00      	cmp	r3, #0
 800211a:	d002      	beq.n	8002122 <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 800211c:	2340      	movs	r3, #64	; 0x40
 800211e:	737b      	strb	r3, [r7, #13]
 8002120:	e001      	b.n	8002126 <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 8002122:	2300      	movs	r3, #0
 8002124:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8002126:	f107 010c 	add.w	r1, r7, #12
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2201      	movs	r2, #1
 800212e:	2018      	movs	r0, #24
 8002130:	f7ff fcc5 	bl	8001abe <bmi08g_set_regs>
 8002134:	4603      	mov	r3, r0
 8002136:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8002138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d113      	bne.n	8002168 <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f816 	bl	8002174 <set_int_pin_config>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800214c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d109      	bne.n	8002168 <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8002154:	f107 030c 	add.w	r3, r7, #12
 8002158:	1c59      	adds	r1, r3, #1
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2201      	movs	r2, #1
 800215e:	2015      	movs	r0, #21
 8002160:	f7ff fcad 	bl	8001abe <bmi08g_set_regs>
 8002164:	4603      	mov	r3, r0
 8002166:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 800217e:	f107 010e 	add.w	r1, r7, #14
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2201      	movs	r2, #1
 8002186:	2016      	movs	r0, #22
 8002188:	f7ff fe88 	bl	8001e9c <get_regs>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d150      	bne.n	800223a <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <set_int_pin_config+0x32>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d020      	beq.n	80021e6 <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 80021a4:	e040      	b.n	8002228 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 80021a6:	7bbb      	ldrb	r3, [r7, #14]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	b25a      	sxtb	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 80021c4:	7bbb      	ldrb	r3, [r7, #14]
 80021c6:	b25b      	sxtb	r3, r3
 80021c8:	f023 0302 	bic.w	r3, r3, #2
 80021cc:	b25a      	sxtb	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	78db      	ldrb	r3, [r3, #3]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	73bb      	strb	r3, [r7, #14]
                break;
 80021e4:	e020      	b.n	8002228 <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 80021e6:	7bbb      	ldrb	r3, [r7, #14]
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	f023 0304 	bic.w	r3, r3, #4
 80021ee:	b25a      	sxtb	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	789b      	ldrb	r3, [r3, #2]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	b25b      	sxtb	r3, r3
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	b25b      	sxtb	r3, r3
 80021fe:	4313      	orrs	r3, r2
 8002200:	b25b      	sxtb	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8002206:	7bbb      	ldrb	r3, [r7, #14]
 8002208:	b25b      	sxtb	r3, r3
 800220a:	f023 0308 	bic.w	r3, r3, #8
 800220e:	b25a      	sxtb	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	78db      	ldrb	r3, [r3, #3]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	b25b      	sxtb	r3, r3
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	b25b      	sxtb	r3, r3
 800221e:	4313      	orrs	r3, r2
 8002220:	b25b      	sxtb	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	73bb      	strb	r3, [r7, #14]
                break;
 8002226:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8002228:	f107 010e 	add.w	r1, r7, #14
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2201      	movs	r2, #1
 8002230:	2016      	movs	r0, #22
 8002232:	f7ff fc44 	bl	8001abe <bmi08g_set_regs>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800223a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8002250:	1d39      	adds	r1, r7, #4
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	2201      	movs	r2, #1
 8002258:	4803      	ldr	r0, [pc, #12]	; (8002268 <__io_putchar+0x20>)
 800225a:	f004 f973 	bl	8006544 <HAL_UART_Transmit>
}
 800225e:	bf00      	nop
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	200002b4 	.word	0x200002b4

0800226c <init_bmi08x_get_data>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x_get_data(void) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 8002272:	483d      	ldr	r0, [pc, #244]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002274:	f7fe fe66 	bl	8000f44 <bmi08a_init>
 8002278:	4603      	mov	r3, r0
 800227a:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	4619      	mov	r1, r3
 8002282:	483a      	ldr	r0, [pc, #232]	; (800236c <init_bmi08x_get_data+0x100>)
 8002284:	f000 fda4 	bl	8002dd0 <bmi08x_error_codes_print_result>
	printf("Accel init\n\r");
 8002288:	4839      	ldr	r0, [pc, #228]	; (8002370 <init_bmi08x_get_data+0x104>)
 800228a:	f005 fb7f 	bl	800798c <iprintf>

	if (rslt == BMI08X_OK) {
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <init_bmi08x_get_data+0x46>

		rslt = bmi08g_init(&bmi08xdev);
 8002296:	4834      	ldr	r0, [pc, #208]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002298:	f7ff fbb4 	bl	8001a04 <bmi08g_init>
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4619      	mov	r1, r3
 80022a6:	4833      	ldr	r0, [pc, #204]	; (8002374 <init_bmi08x_get_data+0x108>)
 80022a8:	f000 fd92 	bl	8002dd0 <bmi08x_error_codes_print_result>
		printf("Gyro init\n\r");
 80022ac:	4832      	ldr	r0, [pc, #200]	; (8002378 <init_bmi08x_get_data+0x10c>)
 80022ae:	f005 fb6d 	bl	800798c <iprintf>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d14f      	bne.n	800235a <init_bmi08x_get_data+0xee>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022bc:	220c      	movs	r2, #12
 80022be:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022c2:	7b5b      	ldrb	r3, [r3, #13]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <init_bmi08x_get_data+0x64>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022ca:	2203      	movs	r2, #3
 80022cc:	741a      	strb	r2, [r3, #16]
 80022ce:	e006      	b.n	80022de <init_bmi08x_get_data+0x72>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022d2:	7b5b      	ldrb	r3, [r3, #13]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d102      	bne.n	80022de <init_bmi08x_get_data+0x72>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 80022d8:	4b23      	ldr	r3, [pc, #140]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022da:	2203      	movs	r2, #3
 80022dc:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 80022e4:	4b20      	ldr	r3, [pc, #128]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022e6:	220a      	movs	r2, #10
 80022e8:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 80022ea:	481f      	ldr	r0, [pc, #124]	; (8002368 <init_bmi08x_get_data+0xfc>)
 80022ec:	f7fe ffb9 	bl	8001262 <bmi08a_set_power_mode>
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4619      	mov	r1, r3
 80022fa:	4820      	ldr	r0, [pc, #128]	; (800237c <init_bmi08x_get_data+0x110>)
 80022fc:	f000 fd68 	bl	8002dd0 <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 8002300:	4819      	ldr	r0, [pc, #100]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002302:	f7fe ff21 	bl	8001148 <bmi08a_set_meas_conf>
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	4619      	mov	r1, r3
 8002310:	481b      	ldr	r0, [pc, #108]	; (8002380 <init_bmi08x_get_data+0x114>)
 8002312:	f000 fd5d 	bl	8002dd0 <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002318:	2201      	movs	r2, #1
 800231a:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_250_DPS;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <init_bmi08x_get_data+0xfc>)
 800231e:	2203      	movs	r2, #3
 8002320:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002324:	2201      	movs	r2, #1
 8002326:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 8002328:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <init_bmi08x_get_data+0xfc>)
 800232a:	2200      	movs	r2, #0
 800232c:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 800232e:	480e      	ldr	r0, [pc, #56]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002330:	f7ff fc8d 	bl	8001c4e <bmi08g_set_power_mode>
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 8002338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233c:	4619      	mov	r1, r3
 800233e:	4811      	ldr	r0, [pc, #68]	; (8002384 <init_bmi08x_get_data+0x118>)
 8002340:	f000 fd46 	bl	8002dd0 <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <init_bmi08x_get_data+0xfc>)
 8002346:	f7ff fc04 	bl	8001b52 <bmi08g_set_meas_conf>
 800234a:	4603      	mov	r3, r0
 800234c:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	; (8002388 <init_bmi08x_get_data+0x11c>)
 8002356:	f000 fd3b 	bl	8002dd0 <bmi08x_error_codes_print_result>
	}

	return rslt;
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000338 	.word	0x20000338
 800236c:	0800a83c 	.word	0x0800a83c
 8002370:	0800a848 	.word	0x0800a848
 8002374:	0800a858 	.word	0x0800a858
 8002378:	0800a864 	.word	0x0800a864
 800237c:	0800a870 	.word	0x0800a870
 8002380:	0800a888 	.word	0x0800a888
 8002384:	0800a8a0 	.word	0x0800a8a0
 8002388:	0800a8b8 	.word	0x0800a8b8

0800238c <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 8002396:	4b27      	ldr	r3, [pc, #156]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 800239c:	4b25      	ldr	r3, [pc, #148]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80023a2:	4b24      	ldr	r3, [pc, #144]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80023a8:	4b22      	ldr	r3, [pc, #136]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 80023ae:	4b21      	ldr	r3, [pc, #132]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 80023b4:	4920      	ldr	r1, [pc, #128]	; (8002438 <enable_bmi08x_interrupt+0xac>)
 80023b6:	481f      	ldr	r0, [pc, #124]	; (8002434 <enable_bmi08x_interrupt+0xa8>)
 80023b8:	f7ff f808 	bl	80013cc <bmi08a_set_int_config>
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4619      	mov	r1, r3
 80023c6:	481d      	ldr	r0, [pc, #116]	; (800243c <enable_bmi08x_interrupt+0xb0>)
 80023c8:	f000 fd02 	bl	8002dd0 <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 80023cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d128      	bne.n	8002426 <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 80023da:	4b19      	ldr	r3, [pc, #100]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023dc:	2200      	movs	r2, #0
 80023de:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80023e0:	4b17      	ldr	r3, [pc, #92]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 80023ec:	4b14      	ldr	r3, [pc, #80]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 80023f2:	4911      	ldr	r1, [pc, #68]	; (8002438 <enable_bmi08x_interrupt+0xac>)
 80023f4:	4812      	ldr	r0, [pc, #72]	; (8002440 <enable_bmi08x_interrupt+0xb4>)
 80023f6:	f7ff fcd5 	bl	8001da4 <bmi08g_set_int_config>
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	4619      	mov	r1, r3
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <enable_bmi08x_interrupt+0xb8>)
 8002406:	f000 fce3 	bl	8002dd0 <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 800240a:	1db9      	adds	r1, r7, #6
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <enable_bmi08x_interrupt+0xac>)
 800240e:	2201      	movs	r2, #1
 8002410:	2018      	movs	r0, #24
 8002412:	f7ff fb29 	bl	8001a68 <bmi08g_get_regs>
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	4619      	mov	r1, r3
 8002420:	4809      	ldr	r0, [pc, #36]	; (8002448 <enable_bmi08x_interrupt+0xbc>)
 8002422:	f000 fcd5 	bl	8002dd0 <bmi08x_error_codes_print_result>
	}

	return rslt;
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000368 	.word	0x20000368
 8002438:	20000338 	.word	0x20000338
 800243c:	0800aa1c 	.word	0x0800aa1c
 8002440:	20000370 	.word	0x20000370
 8002444:	0800aa34 	.word	0x0800aa34
 8002448:	0800aa4c 	.word	0x0800aa4c

0800244c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002450:	b08f      	sub	sp, #60	; 0x3c
 8002452:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002454:	f000 ff75 	bl	8003342 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002458:	f000 f9a4 	bl	80027a4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800245c:	f000 fac0 	bl	80029e0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002460:	f000 fa8e 	bl	8002980 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8002464:	f000 fa00 	bl	8002868 <MX_SPI1_Init>
	MX_TIM2_Init();
 8002468:	f000 fa3c 	bl	80028e4 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	int8_t rslt;
	float x = 0.0, y = 0.0, z = 0.0;
 800246c:	f04f 0300 	mov.w	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	f04f 0300 	mov.w	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	f04f 0300 	mov.w	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
	int times_to_read = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
	int status = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
	 *           For SPI : BMI08X_SPI_INTF
	 * Sensor variant given as parameter
	 *          For BMI085 : BMI085_VARIANT
	 *          For BMI088 : BMI088_VARIANT
	 */
	HAL_TIM_Base_Start(&htim2);
 8002486:	48b0      	ldr	r0, [pc, #704]	; (8002748 <main+0x2fc>)
 8002488:	f003 fd20 	bl	8005ecc <HAL_TIM_Base_Start>
	//	HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	printf("Hello\n\r");
 800248c:	48af      	ldr	r0, [pc, #700]	; (800274c <main+0x300>)
 800248e:	f005 fa7d 	bl	800798c <iprintf>
//  	init_handle(&bmi085_handle);

// This is where we would set the CS for accel/gyro, urrently have the .ioc just have the GPIO pins output high
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI085_VARIANT);
 8002492:	2200      	movs	r2, #0
 8002494:	2101      	movs	r1, #1
 8002496:	48ae      	ldr	r0, [pc, #696]	; (8002750 <main+0x304>)
 8002498:	f000 fc40 	bl	8002d1c <bmi08x_interface_init>
 800249c:	4603      	mov	r3, r0
 800249e:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	4619      	mov	r1, r3
 80024a6:	48ab      	ldr	r0, [pc, #684]	; (8002754 <main+0x308>)
 80024a8:	f000 fc92 	bl	8002dd0 <bmi08x_error_codes_print_result>

//  	printf("Did we make it?\n\r");
	bmi08a_soft_reset(&bmi08xdev);
 80024ac:	48a8      	ldr	r0, [pc, #672]	; (8002750 <main+0x304>)
 80024ae:	f7fe fe14 	bl	80010da <bmi08a_soft_reset>
	/* Initialize the sensors */
	if(rslt == BMI08X_OK){

	}
	rslt = init_bmi08x_get_data(); // An API function that has very few edits from me, should just work if wired properly and spi read/write works
 80024b2:	f7ff fedb 	bl	800226c <init_bmi08x_get_data>
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("init_bmi08x_get_data", rslt);
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	4619      	mov	r1, r3
 80024c0:	48a5      	ldr	r0, [pc, #660]	; (8002758 <main+0x30c>)
 80024c2:	f000 fc85 	bl	8002dd0 <bmi08x_error_codes_print_result>
	/* Enable data ready interrupts */
	//	enable_bmi08x_data_synchronization_interrupt();
	//	uint32_t start_time = HAL_GetTick();
	rslt = enable_bmi08x_interrupt();
 80024c6:	f7ff ff61 	bl	800238c <enable_bmi08x_interrupt>
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	4619      	mov	r1, r3
 80024d4:	48a1      	ldr	r0, [pc, #644]	; (800275c <main+0x310>)
 80024d6:	f000 fc7b 	bl	8002dd0 <bmi08x_error_codes_print_result>

	printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\r");
 80024da:	48a1      	ldr	r0, [pc, #644]	; (8002760 <main+0x314>)
 80024dc:	f005 fa56 	bl	800798c <iprintf>
	printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 80024e0:	48a0      	ldr	r0, [pc, #640]	; (8002764 <main+0x318>)
 80024e2:	f005 fa53 	bl	800798c <iprintf>

	if (rslt == BMI08X_OK) {
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f040 8125 	bne.w	800273a <main+0x2ee>
		if (bmi08xdev.accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE) {
 80024f0:	4b97      	ldr	r3, [pc, #604]	; (8002750 <main+0x304>)
 80024f2:	7bdb      	ldrb	r3, [r3, #15]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 80a0 	bne.w	800263a <main+0x1ee>
			printf("\nACCEL DATA\n\r");
 80024fa:	489b      	ldr	r0, [pc, #620]	; (8002768 <main+0x31c>)
 80024fc:	f005 fa46 	bl	800798c <iprintf>
			printf("Accel data in LSB units and Gravity data in m/s^2\n\r");
 8002500:	489a      	ldr	r0, [pc, #616]	; (800276c <main+0x320>)
 8002502:	f005 fa43 	bl	800798c <iprintf>
			printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n\r");
 8002506:	489a      	ldr	r0, [pc, #616]	; (8002770 <main+0x324>)
 8002508:	f005 fa40 	bl	800798c <iprintf>

			printf(
 800250c:	4899      	ldr	r0, [pc, #612]	; (8002774 <main+0x328>)
 800250e:	f005 fa3d 	bl	800798c <iprintf>
					"Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n\r");

			while (1) {
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 8002512:	463b      	mov	r3, r7
 8002514:	498e      	ldr	r1, [pc, #568]	; (8002750 <main+0x304>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe ffaa 	bl	8001470 <bmi08a_get_data_int_status>
 800251c:	4603      	mov	r3, r0
 800251e:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08a_get_data_int_status",
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	4619      	mov	r1, r3
 8002526:	4894      	ldr	r0, [pc, #592]	; (8002778 <main+0x32c>)
 8002528:	f000 fc52 	bl	8002dd0 <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_ACCEL_DATA_READY_INT) {
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d07b      	beq.n	800262e <main+0x1e2>
					rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 8002536:	4986      	ldr	r1, [pc, #536]	; (8002750 <main+0x304>)
 8002538:	4890      	ldr	r0, [pc, #576]	; (800277c <main+0x330>)
 800253a:	f7fe feeb 	bl	8001314 <bmi08a_get_data>
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	4619      	mov	r1, r3
 8002548:	488d      	ldr	r0, [pc, #564]	; (8002780 <main+0x334>)
 800254a:	f000 fc41 	bl	8002dd0 <bmi08x_error_codes_print_result>

					if (bmi08xdev.variant == BMI085_VARIANT) {
 800254e:	4b80      	ldr	r3, [pc, #512]	; (8002750 <main+0x304>)
 8002550:	7b5b      	ldrb	r3, [r3, #13]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d11e      	bne.n	8002594 <main+0x148>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 4, 16);
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <main+0x330>)
 8002558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800255c:	2210      	movs	r2, #16
 800255e:	2104      	movs	r1, #4
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fabb 	bl	8002adc <lsb_to_mps2>
 8002566:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 4, 16);
 800256a:	4b84      	ldr	r3, [pc, #528]	; (800277c <main+0x330>)
 800256c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002570:	2210      	movs	r2, #16
 8002572:	2104      	movs	r1, #4
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fab1 	bl	8002adc <lsb_to_mps2>
 800257a:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 4, 16);
 800257e:	4b7f      	ldr	r3, [pc, #508]	; (800277c <main+0x330>)
 8002580:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002584:	2210      	movs	r2, #16
 8002586:	2104      	movs	r1, #4
 8002588:	4618      	mov	r0, r3
 800258a:	f000 faa7 	bl	8002adc <lsb_to_mps2>
 800258e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002592:	e021      	b.n	80025d8 <main+0x18c>
					} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8002594:	4b6e      	ldr	r3, [pc, #440]	; (8002750 <main+0x304>)
 8002596:	7b5b      	ldrb	r3, [r3, #13]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d11d      	bne.n	80025d8 <main+0x18c>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 800259c:	4b77      	ldr	r3, [pc, #476]	; (800277c <main+0x330>)
 800259e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a2:	2210      	movs	r2, #16
 80025a4:	2118      	movs	r1, #24
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fa98 	bl	8002adc <lsb_to_mps2>
 80025ac:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 80025b0:	4b72      	ldr	r3, [pc, #456]	; (800277c <main+0x330>)
 80025b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025b6:	2210      	movs	r2, #16
 80025b8:	2118      	movs	r1, #24
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fa8e 	bl	8002adc <lsb_to_mps2>
 80025c0:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 80025c4:	4b6d      	ldr	r3, [pc, #436]	; (800277c <main+0x330>)
 80025c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025ca:	2210      	movs	r2, #16
 80025cc:	2118      	movs	r1, #24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fa84 	bl	8002adc <lsb_to_mps2>
 80025d4:	ed87 0a03 	vstr	s0, [r7, #12]
					}

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 80025d8:	4b68      	ldr	r3, [pc, #416]	; (800277c <main+0x330>)
 80025da:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025de:	469a      	mov	sl, r3
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 80025e0:	4b66      	ldr	r3, [pc, #408]	; (800277c <main+0x330>)
 80025e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025e6:	469b      	mov	fp, r3
							bmi08x_accel.z, x, y, z);
 80025e8:	4b64      	ldr	r3, [pc, #400]	; (800277c <main+0x330>)
 80025ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 80025ee:	461e      	mov	r6, r3
 80025f0:	6978      	ldr	r0, [r7, #20]
 80025f2:	f7fd ffa9 	bl	8000548 <__aeabi_f2d>
 80025f6:	4604      	mov	r4, r0
 80025f8:	460d      	mov	r5, r1
 80025fa:	6938      	ldr	r0, [r7, #16]
 80025fc:	f7fd ffa4 	bl	8000548 <__aeabi_f2d>
 8002600:	4680      	mov	r8, r0
 8002602:	4689      	mov	r9, r1
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f7fd ff9f 	bl	8000548 <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002612:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002616:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800261a:	9600      	str	r6, [sp, #0]
 800261c:	465b      	mov	r3, fp
 800261e:	4652      	mov	r2, sl
 8002620:	68b9      	ldr	r1, [r7, #8]
 8002622:	4858      	ldr	r0, [pc, #352]	; (8002784 <main+0x338>)
 8002624:	f005 f9b2 	bl	800798c <iprintf>

					times_to_read = times_to_read + 1;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3301      	adds	r3, #1
 800262c:	60bb      	str	r3, [r7, #8]

				}
				bmi08x_delay_us(1000,0);
 800262e:	2100      	movs	r1, #0
 8002630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002634:	f000 fb54 	bl	8002ce0 <bmi08x_delay_us>
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 8002638:	e76b      	b.n	8002512 <main+0xc6>
			}
		}

		if (bmi08xdev.gyro_cfg.power == BMI08X_GYRO_PM_NORMAL) {
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <main+0x304>)
 800263c:	7cdb      	ldrb	r3, [r3, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d17b      	bne.n	800273a <main+0x2ee>
			times_to_read = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	60bb      	str	r3, [r7, #8]

			printf("\n\nGYRO DATA\n");
 8002646:	4850      	ldr	r0, [pc, #320]	; (8002788 <main+0x33c>)
 8002648:	f005 fa06 	bl	8007a58 <puts>
			printf("Gyro data in LSB units and degrees per second\n\r");
 800264c:	484f      	ldr	r0, [pc, #316]	; (800278c <main+0x340>)
 800264e:	f005 f99d 	bl	800798c <iprintf>
			printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 8002652:	4844      	ldr	r0, [pc, #272]	; (8002764 <main+0x318>)
 8002654:	f005 f99a 	bl	800798c <iprintf>

			printf(
 8002658:	484d      	ldr	r0, [pc, #308]	; (8002790 <main+0x344>)
 800265a:	f005 f997 	bl	800798c <iprintf>
					"Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n\r");

			while (times_to_read < 10) {
 800265e:	e069      	b.n	8002734 <main+0x2e8>
				rslt = bmi08g_get_data_int_status(&status, &bmi08xdev);
 8002660:	463b      	mov	r3, r7
 8002662:	493b      	ldr	r1, [pc, #236]	; (8002750 <main+0x304>)
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fbd2 	bl	8001e0e <bmi08g_get_data_int_status>
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08g_get_data_int_status",
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	4619      	mov	r1, r3
 8002674:	4847      	ldr	r0, [pc, #284]	; (8002794 <main+0x348>)
 8002676:	f000 fbab 	bl	8002dd0 <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_GYRO_DATA_READY_INT) {
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d057      	beq.n	8002734 <main+0x2e8>
					rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 8002684:	4932      	ldr	r1, [pc, #200]	; (8002750 <main+0x304>)
 8002686:	4844      	ldr	r0, [pc, #272]	; (8002798 <main+0x34c>)
 8002688:	f7ff fb31 	bl	8001cee <bmi08g_get_data>
 800268c:	4603      	mov	r3, r0
 800268e:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08g_get_data", rslt);
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	4619      	mov	r1, r3
 8002696:	4841      	ldr	r0, [pc, #260]	; (800279c <main+0x350>)
 8002698:	f000 fb9a 	bl	8002dd0 <bmi08x_error_codes_print_result>

					/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
					x = lsb_to_dps(bmi08x_gyro.x, (float) 250, 16);
 800269c:	4b3e      	ldr	r3, [pc, #248]	; (8002798 <main+0x34c>)
 800269e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026a2:	2110      	movs	r1, #16
 80026a4:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80027a0 <main+0x354>
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fa61 	bl	8002b70 <lsb_to_dps>
 80026ae:	ed87 0a05 	vstr	s0, [r7, #20]
					y = lsb_to_dps(bmi08x_gyro.y, (float) 250, 16);
 80026b2:	4b39      	ldr	r3, [pc, #228]	; (8002798 <main+0x34c>)
 80026b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026b8:	2110      	movs	r1, #16
 80026ba:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80027a0 <main+0x354>
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa56 	bl	8002b70 <lsb_to_dps>
 80026c4:	ed87 0a04 	vstr	s0, [r7, #16]
					z = lsb_to_dps(bmi08x_gyro.z, (float) 250, 16);
 80026c8:	4b33      	ldr	r3, [pc, #204]	; (8002798 <main+0x34c>)
 80026ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026ce:	2110      	movs	r1, #16
 80026d0:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80027a0 <main+0x354>
 80026d4:	4618      	mov	r0, r3
 80026d6:	f000 fa4b 	bl	8002b70 <lsb_to_dps>
 80026da:	ed87 0a03 	vstr	s0, [r7, #12]

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r", times_to_read, bmi08x_gyro.x, bmi08x_gyro.y, bmi08x_gyro.z, x, y, z);
 80026de:	4b2e      	ldr	r3, [pc, #184]	; (8002798 <main+0x34c>)
 80026e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e4:	469a      	mov	sl, r3
 80026e6:	4b2c      	ldr	r3, [pc, #176]	; (8002798 <main+0x34c>)
 80026e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80026ec:	469b      	mov	fp, r3
 80026ee:	4b2a      	ldr	r3, [pc, #168]	; (8002798 <main+0x34c>)
 80026f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80026f4:	461e      	mov	r6, r3
 80026f6:	6978      	ldr	r0, [r7, #20]
 80026f8:	f7fd ff26 	bl	8000548 <__aeabi_f2d>
 80026fc:	4604      	mov	r4, r0
 80026fe:	460d      	mov	r5, r1
 8002700:	6938      	ldr	r0, [r7, #16]
 8002702:	f7fd ff21 	bl	8000548 <__aeabi_f2d>
 8002706:	4680      	mov	r8, r0
 8002708:	4689      	mov	r9, r1
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7fd ff1c 	bl	8000548 <__aeabi_f2d>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002718:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800271c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002720:	9600      	str	r6, [sp, #0]
 8002722:	465b      	mov	r3, fp
 8002724:	4652      	mov	r2, sl
 8002726:	68b9      	ldr	r1, [r7, #8]
 8002728:	4816      	ldr	r0, [pc, #88]	; (8002784 <main+0x338>)
 800272a:	f005 f92f 	bl	800798c <iprintf>

					times_to_read = times_to_read + 1;
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	60bb      	str	r3, [r7, #8]
			while (times_to_read < 10) {
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b09      	cmp	r3, #9
 8002738:	dd92      	ble.n	8002660 <main+0x214>
				}
			}
		}
	}

	return 0;
 800273a:	2300      	movs	r3, #0
//
//    /* USER CODE BEGIN 3 */
////	 printf("Hello\n");
//  }
	/* USER CODE END 3 */
}
 800273c:	4618      	mov	r0, r3
 800273e:	371c      	adds	r7, #28
 8002740:	46bd      	mov	sp, r7
 8002742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002746:	bf00      	nop
 8002748:	20000268 	.word	0x20000268
 800274c:	0800aa7c 	.word	0x0800aa7c
 8002750:	20000338 	.word	0x20000338
 8002754:	0800aa84 	.word	0x0800aa84
 8002758:	0800aa9c 	.word	0x0800aa9c
 800275c:	0800aab4 	.word	0x0800aab4
 8002760:	0800aacc 	.word	0x0800aacc
 8002764:	0800ab04 	.word	0x0800ab04
 8002768:	0800ab38 	.word	0x0800ab38
 800276c:	0800ab48 	.word	0x0800ab48
 8002770:	0800ab7c 	.word	0x0800ab7c
 8002774:	0800abb4 	.word	0x0800abb4
 8002778:	0800ac08 	.word	0x0800ac08
 800277c:	20000378 	.word	0x20000378
 8002780:	0800ac24 	.word	0x0800ac24
 8002784:	0800ac34 	.word	0x0800ac34
 8002788:	0800ac60 	.word	0x0800ac60
 800278c:	0800ac6c 	.word	0x0800ac6c
 8002790:	0800ac9c 	.word	0x0800ac9c
 8002794:	0800acf0 	.word	0x0800acf0
 8002798:	20000380 	.word	0x20000380
 800279c:	0800ad0c 	.word	0x0800ad0c
 80027a0:	437a0000 	.word	0x437a0000

080027a4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b096      	sub	sp, #88	; 0x58
 80027a8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	2244      	movs	r2, #68	; 0x44
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f005 fa30 	bl	8007c18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027b8:	463b      	mov	r3, r7
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]
 80027c4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027ca:	f001 f8f5 	bl	80039b8 <HAL_PWREx_ControlVoltageScaling>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80027d4:	f000 fba4 	bl	8002f20 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80027d8:	f001 f8d0 	bl	800397c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <SystemClock_Config+0xc0>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	4a20      	ldr	r2, [pc, #128]	; (8002864 <SystemClock_Config+0xc0>)
 80027e4:	f023 0318 	bic.w	r3, r3, #24
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 80027ec:	2314      	movs	r3, #20
 80027ee:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027f0:	2301      	movs	r3, #1
 80027f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80027f4:	2301      	movs	r3, #1
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80027fc:	2360      	movs	r3, #96	; 0x60
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002800:	2302      	movs	r3, #2
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002804:	2301      	movs	r3, #1
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002808:	2301      	movs	r3, #1
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 800280c:	2310      	movs	r3, #16
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002810:	2302      	movs	r3, #2
 8002812:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002814:	2302      	movs	r3, #2
 8002816:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4618      	mov	r0, r3
 800281e:	f001 f921 	bl	8003a64 <HAL_RCC_OscConfig>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <SystemClock_Config+0x88>
		Error_Handler();
 8002828:	f000 fb7a 	bl	8002f20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800282c:	230f      	movs	r3, #15
 800282e:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002830:	2303      	movs	r3, #3
 8002832:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002834:	2300      	movs	r3, #0
 8002836:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8002838:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800283c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002842:	463b      	mov	r3, r7
 8002844:	2101      	movs	r1, #1
 8002846:	4618      	mov	r0, r3
 8002848:	f001 fce8 	bl	800421c <HAL_RCC_ClockConfig>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <SystemClock_Config+0xb2>
		Error_Handler();
 8002852:	f000 fb65 	bl	8002f20 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002856:	f002 f9ef 	bl	8004c38 <HAL_RCCEx_EnableMSIPLLMode>
}
 800285a:	bf00      	nop
 800285c:	3758      	adds	r7, #88	; 0x58
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000

08002868 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <MX_SPI1_Init+0x74>)
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <MX_SPI1_Init+0x78>)
 8002870:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_SPI1_Init+0x74>)
 8002874:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002878:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800287a:	4b18      	ldr	r3, [pc, #96]	; (80028dc <MX_SPI1_Init+0x74>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_SPI1_Init+0x74>)
 8002882:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002886:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <MX_SPI1_Init+0x74>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <MX_SPI1_Init+0x74>)
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <MX_SPI1_Init+0x74>)
 8002896:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <MX_SPI1_Init+0x74>)
 800289e:	2208      	movs	r2, #8
 80028a0:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <MX_SPI1_Init+0x74>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_SPI1_Init+0x74>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <MX_SPI1_Init+0x74>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <MX_SPI1_Init+0x74>)
 80028b6:	2207      	movs	r2, #7
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <MX_SPI1_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <MX_SPI1_Init+0x74>)
 80028c2:	2208      	movs	r2, #8
 80028c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80028c6:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_SPI1_Init+0x74>)
 80028c8:	f002 fb98 	bl	8004ffc <HAL_SPI_Init>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80028d2:	f000 fb25 	bl	8002f20 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	20000204 	.word	0x20000204
 80028e0:	40013000 	.word	0x40013000

080028e4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <MX_TIM2_Init+0x98>)
 8002904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002908:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8 - 1;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <MX_TIM2_Init+0x98>)
 800290c:	2207      	movs	r2, #7
 800290e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_TIM2_Init+0x98>)
 8002912:	2200      	movs	r2, #0
 8002914:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff - 1;
 8002916:	4b19      	ldr	r3, [pc, #100]	; (800297c <MX_TIM2_Init+0x98>)
 8002918:	f06f 0201 	mvn.w	r2, #1
 800291c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <MX_TIM2_Init+0x98>)
 8002920:	2200      	movs	r2, #0
 8002922:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_TIM2_Init+0x98>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <MX_TIM2_Init+0x98>)
 800292c:	f003 fa76 	bl	8005e1c <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM2_Init+0x56>
		Error_Handler();
 8002936:	f000 faf3 	bl	8002f20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800293a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002940:	f107 0310 	add.w	r3, r7, #16
 8002944:	4619      	mov	r1, r3
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <MX_TIM2_Init+0x98>)
 8002948:	f003 fb28 	bl	8005f9c <HAL_TIM_ConfigClockSource>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM2_Init+0x72>
		Error_Handler();
 8002952:	f000 fae5 	bl	8002f20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800295e:	1d3b      	adds	r3, r7, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_TIM2_Init+0x98>)
 8002964:	f003 fd18 	bl	8006398 <HAL_TIMEx_MasterConfigSynchronization>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 800296e:	f000 fad7 	bl	8002f20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000268 	.word	0x20000268

08002980 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 8002986:	4a15      	ldr	r2, [pc, #84]	; (80029dc <MX_USART2_UART_Init+0x5c>)
 8002988:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800298a:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 800298c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002990:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800299e:	4b0e      	ldr	r3, [pc, #56]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029be:	2200      	movs	r2, #0
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80029c2:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_USART2_UART_Init+0x58>)
 80029c4:	f003 fd70 	bl	80064a8 <HAL_UART_Init>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80029ce:	f000 faa7 	bl	8002f20 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200002b4 	.word	0x200002b4
 80029dc:	40004400 	.word	0x40004400

080029e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80029f6:	4b36      	ldr	r3, [pc, #216]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a35      	ldr	r2, [pc, #212]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b33      	ldr	r3, [pc, #204]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002a0e:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	4a2f      	ldr	r2, [pc, #188]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002a26:	4b2a      	ldr	r3, [pc, #168]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2a:	4a29      	ldr	r2, [pc, #164]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a32:	4b27      	ldr	r3, [pc, #156]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3e:	4b24      	ldr	r3, [pc, #144]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a23      	ldr	r2, [pc, #140]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_GPIO_Init+0xf0>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002a56:	2200      	movs	r2, #0
 8002a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5c:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <MX_GPIO_Init+0xf4>)
 8002a5e:	f000 ff75 	bl	800394c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, BMI085_NSSg_Pin | BMI085_NSSa_Pin, GPIO_PIN_SET);
 8002a62:	2201      	movs	r2, #1
 8002a64:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002a68:	481b      	ldr	r0, [pc, #108]	; (8002ad8 <MX_GPIO_Init+0xf8>)
 8002a6a:	f000 ff6f 	bl	800394c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002a6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4814      	ldr	r0, [pc, #80]	; (8002ad8 <MX_GPIO_Init+0xf8>)
 8002a86:	f000 fdb7 	bl	80035f8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 8002a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <MX_GPIO_Init+0xf4>)
 8002aa4:	f000 fda8 	bl	80035f8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BMI085_NSSg_Pin BMI085_NSSa_Pin */
	GPIO_InitStruct.Pin = BMI085_NSSg_Pin | BMI085_NSSa_Pin;
 8002aa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002aac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <MX_GPIO_Init+0xf8>)
 8002ac2:	f000 fd99 	bl	80035f8 <HAL_GPIO_Init>

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	48000800 	.word	0x48000800

08002adc <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	717b      	strb	r3, [r7, #5]
 8002aea:	4613      	mov	r3, r2
 8002aec:	713b      	strb	r3, [r7, #4]
    double power = 2;
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af6:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002afa:	793b      	ldrb	r3, [r7, #4]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd01 	bl	8000504 <__aeabi_ui2d>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	ec43 2b11 	vmov	d1, r2, r3
 8002b0a:	ed97 0b04 	vldr	d0, [r7, #16]
 8002b0e:	f006 ff3f 	bl	8009990 <pow>
 8002b12:	ec51 0b10 	vmov	r0, r1, d0
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b1e:	f7fd fe95 	bl	800084c <__aeabi_ddiv>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fe f83d 	bl	8000ba8 <__aeabi_d2f>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 8002b32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b3e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002b6c <lsb_to_mps2+0x90>
 8002b42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b5a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b5e:	eef0 7a66 	vmov.f32	s15, s13
}
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	411ce80a 	.word	0x411ce80a

08002b70 <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	ed87 0a00 	vstr	s0, [r7]
 8002b7c:	460a      	mov	r2, r1
 8002b7e:	80fb      	strh	r3, [r7, #6]
 8002b80:	4613      	mov	r3, r2
 8002b82:	717b      	strb	r3, [r7, #5]
    double power = 2;
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002b90:	797b      	ldrb	r3, [r7, #5]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fcb6 	bl	8000504 <__aeabi_ui2d>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	ec43 2b11 	vmov	d1, r2, r3
 8002ba0:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ba4:	f006 fef4 	bl	8009990 <pow>
 8002ba8:	ec51 0b10 	vmov	r0, r1, d0
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bb4:	f7fd fe4a 	bl	800084c <__aeabi_ddiv>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd fff2 	bl	8000ba8 <__aeabi_d2f>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 8002bc8:	edd7 6a00 	vldr	s13, [r7]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002be0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <bmi08x_spi_read>:

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002c06:	8afb      	ldrh	r3, [r7, #22]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4814      	ldr	r0, [pc, #80]	; (8002c60 <bmi08x_spi_read+0x70>)
 8002c0e:	f000 fe9d 	bl	800394c <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 8002c12:	f107 010f 	add.w	r1, r7, #15
 8002c16:	2332      	movs	r3, #50	; 0x32
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4812      	ldr	r0, [pc, #72]	; (8002c64 <bmi08x_spi_read+0x74>)
 8002c1c:	f002 fa91 	bl	8005142 <HAL_SPI_Transmit>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <bmi08x_spi_read+0x3a>
		return 1;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e016      	b.n	8002c58 <bmi08x_spi_read+0x68>
	}
	if (HAL_SPI_Receive(&hspi1, reg_data, len, 50) != HAL_OK) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	2332      	movs	r3, #50	; 0x32
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <bmi08x_spi_read+0x74>)
 8002c34:	f002 fbf3 	bl	800541e <HAL_SPI_Receive>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <bmi08x_spi_read+0x52>
		return 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e00a      	b.n	8002c58 <bmi08x_spi_read+0x68>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002c42:	8afb      	ldrh	r3, [r7, #22]
 8002c44:	2201      	movs	r2, #1
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <bmi08x_spi_read+0x70>)
 8002c4a:	f000 fe7f 	bl	800394c <HAL_GPIO_WritePin>
	bmi08x_delay_us(100, 0);
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	f000 f845 	bl	8002ce0 <bmi08x_delay_us>
	return 0;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	48000800 	.word	0x48000800
 8002c64:	20000204 	.word	0x20000204

08002c68 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	603b      	str	r3, [r7, #0]
 8002c74:	4603      	mov	r3, r0
 8002c76:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002c7e:	8afb      	ldrh	r3, [r7, #22]
 8002c80:	2200      	movs	r2, #0
 8002c82:	4619      	mov	r1, r3
 8002c84:	4814      	ldr	r0, [pc, #80]	; (8002cd8 <bmi08x_spi_write+0x70>)
 8002c86:	f000 fe61 	bl	800394c <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 8002c8a:	f107 010f 	add.w	r1, r7, #15
 8002c8e:	2332      	movs	r3, #50	; 0x32
 8002c90:	2201      	movs	r2, #1
 8002c92:	4812      	ldr	r0, [pc, #72]	; (8002cdc <bmi08x_spi_write+0x74>)
 8002c94:	f002 fa55 	bl	8005142 <HAL_SPI_Transmit>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <bmi08x_spi_write+0x3a>
		return 1;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e015      	b.n	8002cce <bmi08x_spi_write+0x66>
	}
	if (HAL_SPI_Transmit(&hspi1, reg_data, 1, 5) != HAL_OK) {
 8002ca2:	2305      	movs	r3, #5
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	68b9      	ldr	r1, [r7, #8]
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <bmi08x_spi_write+0x74>)
 8002caa:	f002 fa4a 	bl	8005142 <HAL_SPI_Transmit>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <bmi08x_spi_write+0x50>
		return 1;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e00a      	b.n	8002cce <bmi08x_spi_write+0x66>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 8002cb8:	8afb      	ldrh	r3, [r7, #22]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4806      	ldr	r0, [pc, #24]	; (8002cd8 <bmi08x_spi_write+0x70>)
 8002cc0:	f000 fe44 	bl	800394c <HAL_GPIO_WritePin>

	bmi08x_delay_us(100, 0);
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2064      	movs	r0, #100	; 0x64
 8002cc8:	f000 f80a 	bl	8002ce0 <bmi08x_delay_us>
	return 0;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	48000800 	.word	0x48000800
 8002cdc:	20000204 	.word	0x20000204

08002ce0 <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002cea:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <bmi08x_delay_us+0x38>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period * 10)
 8002cf2:	bf00      	nop
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <bmi08x_delay_us+0x38>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4299      	cmp	r1, r3
 8002d06:	d3f5      	bcc.n	8002cf4 <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	20000268 	.word	0x20000268

08002d1c <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d03a      	beq.n	8002dac <bmi08x_interface_init+0x90>

#if defined(PC)
        setbuf(stdout, NULL);
#endif

		bmi08x_delay_us(1000, 0);
 8002d36:	2100      	movs	r1, #0
 8002d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d3c:	f7ff ffd0 	bl	8002ce0 <bmi08x_delay_us>

		/* Bus configuration : I2C */
		if (intf == BMI08X_I2C_INTF) {
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d018      	beq.n	8002d78 <bmi08x_interface_init+0x5c>
//            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
//            coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);
		}
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		else if (intf == BMI08X_SPI_INTF) {
 8002d46:	78fb      	ldrb	r3, [r7, #3]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d115      	bne.n	8002d78 <bmi08x_interface_init+0x5c>

			bmi08x->intf = BMI08X_SPI_INTF;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a19      	ldr	r2, [pc, #100]	; (8002dbc <bmi08x_interface_init+0xa0>)
 8002d56:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <bmi08x_interface_init+0xa4>)
 8002d5c:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085_NSSa_Pin;
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <bmi08x_interface_init+0xa8>)
 8002d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d64:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085_NSSg_Pin;
 8002d66:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <bmi08x_interface_init+0xac>)
 8002d68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6c:	801a      	strh	r2, [r3, #0]

			/* CSB1 pin is made high for selecting SPI protocol (accelerometer)*/
			// Done through STM32CubeIDE
//			HAL_GPIO_WritePin(GPIOC, BMI085_NSSa_Pin, GPIO_PIN_SET);
			bmi08x_delay_us(1000, 00);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d74:	f7ff ffb4 	bl	8002ce0 <bmi08x_delay_us>
//			HAL_Delay(10);
//            coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	78ba      	ldrb	r2, [r7, #2]
 8002d7c:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <bmi08x_interface_init+0xa8>)
 8002d82:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <bmi08x_interface_init+0xac>)
 8002d88:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a0f      	ldr	r2, [pc, #60]	; (8002dcc <bmi08x_interface_init+0xb0>)
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = BMI08X_READ_WRITE_LEN;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	222e      	movs	r2, #46	; 0x2e
 8002d94:	771a      	strb	r2, [r3, #28]

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002d96:	2100      	movs	r1, #0
 8002d98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d9c:	f7ff ffa0 	bl	8002ce0 <bmi08x_delay_us>

//        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da6:	f7ff ff9b 	bl	8002ce0 <bmi08x_delay_us>
 8002daa:	e001      	b.n	8002db0 <bmi08x_interface_init+0x94>
	} else {
		rslt = BMI08X_E_NULL_PTR;
 8002dac:	23ff      	movs	r3, #255	; 0xff
 8002dae:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002db0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	08002bf1 	.word	0x08002bf1
 8002dc0:	08002c69 	.word	0x08002c69
 8002dc4:	20000386 	.word	0x20000386
 8002dc8:	20000388 	.word	0x20000388
 8002dcc:	08002ce1 	.word	0x08002ce1

08002dd0 <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8002ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8081 	beq.w	8002ee8 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4841      	ldr	r0, [pc, #260]	; (8002ef0 <bmi08x_error_codes_print_result+0x120>)
 8002dea:	f004 fdcf 	bl	800798c <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8002dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df6:	d106      	bne.n	8002e06 <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8002df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	483d      	ldr	r0, [pc, #244]	; (8002ef4 <bmi08x_error_codes_print_result+0x124>)
 8002e00:	f004 fdc4 	bl	800798c <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8002e04:	e070      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8002e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0a:	f113 0f02 	cmn.w	r3, #2
 8002e0e:	d106      	bne.n	8002e1e <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8002e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e14:	4619      	mov	r1, r3
 8002e16:	4838      	ldr	r0, [pc, #224]	; (8002ef8 <bmi08x_error_codes_print_result+0x128>)
 8002e18:	f004 fdb8 	bl	800798c <iprintf>
}
 8002e1c:	e064      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8002e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e22:	f113 0f03 	cmn.w	r3, #3
 8002e26:	d106      	bne.n	8002e36 <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4833      	ldr	r0, [pc, #204]	; (8002efc <bmi08x_error_codes_print_result+0x12c>)
 8002e30:	f004 fdac 	bl	800798c <iprintf>
}
 8002e34:	e058      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8002e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3a:	f113 0f04 	cmn.w	r3, #4
 8002e3e:	d106      	bne.n	8002e4e <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8002e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e44:	4619      	mov	r1, r3
 8002e46:	482e      	ldr	r0, [pc, #184]	; (8002f00 <bmi08x_error_codes_print_result+0x130>)
 8002e48:	f004 fda0 	bl	800798c <iprintf>
}
 8002e4c:	e04c      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8002e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e52:	f113 0f05 	cmn.w	r3, #5
 8002e56:	d106      	bne.n	8002e66 <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8002e58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4829      	ldr	r0, [pc, #164]	; (8002f04 <bmi08x_error_codes_print_result+0x134>)
 8002e60:	f004 fd94 	bl	800798c <iprintf>
}
 8002e64:	e040      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8002e66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e6a:	f113 0f06 	cmn.w	r3, #6
 8002e6e:	d106      	bne.n	8002e7e <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8002e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e74:	4619      	mov	r1, r3
 8002e76:	4824      	ldr	r0, [pc, #144]	; (8002f08 <bmi08x_error_codes_print_result+0x138>)
 8002e78:	f004 fd88 	bl	800798c <iprintf>
}
 8002e7c:	e034      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8002e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e82:	f113 0f07 	cmn.w	r3, #7
 8002e86:	d106      	bne.n	8002e96 <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	481f      	ldr	r0, [pc, #124]	; (8002f0c <bmi08x_error_codes_print_result+0x13c>)
 8002e90:	f004 fd7c 	bl	800798c <iprintf>
}
 8002e94:	e028      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8002e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e9a:	f113 0f08 	cmn.w	r3, #8
 8002e9e:	d106      	bne.n	8002eae <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8002ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	481a      	ldr	r0, [pc, #104]	; (8002f10 <bmi08x_error_codes_print_result+0x140>)
 8002ea8:	f004 fd70 	bl	800798c <iprintf>
}
 8002eac:	e01c      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8002eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eb2:	f113 0f09 	cmn.w	r3, #9
 8002eb6:	d106      	bne.n	8002ec6 <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8002eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4815      	ldr	r0, [pc, #84]	; (8002f14 <bmi08x_error_codes_print_result+0x144>)
 8002ec0:	f004 fd64 	bl	800798c <iprintf>
}
 8002ec4:	e010      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8002ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d106      	bne.n	8002edc <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8002ece:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <bmi08x_error_codes_print_result+0x148>)
 8002ed6:	f004 fd59 	bl	800798c <iprintf>
}
 8002eda:	e005      	b.n	8002ee8 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8002edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	480e      	ldr	r0, [pc, #56]	; (8002f1c <bmi08x_error_codes_print_result+0x14c>)
 8002ee4:	f004 fd52 	bl	800798c <iprintf>
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	0800ad1c 	.word	0x0800ad1c
 8002ef4:	0800ad20 	.word	0x0800ad20
 8002ef8:	0800ad3c 	.word	0x0800ad3c
 8002efc:	0800ad64 	.word	0x0800ad64
 8002f00:	0800ad84 	.word	0x0800ad84
 8002f04:	0800ada0 	.word	0x0800ada0
 8002f08:	0800adc0 	.word	0x0800adc0
 8002f0c:	0800ade4 	.word	0x0800ade4
 8002f10:	0800ae10 	.word	0x0800ae10
 8002f14:	0800ae30 	.word	0x0800ae30
 8002f18:	0800ae58 	.word	0x0800ae58
 8002f1c:	0800ae74 	.word	0x0800ae74

08002f20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f24:	b672      	cpsid	i
}
 8002f26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f28:	e7fe      	b.n	8002f28 <Error_Handler+0x8>
	...

08002f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_MspInit+0x44>)
 8002f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f36:	4a0e      	ldr	r2, [pc, #56]	; (8002f70 <HAL_MspInit+0x44>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002f3e:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <HAL_MspInit+0x44>)
 8002f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x44>)
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x44>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6593      	str	r3, [r2, #88]	; 0x58
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x44>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40021000 	.word	0x40021000

08002f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a17      	ldr	r2, [pc, #92]	; (8002ff0 <HAL_SPI_MspInit+0x7c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d128      	bne.n	8002fe8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f96:	4b17      	ldr	r3, [pc, #92]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	4a16      	ldr	r2, [pc, #88]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002f9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fa0:	6613      	str	r3, [r2, #96]	; 0x60
 8002fa2:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4a10      	ldr	r2, [pc, #64]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_SPI_MspInit+0x80>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fc6:	23e0      	movs	r3, #224	; 0xe0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fd6:	2305      	movs	r3, #5
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fda:	f107 0314 	add.w	r3, r7, #20
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe4:	f000 fb08 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002fe8:	bf00      	nop
 8002fea:	3728      	adds	r7, #40	; 0x28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40013000 	.word	0x40013000
 8002ff4:	40021000 	.word	0x40021000

08002ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003008:	d10b      	bne.n	8003022 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800300a:	4b09      	ldr	r3, [pc, #36]	; (8003030 <HAL_TIM_Base_MspInit+0x38>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	4a08      	ldr	r2, [pc, #32]	; (8003030 <HAL_TIM_Base_MspInit+0x38>)
 8003010:	f043 0301 	orr.w	r3, r3, #1
 8003014:	6593      	str	r3, [r2, #88]	; 0x58
 8003016:	4b06      	ldr	r3, [pc, #24]	; (8003030 <HAL_TIM_Base_MspInit+0x38>)
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b0ac      	sub	sp, #176	; 0xb0
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	2288      	movs	r2, #136	; 0x88
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fddf 	bl	8007c18 <memset>
  if(huart->Instance==USART2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_UART_MspInit+0xb0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d13b      	bne.n	80030dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003064:	2302      	movs	r3, #2
 8003066:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003068:	2300      	movs	r3, #0
 800306a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4618      	mov	r0, r3
 8003072:	f001 faf7 	bl	8004664 <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800307c:	f7ff ff50 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003080:	4b19      	ldr	r3, [pc, #100]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 8003086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308a:	6593      	str	r3, [r2, #88]	; 0x58
 800308c:	4b16      	ldr	r3, [pc, #88]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 800309a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309c:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030a4:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_UART_MspInit+0xb4>)
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80030b0:	230c      	movs	r3, #12
 80030b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	2302      	movs	r3, #2
 80030b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c2:	2303      	movs	r3, #3
 80030c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80030c8:	2307      	movs	r3, #7
 80030ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80030d2:	4619      	mov	r1, r3
 80030d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d8:	f000 fa8e 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030dc:	bf00      	nop
 80030de:	37b0      	adds	r7, #176	; 0xb0
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40004400 	.word	0x40004400
 80030e8:	40021000 	.word	0x40021000

080030ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030f0:	e7fe      	b.n	80030f0 <NMI_Handler+0x4>

080030f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030f6:	e7fe      	b.n	80030f6 <HardFault_Handler+0x4>

080030f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030fc:	e7fe      	b.n	80030fc <MemManage_Handler+0x4>

080030fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003102:	e7fe      	b.n	8003102 <BusFault_Handler+0x4>

08003104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003108:	e7fe      	b.n	8003108 <UsageFault_Handler+0x4>

0800310a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800310a:	b480      	push	{r7}
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003138:	f000 f958 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	bd80      	pop	{r7, pc}

08003140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
  return 1;
 8003144:	2301      	movs	r3, #1
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <_kill>:

int _kill(int pid, int sig)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800315a:	f004 fdaf 	bl	8007cbc <__errno>
 800315e:	4603      	mov	r3, r0
 8003160:	2216      	movs	r2, #22
 8003162:	601a      	str	r2, [r3, #0]
  return -1;
 8003164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003168:	4618      	mov	r0, r3
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_exit>:

void _exit (int status)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003178:	f04f 31ff 	mov.w	r1, #4294967295
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff ffe7 	bl	8003150 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003182:	e7fe      	b.n	8003182 <_exit+0x12>

08003184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	e00a      	b.n	80031ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003196:	f3af 8000 	nop.w
 800319a:	4601      	mov	r1, r0
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	60ba      	str	r2, [r7, #8]
 80031a2:	b2ca      	uxtb	r2, r1
 80031a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf0      	blt.n	8003196 <_read+0x12>
  }

  return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b086      	sub	sp, #24
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e009      	b.n	80031e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	60ba      	str	r2, [r7, #8]
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff f835 	bl	8002248 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	3301      	adds	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	dbf1      	blt.n	80031d0 <_write+0x12>
  }
  return len;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <_close>:

int _close(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
 8003216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800321e:	605a      	str	r2, [r3, #4]
  return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <_isatty>:

int _isatty(int file)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
	...

08003260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <_sbrk+0x5c>)
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <_sbrk+0x60>)
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <_sbrk+0x64>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <_sbrk+0x64>)
 800327e:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <_sbrk+0x68>)
 8003280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <_sbrk+0x64>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	429a      	cmp	r2, r3
 800328e:	d207      	bcs.n	80032a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003290:	f004 fd14 	bl	8007cbc <__errno>
 8003294:	4603      	mov	r3, r0
 8003296:	220c      	movs	r2, #12
 8003298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329a:	f04f 33ff 	mov.w	r3, #4294967295
 800329e:	e009      	b.n	80032b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a0:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <_sbrk+0x64>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032a6:	4b07      	ldr	r3, [pc, #28]	; (80032c4 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	4a05      	ldr	r2, [pc, #20]	; (80032c4 <_sbrk+0x64>)
 80032b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b2:	68fb      	ldr	r3, [r7, #12]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20018000 	.word	0x20018000
 80032c0:	00000400 	.word	0x00000400
 80032c4:	2000038c 	.word	0x2000038c
 80032c8:	200004e0 	.word	0x200004e0

080032cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80032d0:	4b06      	ldr	r3, [pc, #24]	; (80032ec <SystemInit+0x20>)
 80032d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <SystemInit+0x20>)
 80032d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80032f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003328 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032f4:	f7ff ffea 	bl	80032cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopForever+0x6>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopForever+0xe>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopForever+0x16>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800331e:	f004 fcd3 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003322:	f7ff f893 	bl	800244c <main>

08003326 <LoopForever>:

LoopForever:
    b LoopForever
 8003326:	e7fe      	b.n	8003326 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003328:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003334:	0800b298 	.word	0x0800b298
  ldr r2, =_sbss
 8003338:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800333c:	200004e0 	.word	0x200004e0

08003340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC1_2_IRQHandler>

08003342 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800334c:	2003      	movs	r0, #3
 800334e:	f000 f91f 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f80e 	bl	8003374 <HAL_InitTick>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d002      	beq.n	8003364 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	e001      	b.n	8003368 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003364:	f7ff fde2 	bl	8002f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003368:	79fb      	ldrb	r3, [r7, #7]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_InitTick+0x6c>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d023      	beq.n	80033d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_InitTick+0x70>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_InitTick+0x6c>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	4619      	mov	r1, r3
 8003392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003396:	fbb3 f3f1 	udiv	r3, r3, r1
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f91d 	bl	80035de <HAL_SYSTICK_Config>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b0f      	cmp	r3, #15
 80033ae:	d809      	bhi.n	80033c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033b0:	2200      	movs	r2, #0
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	f04f 30ff 	mov.w	r0, #4294967295
 80033b8:	f000 f8f5 	bl	80035a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033bc:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_InitTick+0x74>)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6013      	str	r3, [r2, #0]
 80033c2:	e007      	b.n	80033d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e004      	b.n	80033d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
 80033ce:	e001      	b.n	80033d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000008 	.word	0x20000008
 80033e4:	20000000 	.word	0x20000000
 80033e8:	20000004 	.word	0x20000004

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000008 	.word	0x20000008
 8003410:	20000390 	.word	0x20000390

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000390 	.word	0x20000390

0800342c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003442:	68ba      	ldr	r2, [r7, #8]
 8003444:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003448:	4013      	ands	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003454:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800345c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <__NVIC_SetPriorityGrouping+0x44>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	60d3      	str	r3, [r2, #12]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000ed00 	.word	0xe000ed00

08003474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <__NVIC_GetPriorityGrouping+0x18>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	f003 0307 	and.w	r3, r3, #7
}
 8003482:	4618      	mov	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295
 8003570:	f7ff ff8e 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff47 	bl	800342c <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff5c 	bl	8003474 <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff8e 	bl	80034e4 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5d 	bl	8003490 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff ffb0 	bl	800354c <SysTick_Config>
 80035ec:	4603      	mov	r3, r0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
	...

080035f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	e17f      	b.n	8003908 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	2101      	movs	r1, #1
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8171 	beq.w	8003902 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0303 	and.w	r3, r3, #3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d005      	beq.n	8003638 <HAL_GPIO_Init+0x40>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d130      	bne.n	800369a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2203      	movs	r2, #3
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4013      	ands	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800366e:	2201      	movs	r2, #1
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	091b      	lsrs	r3, r3, #4
 8003684:	f003 0201 	and.w	r2, r3, #1
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d118      	bne.n	80036d8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80036ac:	2201      	movs	r2, #1
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	08db      	lsrs	r3, r3, #3
 80036c2:	f003 0201 	and.w	r2, r3, #1
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	fa02 f303 	lsl.w	r3, r2, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d017      	beq.n	8003714 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	2203      	movs	r2, #3
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4013      	ands	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	4313      	orrs	r3, r2
 800370c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	6939      	ldr	r1, [r7, #16]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80ac 	beq.w	8003902 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <HAL_GPIO_Init+0x330>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ae:	4a5e      	ldr	r2, [pc, #376]	; (8003928 <HAL_GPIO_Init+0x330>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6613      	str	r3, [r2, #96]	; 0x60
 80037b6:	4b5c      	ldr	r3, [pc, #368]	; (8003928 <HAL_GPIO_Init+0x330>)
 80037b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037c2:	4a5a      	ldr	r2, [pc, #360]	; (800392c <HAL_GPIO_Init+0x334>)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f003 0303 	and.w	r3, r3, #3
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	220f      	movs	r2, #15
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	4013      	ands	r3, r2
 80037e4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037ec:	d025      	beq.n	800383a <HAL_GPIO_Init+0x242>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a4f      	ldr	r2, [pc, #316]	; (8003930 <HAL_GPIO_Init+0x338>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d01f      	beq.n	8003836 <HAL_GPIO_Init+0x23e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a4e      	ldr	r2, [pc, #312]	; (8003934 <HAL_GPIO_Init+0x33c>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d019      	beq.n	8003832 <HAL_GPIO_Init+0x23a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a4d      	ldr	r2, [pc, #308]	; (8003938 <HAL_GPIO_Init+0x340>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_GPIO_Init+0x236>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a4c      	ldr	r2, [pc, #304]	; (800393c <HAL_GPIO_Init+0x344>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d00d      	beq.n	800382a <HAL_GPIO_Init+0x232>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4b      	ldr	r2, [pc, #300]	; (8003940 <HAL_GPIO_Init+0x348>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d007      	beq.n	8003826 <HAL_GPIO_Init+0x22e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a4a      	ldr	r2, [pc, #296]	; (8003944 <HAL_GPIO_Init+0x34c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_GPIO_Init+0x22a>
 800381e:	2306      	movs	r3, #6
 8003820:	e00c      	b.n	800383c <HAL_GPIO_Init+0x244>
 8003822:	2307      	movs	r3, #7
 8003824:	e00a      	b.n	800383c <HAL_GPIO_Init+0x244>
 8003826:	2305      	movs	r3, #5
 8003828:	e008      	b.n	800383c <HAL_GPIO_Init+0x244>
 800382a:	2304      	movs	r3, #4
 800382c:	e006      	b.n	800383c <HAL_GPIO_Init+0x244>
 800382e:	2303      	movs	r3, #3
 8003830:	e004      	b.n	800383c <HAL_GPIO_Init+0x244>
 8003832:	2302      	movs	r3, #2
 8003834:	e002      	b.n	800383c <HAL_GPIO_Init+0x244>
 8003836:	2301      	movs	r3, #1
 8003838:	e000      	b.n	800383c <HAL_GPIO_Init+0x244>
 800383a:	2300      	movs	r3, #0
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	f002 0203 	and.w	r2, r2, #3
 8003842:	0092      	lsls	r2, r2, #2
 8003844:	4093      	lsls	r3, r2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800384c:	4937      	ldr	r1, [pc, #220]	; (800392c <HAL_GPIO_Init+0x334>)
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	3302      	adds	r3, #2
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_GPIO_Init+0x350>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800387e:	4a32      	ldr	r2, [pc, #200]	; (8003948 <HAL_GPIO_Init+0x350>)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003884:	4b30      	ldr	r3, [pc, #192]	; (8003948 <HAL_GPIO_Init+0x350>)
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038a8:	4a27      	ldr	r2, [pc, #156]	; (8003948 <HAL_GPIO_Init+0x350>)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <HAL_GPIO_Init+0x350>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_GPIO_Init+0x350>)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_GPIO_Init+0x350>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_GPIO_Init+0x350>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	f47f ae78 	bne.w	8003608 <HAL_GPIO_Init+0x10>
  }
}
 8003918:	bf00      	nop
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	40010000 	.word	0x40010000
 8003930:	48000400 	.word	0x48000400
 8003934:	48000800 	.word	0x48000800
 8003938:	48000c00 	.word	0x48000c00
 800393c:	48001000 	.word	0x48001000
 8003940:	48001400 	.word	0x48001400
 8003944:	48001800 	.word	0x48001800
 8003948:	40010400 	.word	0x40010400

0800394c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	460b      	mov	r3, r1
 8003956:	807b      	strh	r3, [r7, #2]
 8003958:	4613      	mov	r3, r2
 800395a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800395c:	787b      	ldrb	r3, [r7, #1]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003962:	887a      	ldrh	r2, [r7, #2]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003968:	e002      	b.n	8003970 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800396a:	887a      	ldrh	r2, [r7, #2]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	40007000 	.word	0x40007000

0800399c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40007000 	.word	0x40007000

080039b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c6:	d130      	bne.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d038      	beq.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039de:	4a1e      	ldr	r2, [pc, #120]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039e6:	4b1d      	ldr	r3, [pc, #116]	; (8003a5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2232      	movs	r2, #50	; 0x32
 80039ec:	fb02 f303 	mul.w	r3, r2, r3
 80039f0:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	0c9b      	lsrs	r3, r3, #18
 80039f8:	3301      	adds	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039fc:	e002      	b.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a10:	d102      	bne.n	8003a18 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1f2      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d110      	bne.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e00f      	b.n	8003a4a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a36:	d007      	beq.n	8003a48 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a38:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a40:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a46:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40007000 	.word	0x40007000
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	431bde83 	.word	0x431bde83

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e3ca      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a76:	4b97      	ldr	r3, [pc, #604]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a80:	4b94      	ldr	r3, [pc, #592]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0310 	and.w	r3, r3, #16
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80e4 	beq.w	8003c60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <HAL_RCC_OscConfig+0x4a>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b0c      	cmp	r3, #12
 8003aa2:	f040 808b 	bne.w	8003bbc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	f040 8087 	bne.w	8003bbc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aae:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x62>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e3a2      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d004      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x7c>
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ade:	e005      	b.n	8003aec <HAL_RCC_OscConfig+0x88>
 8003ae0:	4b7c      	ldr	r3, [pc, #496]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d223      	bcs.n	8003b38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fd55 	bl	80045a4 <RCC_SetFlashLatencyFromMSIRange>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e383      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b04:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a72      	ldr	r2, [pc, #456]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b0a:	f043 0308 	orr.w	r3, r3, #8
 8003b0e:	6013      	str	r3, [r2, #0]
 8003b10:	4b70      	ldr	r3, [pc, #448]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a1b      	ldr	r3, [r3, #32]
 8003b1c:	496d      	ldr	r1, [pc, #436]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b22:	4b6c      	ldr	r3, [pc, #432]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	021b      	lsls	r3, r3, #8
 8003b30:	4968      	ldr	r1, [pc, #416]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
 8003b36:	e025      	b.n	8003b84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b38:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4960      	ldr	r1, [pc, #384]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b56:	4b5f      	ldr	r3, [pc, #380]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	495b      	ldr	r1, [pc, #364]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fd15 	bl	80045a4 <RCC_SetFlashLatencyFromMSIRange>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e343      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b84:	f000 fc4a 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	4950      	ldr	r1, [pc, #320]	; (8003cd8 <HAL_RCC_OscConfig+0x274>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba0:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <HAL_RCC_OscConfig+0x278>)
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ba4:	4b4e      	ldr	r3, [pc, #312]	; (8003ce0 <HAL_RCC_OscConfig+0x27c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fbe3 	bl	8003374 <HAL_InitTick>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d052      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	e327      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d032      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bc4:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a42      	ldr	r2, [pc, #264]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bd0:	f7ff fc20 	bl	8003414 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd8:	f7ff fc1c 	bl	8003414 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e310      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bea:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003bfc:	f043 0308 	orr.w	r3, r3, #8
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	4931      	ldr	r1, [pc, #196]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c14:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	492c      	ldr	r1, [pc, #176]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	604b      	str	r3, [r1, #4]
 8003c28:	e01a      	b.n	8003c60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c2a:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a29      	ldr	r2, [pc, #164]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c36:	f7ff fbed 	bl	8003414 <HAL_GetTick>
 8003c3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c3e:	f7ff fbe9 	bl	8003414 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e2dd      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f0      	bne.n	8003c3e <HAL_RCC_OscConfig+0x1da>
 8003c5c:	e000      	b.n	8003c60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d074      	beq.n	8003d56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d005      	beq.n	8003c7e <HAL_RCC_OscConfig+0x21a>
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	2b0c      	cmp	r3, #12
 8003c76:	d10e      	bne.n	8003c96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d10b      	bne.n	8003c96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7e:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d064      	beq.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d160      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e2ba      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9e:	d106      	bne.n	8003cae <HAL_RCC_OscConfig+0x24a>
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	e026      	b.n	8003cfc <HAL_RCC_OscConfig+0x298>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb6:	d115      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x280>
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a02      	ldr	r2, [pc, #8]	; (8003cd4 <HAL_RCC_OscConfig+0x270>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e014      	b.n	8003cfc <HAL_RCC_OscConfig+0x298>
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	0800ae98 	.word	0x0800ae98
 8003cdc:	20000000 	.word	0x20000000
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	4ba0      	ldr	r3, [pc, #640]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a9f      	ldr	r2, [pc, #636]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b9d      	ldr	r3, [pc, #628]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a9c      	ldr	r2, [pc, #624]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7ff fb86 	bl	8003414 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7ff fb82 	bl	8003414 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e276      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d1e:	4b92      	ldr	r3, [pc, #584]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x2a8>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2c:	f7ff fb72 	bl	8003414 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7ff fb6e 	bl	8003414 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e262      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d46:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x2d0>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d060      	beq.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b04      	cmp	r3, #4
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_OscConfig+0x310>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d119      	bne.n	8003da2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d116      	bne.n	8003da2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d74:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_OscConfig+0x328>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e23f      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8c:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	4973      	ldr	r1, [pc, #460]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da0:	e040      	b.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d023      	beq.n	8003df2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003daa:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db6:	f7ff fb2d 	bl	8003414 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dbe:	f7ff fb29 	bl	8003414 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e21d      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd0:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ddc:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	061b      	lsls	r3, r3, #24
 8003dea:	495f      	ldr	r1, [pc, #380]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	604b      	str	r3, [r1, #4]
 8003df0:	e018      	b.n	8003e24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003df2:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a5c      	ldr	r2, [pc, #368]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfe:	f7ff fb09 	bl	8003414 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e06:	f7ff fb05 	bl	8003414 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e1f9      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e18:	4b53      	ldr	r3, [pc, #332]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1f0      	bne.n	8003e06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d03c      	beq.n	8003eaa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d01c      	beq.n	8003e72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	4a4a      	ldr	r2, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7ff fae4 	bl	8003414 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e50:	f7ff fae0 	bl	8003414 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1d4      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0ef      	beq.n	8003e50 <HAL_RCC_OscConfig+0x3ec>
 8003e70:	e01b      	b.n	8003eaa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b3d      	ldr	r3, [pc, #244]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e78:	4a3b      	ldr	r2, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f023 0301 	bic.w	r3, r3, #1
 8003e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e82:	f7ff fac7 	bl	8003414 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e8a:	f7ff fac3 	bl	8003414 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e1b7      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1ef      	bne.n	8003e8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80a6 	beq.w	8004004 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10d      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec8:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ecc:	4a26      	ldr	r2, [pc, #152]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed4:	4b24      	ldr	r3, [pc, #144]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	60bb      	str	r3, [r7, #8]
 8003ede:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_OscConfig+0x508>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d118      	bne.n	8003f22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b1e      	ldr	r3, [pc, #120]	; (8003f6c <HAL_RCC_OscConfig+0x508>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_RCC_OscConfig+0x508>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efc:	f7ff fa8a 	bl	8003414 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f02:	e008      	b.n	8003f16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7ff fa86 	bl	8003414 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d901      	bls.n	8003f16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e17a      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f16:	4b15      	ldr	r3, [pc, #84]	; (8003f6c <HAL_RCC_OscConfig+0x508>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d0f0      	beq.n	8003f04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d108      	bne.n	8003f3c <HAL_RCC_OscConfig+0x4d8>
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f30:	4a0d      	ldr	r2, [pc, #52]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f3a:	e029      	b.n	8003f90 <HAL_RCC_OscConfig+0x52c>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	2b05      	cmp	r3, #5
 8003f42:	d115      	bne.n	8003f70 <HAL_RCC_OscConfig+0x50c>
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4a:	4a07      	ldr	r2, [pc, #28]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f4c:	f043 0304 	orr.w	r3, r3, #4
 8003f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f54:	4b04      	ldr	r3, [pc, #16]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a03      	ldr	r2, [pc, #12]	; (8003f68 <HAL_RCC_OscConfig+0x504>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f64:	e014      	b.n	8003f90 <HAL_RCC_OscConfig+0x52c>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	40007000 	.word	0x40007000
 8003f70:	4b9c      	ldr	r3, [pc, #624]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	4a9b      	ldr	r2, [pc, #620]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f80:	4b98      	ldr	r3, [pc, #608]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	4a97      	ldr	r2, [pc, #604]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003f88:	f023 0304 	bic.w	r3, r3, #4
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d016      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7ff fa3c 	bl	8003414 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9e:	e00a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa0:	f7ff fa38 	bl	8003414 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e12a      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fb6:	4b8b      	ldr	r3, [pc, #556]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ed      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x53c>
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc6:	f7ff fa25 	bl	8003414 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fcc:	e00a      	b.n	8003fe4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7ff fa21 	bl	8003414 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e113      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe4:	4b7f      	ldr	r3, [pc, #508]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ed      	bne.n	8003fce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff2:	7ffb      	ldrb	r3, [r7, #31]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d105      	bne.n	8004004 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff8:	4b7a      	ldr	r3, [pc, #488]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffc:	4a79      	ldr	r2, [pc, #484]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004002:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80fe 	beq.w	800420a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	2b02      	cmp	r3, #2
 8004014:	f040 80d0 	bne.w	80041b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004018:	4b72      	ldr	r3, [pc, #456]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f003 0203 	and.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	429a      	cmp	r2, r3
 800402a:	d130      	bne.n	800408e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	3b01      	subs	r3, #1
 8004038:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d127      	bne.n	800408e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004048:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d11f      	bne.n	800408e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004058:	2a07      	cmp	r2, #7
 800405a:	bf14      	ite	ne
 800405c:	2201      	movne	r2, #1
 800405e:	2200      	moveq	r2, #0
 8004060:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004062:	4293      	cmp	r3, r2
 8004064:	d113      	bne.n	800408e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d109      	bne.n	800408e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	085b      	lsrs	r3, r3, #1
 8004086:	3b01      	subs	r3, #1
 8004088:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800408a:	429a      	cmp	r2, r3
 800408c:	d06e      	beq.n	800416c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d069      	beq.n	8004168 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d105      	bne.n	80040ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0ad      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040b0:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80040b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040bc:	f7ff f9aa 	bl	8003414 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c4:	f7ff f9a6 	bl	8003414 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e09a      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040d6:	4b43      	ldr	r3, [pc, #268]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d1f0      	bne.n	80040c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040e2:	4b40      	ldr	r3, [pc, #256]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <HAL_RCC_OscConfig+0x784>)
 80040e8:	4013      	ands	r3, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040f2:	3a01      	subs	r2, #1
 80040f4:	0112      	lsls	r2, r2, #4
 80040f6:	4311      	orrs	r1, r2
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040fc:	0212      	lsls	r2, r2, #8
 80040fe:	4311      	orrs	r1, r2
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004104:	0852      	lsrs	r2, r2, #1
 8004106:	3a01      	subs	r2, #1
 8004108:	0552      	lsls	r2, r2, #21
 800410a:	4311      	orrs	r1, r2
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004110:	0852      	lsrs	r2, r2, #1
 8004112:	3a01      	subs	r2, #1
 8004114:	0652      	lsls	r2, r2, #25
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800411c:	0912      	lsrs	r2, r2, #4
 800411e:	0452      	lsls	r2, r2, #17
 8004120:	430a      	orrs	r2, r1
 8004122:	4930      	ldr	r1, [pc, #192]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8004124:	4313      	orrs	r3, r2
 8004126:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004128:	4b2e      	ldr	r3, [pc, #184]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2d      	ldr	r2, [pc, #180]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800412e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004132:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004134:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800413a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800413e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004140:	f7ff f968 	bl	8003414 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004148:	f7ff f964 	bl	8003414 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e058      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004166:	e050      	b.n	800420a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e04f      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d148      	bne.n	800420a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004178:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004184:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a16      	ldr	r2, [pc, #88]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 800418a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800418e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004190:	f7ff f940 	bl	8003414 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7ff f93c 	bl	8003414 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e030      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x734>
 80041b6:	e028      	b.n	800420a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d023      	beq.n	8004206 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a08      	ldr	r2, [pc, #32]	; (80041e4 <HAL_RCC_OscConfig+0x780>)
 80041c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7ff f923 	bl	8003414 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d0:	e00c      	b.n	80041ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d2:	f7ff f91f 	bl	8003414 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d905      	bls.n	80041ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e013      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
 80041e4:	40021000 	.word	0x40021000
 80041e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <HAL_RCC_OscConfig+0x7b0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ec      	bne.n	80041d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80041f8:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_OscConfig+0x7b0>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	4905      	ldr	r1, [pc, #20]	; (8004214 <HAL_RCC_OscConfig+0x7b0>)
 80041fe:	4b06      	ldr	r3, [pc, #24]	; (8004218 <HAL_RCC_OscConfig+0x7b4>)
 8004200:	4013      	ands	r3, r2
 8004202:	60cb      	str	r3, [r1, #12]
 8004204:	e001      	b.n	800420a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e000      	b.n	800420c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	40021000 	.word	0x40021000
 8004218:	feeefffc 	.word	0xfeeefffc

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0e7      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b75      	ldr	r3, [pc, #468]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d910      	bls.n	8004260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	4970      	ldr	r1, [pc, #448]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b6e      	ldr	r3, [pc, #440]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0cf      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d010      	beq.n	800428e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004278:	429a      	cmp	r2, r3
 800427a:	d908      	bls.n	800428e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427c:	4b63      	ldr	r3, [pc, #396]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	4960      	ldr	r1, [pc, #384]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04c      	beq.n	8004334 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d107      	bne.n	80042b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a2:	4b5a      	ldr	r3, [pc, #360]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d121      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0a6      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d107      	bne.n	80042ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ba:	4b54      	ldr	r3, [pc, #336]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d115      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e09a      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d107      	bne.n	80042e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d2:	4b4e      	ldr	r3, [pc, #312]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e08e      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e086      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f2:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	4943      	ldr	r1, [pc, #268]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004304:	f7ff f886 	bl	8003414 <HAL_GetTick>
 8004308:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430a:	e00a      	b.n	8004322 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800430c:	f7ff f882 	bl	8003414 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	f241 3288 	movw	r2, #5000	; 0x1388
 800431a:	4293      	cmp	r3, r2
 800431c:	d901      	bls.n	8004322 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e06e      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004322:	4b3a      	ldr	r3, [pc, #232]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 020c 	and.w	r2, r3, #12
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	429a      	cmp	r2, r3
 8004332:	d1eb      	bne.n	800430c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0302 	and.w	r3, r3, #2
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	429a      	cmp	r2, r3
 800434e:	d208      	bcs.n	8004362 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b2e      	ldr	r3, [pc, #184]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	492b      	ldr	r1, [pc, #172]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004362:	4b29      	ldr	r3, [pc, #164]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	429a      	cmp	r2, r3
 800436e:	d210      	bcs.n	8004392 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f023 0207 	bic.w	r2, r3, #7
 8004378:	4923      	ldr	r1, [pc, #140]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004380:	4b21      	ldr	r3, [pc, #132]	; (8004408 <HAL_RCC_ClockConfig+0x1ec>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d001      	beq.n	8004392 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e036      	b.n	8004400 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0304 	and.w	r3, r3, #4
 800439a:	2b00      	cmp	r3, #0
 800439c:	d008      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4918      	ldr	r1, [pc, #96]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0308 	and.w	r3, r3, #8
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d009      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	4910      	ldr	r1, [pc, #64]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043d0:	f000 f824 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <HAL_RCC_ClockConfig+0x1f0>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	490b      	ldr	r1, [pc, #44]	; (8004410 <HAL_RCC_ClockConfig+0x1f4>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1f8>)
 80043ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1fc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fe ffbd 	bl	8003374 <HAL_InitTick>
 80043fa:	4603      	mov	r3, r0
 80043fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80043fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40022000 	.word	0x40022000
 800440c:	40021000 	.word	0x40021000
 8004410:	0800ae98 	.word	0x0800ae98
 8004414:	20000000 	.word	0x20000000
 8004418:	20000004 	.word	0x20000004

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b089      	sub	sp, #36	; 0x24
 8004420:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	2300      	movs	r3, #0
 8004428:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004434:	4b3b      	ldr	r3, [pc, #236]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x34>
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d121      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11e      	bne.n	800448e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004450:	4b34      	ldr	r3, [pc, #208]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d107      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800445c:	4b31      	ldr	r3, [pc, #196]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800445e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	e005      	b.n	8004478 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800446c:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004478:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_RCC_GetSysClockFreq+0x10c>)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004480:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800448c:	e00a      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d102      	bne.n	800449a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004494:	4b25      	ldr	r3, [pc, #148]	; (800452c <HAL_RCC_GetSysClockFreq+0x110>)
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e004      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044a0:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCC_GetSysClockFreq+0x114>)
 80044a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d134      	bne.n	8004514 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044aa:	4b1e      	ldr	r3, [pc, #120]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0303 	and.w	r3, r3, #3
 80044b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d003      	beq.n	80044c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d003      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0xac>
 80044c0:	e005      	b.n	80044ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044c2:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_RCC_GetSysClockFreq+0x110>)
 80044c4:	617b      	str	r3, [r7, #20]
      break;
 80044c6:	e005      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ca:	617b      	str	r3, [r7, #20]
      break;
 80044cc:	e002      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	617b      	str	r3, [r7, #20]
      break;
 80044d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	3301      	adds	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044e2:	4b10      	ldr	r3, [pc, #64]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	fb03 f202 	mul.w	r2, r3, r2
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCC_GetSysClockFreq+0x108>)
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	0e5b      	lsrs	r3, r3, #25
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	3301      	adds	r3, #1
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004514:	69bb      	ldr	r3, [r7, #24]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40021000 	.word	0x40021000
 8004528:	0800aeb0 	.word	0x0800aeb0
 800452c:	00f42400 	.word	0x00f42400
 8004530:	007a1200 	.word	0x007a1200

08004534 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_RCC_GetHCLKFreq+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000000 	.word	0x20000000

0800454c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004550:	f7ff fff0 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	4904      	ldr	r1, [pc, #16]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	0800aea8 	.word	0x0800aea8

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800457c:	f7ff ffda 	bl	8004534 <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	0adb      	lsrs	r3, r3, #11
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4904      	ldr	r1, [pc, #16]	; (80045a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004598:	4618      	mov	r0, r3
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	0800aea8 	.word	0x0800aea8

080045a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045ac:	2300      	movs	r3, #0
 80045ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045b0:	4b2a      	ldr	r3, [pc, #168]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045bc:	f7ff f9ee 	bl	800399c <HAL_PWREx_GetVoltageRange>
 80045c0:	6178      	str	r0, [r7, #20]
 80045c2:	e014      	b.n	80045ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4a24      	ldr	r2, [pc, #144]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ce:	6593      	str	r3, [r2, #88]	; 0x58
 80045d0:	4b22      	ldr	r3, [pc, #136]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045dc:	f7ff f9de 	bl	800399c <HAL_PWREx_GetVoltageRange>
 80045e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045e2:	4b1e      	ldr	r3, [pc, #120]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e6:	4a1d      	ldr	r2, [pc, #116]	; (800465c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045f4:	d10b      	bne.n	800460e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b80      	cmp	r3, #128	; 0x80
 80045fa:	d919      	bls.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004600:	d902      	bls.n	8004608 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004602:	2302      	movs	r3, #2
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e013      	b.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004608:	2301      	movs	r3, #1
 800460a:	613b      	str	r3, [r7, #16]
 800460c:	e010      	b.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b80      	cmp	r3, #128	; 0x80
 8004612:	d902      	bls.n	800461a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004614:	2303      	movs	r3, #3
 8004616:	613b      	str	r3, [r7, #16]
 8004618:	e00a      	b.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b80      	cmp	r3, #128	; 0x80
 800461e:	d102      	bne.n	8004626 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004620:	2302      	movs	r3, #2
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	e004      	b.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b70      	cmp	r3, #112	; 0x70
 800462a:	d101      	bne.n	8004630 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800462c:	2301      	movs	r3, #1
 800462e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 0207 	bic.w	r2, r3, #7
 8004638:	4909      	ldr	r1, [pc, #36]	; (8004660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	429a      	cmp	r2, r3
 800464c:	d001      	beq.n	8004652 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e000      	b.n	8004654 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40021000 	.word	0x40021000
 8004660:	40022000 	.word	0x40022000

08004664 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800466c:	2300      	movs	r3, #0
 800466e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004670:	2300      	movs	r3, #0
 8004672:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467c:	2b00      	cmp	r3, #0
 800467e:	d041      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004684:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004688:	d02a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800468a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800468e:	d824      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004696:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800469a:	d81e      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00a      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046a4:	d010      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046a6:	e018      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046a8:	4b86      	ldr	r3, [pc, #536]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	4a85      	ldr	r2, [pc, #532]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046b4:	e015      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	3304      	adds	r3, #4
 80046ba:	2100      	movs	r1, #0
 80046bc:	4618      	mov	r0, r3
 80046be:	f000 facb 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 80046c2:	4603      	mov	r3, r0
 80046c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3320      	adds	r3, #32
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fbb6 	bl	8004e40 <RCCEx_PLLSAI2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	74fb      	strb	r3, [r7, #19]
      break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e8:	4b76      	ldr	r3, [pc, #472]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f6:	4973      	ldr	r1, [pc, #460]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046fe:	e001      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d041      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004714:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004718:	d02a      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800471a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800471e:	d824      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004720:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004724:	d008      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800472a:	d81e      	bhi.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004734:	d010      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004736:	e018      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004738:	4b62      	ldr	r3, [pc, #392]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a61      	ldr	r2, [pc, #388]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004742:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004744:	e015      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fa83 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004756:	e00c      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3320      	adds	r3, #32
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fb6e 	bl	8004e40 <RCCEx_PLLSAI2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004768:	e003      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	74fb      	strb	r3, [r7, #19]
      break;
 800476e:	e000      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004772:	7cfb      	ldrb	r3, [r7, #19]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10b      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004778:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004786:	494f      	ldr	r1, [pc, #316]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	4313      	orrs	r3, r2
 800478a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800478e:	e001      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 80a0 	beq.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047a6:	4b47      	ldr	r3, [pc, #284]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047b2:	2301      	movs	r3, #1
 80047b4:	e000      	b.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047b6:	2300      	movs	r3, #0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047bc:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c0:	4a40      	ldr	r2, [pc, #256]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c6:	6593      	str	r3, [r2, #88]	; 0x58
 80047c8:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d0:	60bb      	str	r3, [r7, #8]
 80047d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047d4:	2301      	movs	r3, #1
 80047d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d8:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047e4:	f7fe fe16 	bl	8003414 <HAL_GetTick>
 80047e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047ea:	e009      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ec:	f7fe fe12 	bl	8003414 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d902      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	74fb      	strb	r3, [r7, #19]
        break;
 80047fe:	e005      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ef      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d15c      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01f      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	429a      	cmp	r2, r3
 800482e:	d019      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004830:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	4a20      	ldr	r2, [pc, #128]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	d016      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486e:	f7fe fdd1 	bl	8003414 <HAL_GetTick>
 8004872:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004874:	e00b      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fe fdcd 	bl	8003414 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d902      	bls.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	74fb      	strb	r3, [r7, #19]
            break;
 800488c:	e006      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d0ec      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800489c:	7cfb      	ldrb	r3, [r7, #19]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10c      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a2:	4b08      	ldr	r3, [pc, #32]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	4904      	ldr	r1, [pc, #16]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048ba:	e009      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048bc:	7cfb      	ldrb	r3, [r7, #19]
 80048be:	74bb      	strb	r3, [r7, #18]
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d0:	7c7b      	ldrb	r3, [r7, #17]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d105      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d6:	4b9e      	ldr	r3, [pc, #632]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048da:	4a9d      	ldr	r2, [pc, #628]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ee:	4b98      	ldr	r3, [pc, #608]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f023 0203 	bic.w	r2, r3, #3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	4994      	ldr	r1, [pc, #592]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004910:	4b8f      	ldr	r3, [pc, #572]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f023 020c 	bic.w	r2, r3, #12
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	498c      	ldr	r1, [pc, #560]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0304 	and.w	r3, r3, #4
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004932:	4b87      	ldr	r3, [pc, #540]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	4983      	ldr	r1, [pc, #524]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004954:	4b7e      	ldr	r3, [pc, #504]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	497b      	ldr	r1, [pc, #492]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0310 	and.w	r3, r3, #16
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004976:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	4972      	ldr	r1, [pc, #456]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004998:	4b6d      	ldr	r3, [pc, #436]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	496a      	ldr	r1, [pc, #424]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ba:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	4961      	ldr	r1, [pc, #388]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049dc:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ea:	4959      	ldr	r1, [pc, #356]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049fe:	4b54      	ldr	r3, [pc, #336]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	4950      	ldr	r1, [pc, #320]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a20:	4b4b      	ldr	r3, [pc, #300]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	4948      	ldr	r1, [pc, #288]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a42:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	493f      	ldr	r1, [pc, #252]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d028      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a64:	4b3a      	ldr	r3, [pc, #232]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a72:	4937      	ldr	r1, [pc, #220]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a82:	d106      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a84:	4b32      	ldr	r3, [pc, #200]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a31      	ldr	r2, [pc, #196]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a8e:	60d3      	str	r3, [r2, #12]
 8004a90:	e011      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a9a:	d10c      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f8d8 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aac:	7cfb      	ldrb	r3, [r7, #19]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d028      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ac2:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad0:	491f      	ldr	r1, [pc, #124]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae0:	d106      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aec:	60d3      	str	r3, [r2, #12]
 8004aee:	e011      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3304      	adds	r3, #4
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 f8a9 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004b06:	4603      	mov	r3, r0
 8004b08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0a:	7cfb      	ldrb	r3, [r7, #19]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b10:	7cfb      	ldrb	r3, [r7, #19]
 8004b12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02b      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	4908      	ldr	r1, [pc, #32]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b3e:	d109      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a02      	ldr	r2, [pc, #8]	; (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b4a:	60d3      	str	r3, [r2, #12]
 8004b4c:	e014      	b.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b4e:	bf00      	nop
 8004b50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b5c:	d10c      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f877 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b6e:	7cfb      	ldrb	r3, [r7, #19]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b74:	7cfb      	ldrb	r3, [r7, #19]
 8004b76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d02f      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b84:	4b2b      	ldr	r3, [pc, #172]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b92:	4928      	ldr	r1, [pc, #160]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba2:	d10d      	bne.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	2102      	movs	r1, #2
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f854 	bl	8004c58 <RCCEx_PLLSAI1_Config>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bba:	7cfb      	ldrb	r3, [r7, #19]
 8004bbc:	74bb      	strb	r3, [r7, #18]
 8004bbe:	e011      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3320      	adds	r3, #32
 8004bce:	2102      	movs	r1, #2
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f935 	bl	8004e40 <RCCEx_PLLSAI2_Config>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bda:	7cfb      	ldrb	r3, [r7, #19]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004be0:	7cfb      	ldrb	r3, [r7, #19]
 8004be2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d00a      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004bf0:	4b10      	ldr	r3, [pc, #64]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	490d      	ldr	r1, [pc, #52]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c00:	4313      	orrs	r3, r2
 8004c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000

08004c38 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a04      	ldr	r2, [pc, #16]	; (8004c54 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000

08004c58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c66:	4b75      	ldr	r3, [pc, #468]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c72:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0203 	and.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d10d      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
       ||
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c8a:	4b6c      	ldr	r3, [pc, #432]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
       ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d047      	beq.n	8004d2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
 8004ca2:	e044      	b.n	8004d2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b03      	cmp	r3, #3
 8004caa:	d018      	beq.n	8004cde <RCCEx_PLLSAI1_Config+0x86>
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d825      	bhi.n	8004cfc <RCCEx_PLLSAI1_Config+0xa4>
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d002      	beq.n	8004cba <RCCEx_PLLSAI1_Config+0x62>
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d009      	beq.n	8004ccc <RCCEx_PLLSAI1_Config+0x74>
 8004cb8:	e020      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cba:	4b60      	ldr	r3, [pc, #384]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d11d      	bne.n	8004d02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cca:	e01a      	b.n	8004d02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ccc:	4b5b      	ldr	r3, [pc, #364]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d116      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cdc:	e013      	b.n	8004d06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cde:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cfa:	e006      	b.n	8004d0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8004d00:	e004      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10d      	bne.n	8004d2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d12:	4b4a      	ldr	r3, [pc, #296]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6819      	ldr	r1, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	430b      	orrs	r3, r1
 8004d28:	4944      	ldr	r1, [pc, #272]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d17d      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a40      	ldr	r2, [pc, #256]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d40:	f7fe fb68 	bl	8003414 <HAL_GetTick>
 8004d44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d46:	e009      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d48:	f7fe fb64 	bl	8003414 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d902      	bls.n	8004d5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	73fb      	strb	r3, [r7, #15]
        break;
 8004d5a:	e005      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d5c:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1ef      	bne.n	8004d48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d160      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d111      	bne.n	8004d98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6892      	ldr	r2, [r2, #8]
 8004d84:	0211      	lsls	r1, r2, #8
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	68d2      	ldr	r2, [r2, #12]
 8004d8a:	0912      	lsrs	r2, r2, #4
 8004d8c:	0452      	lsls	r2, r2, #17
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	492a      	ldr	r1, [pc, #168]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	610b      	str	r3, [r1, #16]
 8004d96:	e027      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d112      	bne.n	8004dc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004da6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6892      	ldr	r2, [r2, #8]
 8004dae:	0211      	lsls	r1, r2, #8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6912      	ldr	r2, [r2, #16]
 8004db4:	0852      	lsrs	r2, r2, #1
 8004db6:	3a01      	subs	r2, #1
 8004db8:	0552      	lsls	r2, r2, #21
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	491f      	ldr	r1, [pc, #124]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	610b      	str	r3, [r1, #16]
 8004dc2:	e011      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dc4:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dcc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6892      	ldr	r2, [r2, #8]
 8004dd4:	0211      	lsls	r1, r2, #8
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6952      	ldr	r2, [r2, #20]
 8004dda:	0852      	lsrs	r2, r2, #1
 8004ddc:	3a01      	subs	r2, #1
 8004dde:	0652      	lsls	r2, r2, #25
 8004de0:	430a      	orrs	r2, r1
 8004de2:	4916      	ldr	r1, [pc, #88]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004de8:	4b14      	ldr	r3, [pc, #80]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004df2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df4:	f7fe fb0e 	bl	8003414 <HAL_GetTick>
 8004df8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dfa:	e009      	b.n	8004e10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dfc:	f7fe fb0a 	bl	8003414 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d902      	bls.n	8004e10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e0e:	e005      	b.n	8004e1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0ef      	beq.n	8004dfc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e22:	4b06      	ldr	r3, [pc, #24]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e24:	691a      	ldr	r2, [r3, #16]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	4904      	ldr	r1, [pc, #16]	; (8004e3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000

08004e40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e4e:	4b6a      	ldr	r3, [pc, #424]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f003 0303 	and.w	r3, r3, #3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e5a:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0203 	and.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d10d      	bne.n	8004e86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d009      	beq.n	8004e86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e72:	4b61      	ldr	r3, [pc, #388]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	091b      	lsrs	r3, r3, #4
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
       ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d047      	beq.n	8004f16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	e044      	b.n	8004f16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b03      	cmp	r3, #3
 8004e92:	d018      	beq.n	8004ec6 <RCCEx_PLLSAI2_Config+0x86>
 8004e94:	2b03      	cmp	r3, #3
 8004e96:	d825      	bhi.n	8004ee4 <RCCEx_PLLSAI2_Config+0xa4>
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d002      	beq.n	8004ea2 <RCCEx_PLLSAI2_Config+0x62>
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d009      	beq.n	8004eb4 <RCCEx_PLLSAI2_Config+0x74>
 8004ea0:	e020      	b.n	8004ee4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11d      	bne.n	8004eea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eb2:	e01a      	b.n	8004eea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004eb4:	4b50      	ldr	r3, [pc, #320]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec4:	e013      	b.n	8004eee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ec6:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ed2:	4b49      	ldr	r3, [pc, #292]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ee2:	e006      	b.n	8004ef2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e004      	b.n	8004ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ef2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10d      	bne.n	8004f16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004efa:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	430b      	orrs	r3, r1
 8004f10:	4939      	ldr	r1, [pc, #228]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d167      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a35      	ldr	r2, [pc, #212]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f28:	f7fe fa74 	bl	8003414 <HAL_GetTick>
 8004f2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f2e:	e009      	b.n	8004f44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f30:	f7fe fa70 	bl	8003414 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d902      	bls.n	8004f44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	73fb      	strb	r3, [r7, #15]
        break;
 8004f42:	e005      	b.n	8004f50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f44:	4b2c      	ldr	r3, [pc, #176]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1ef      	bne.n	8004f30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14a      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d111      	bne.n	8004f80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f5c:	4b26      	ldr	r3, [pc, #152]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6892      	ldr	r2, [r2, #8]
 8004f6c:	0211      	lsls	r1, r2, #8
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68d2      	ldr	r2, [r2, #12]
 8004f72:	0912      	lsrs	r2, r2, #4
 8004f74:	0452      	lsls	r2, r2, #17
 8004f76:	430a      	orrs	r2, r1
 8004f78:	491f      	ldr	r1, [pc, #124]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	614b      	str	r3, [r1, #20]
 8004f7e:	e011      	b.n	8004fa4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f80:	4b1d      	ldr	r3, [pc, #116]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6892      	ldr	r2, [r2, #8]
 8004f90:	0211      	lsls	r1, r2, #8
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	6912      	ldr	r2, [r2, #16]
 8004f96:	0852      	lsrs	r2, r2, #1
 8004f98:	3a01      	subs	r2, #1
 8004f9a:	0652      	lsls	r2, r2, #25
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	4916      	ldr	r1, [pc, #88]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fa4:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a13      	ldr	r2, [pc, #76]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb0:	f7fe fa30 	bl	8003414 <HAL_GetTick>
 8004fb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fb6:	e009      	b.n	8004fcc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fb8:	f7fe fa2c 	bl	8003414 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d902      	bls.n	8004fcc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	73fb      	strb	r3, [r7, #15]
          break;
 8004fca:	e005      	b.n	8004fd8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ef      	beq.n	8004fb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fde:	4b06      	ldr	r3, [pc, #24]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe0:	695a      	ldr	r2, [r3, #20]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4904      	ldr	r1, [pc, #16]	; (8004ff8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000

08004ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e095      	b.n	800513a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800501e:	d009      	beq.n	8005034 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	61da      	str	r2, [r3, #28]
 8005026:	e005      	b.n	8005034 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fd ff90 	bl	8002f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005074:	d902      	bls.n	800507c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e002      	b.n	8005082 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800507c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005080:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800508a:	d007      	beq.n	800509c <HAL_SPI_Init+0xa0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005094:	d002      	beq.n	800509c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	431a      	orrs	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	431a      	orrs	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ca:	431a      	orrs	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050de:	ea42 0103 	orr.w	r1, r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	0c1b      	lsrs	r3, r3, #16
 80050f8:	f003 0204 	and.w	r2, r3, #4
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005118:	ea42 0103 	orr.w	r1, r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b088      	sub	sp, #32
 8005146:	af00      	add	r7, sp, #0
 8005148:	60f8      	str	r0, [r7, #12]
 800514a:	60b9      	str	r1, [r7, #8]
 800514c:	603b      	str	r3, [r7, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_SPI_Transmit+0x22>
 8005160:	2302      	movs	r3, #2
 8005162:	e158      	b.n	8005416 <HAL_SPI_Transmit+0x2d4>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800516c:	f7fe f952 	bl	8003414 <HAL_GetTick>
 8005170:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005182:	2302      	movs	r3, #2
 8005184:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005186:	e13d      	b.n	8005404 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <HAL_SPI_Transmit+0x52>
 800518e:	88fb      	ldrh	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005198:	e134      	b.n	8005404 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88fa      	ldrh	r2, [r7, #6]
 80051b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e4:	d10f      	bne.n	8005206 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005204:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d007      	beq.n	8005224 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005222:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800522c:	d94b      	bls.n	80052c6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <HAL_SPI_Transmit+0xfa>
 8005236:	8afb      	ldrh	r3, [r7, #22]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d13e      	bne.n	80052ba <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005240:	881a      	ldrh	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524c:	1c9a      	adds	r2, r3, #2
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005260:	e02b      	b.n	80052ba <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d112      	bne.n	8005296 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	1c9a      	adds	r2, r3, #2
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005294:	e011      	b.n	80052ba <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005296:	f7fe f8bd 	bl	8003414 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d803      	bhi.n	80052ae <HAL_SPI_Transmit+0x16c>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d102      	bne.n	80052b4 <HAL_SPI_Transmit+0x172>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d102      	bne.n	80052ba <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80052b8:	e0a4      	b.n	8005404 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1ce      	bne.n	8005262 <HAL_SPI_Transmit+0x120>
 80052c4:	e07c      	b.n	80053c0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <HAL_SPI_Transmit+0x192>
 80052ce:	8afb      	ldrh	r3, [r7, #22]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d170      	bne.n	80053b6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d912      	bls.n	8005304 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b02      	subs	r3, #2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005302:	e058      	b.n	80053b6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800532a:	e044      	b.n	80053b6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d12b      	bne.n	8005392 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b01      	cmp	r3, #1
 8005342:	d912      	bls.n	800536a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005348:	881a      	ldrh	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	1c9a      	adds	r2, r3, #2
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b02      	subs	r3, #2
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005368:	e025      	b.n	80053b6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	1c5a      	adds	r2, r3, #1
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005386:	b29b      	uxth	r3, r3
 8005388:	3b01      	subs	r3, #1
 800538a:	b29a      	uxth	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005390:	e011      	b.n	80053b6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005392:	f7fe f83f 	bl	8003414 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d803      	bhi.n	80053aa <HAL_SPI_Transmit+0x268>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a8:	d102      	bne.n	80053b0 <HAL_SPI_Transmit+0x26e>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d102      	bne.n	80053b6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053b4:	e026      	b.n	8005404 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1b5      	bne.n	800532c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	6839      	ldr	r1, [r7, #0]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fce3 	bl	8005d90 <SPI_EndRxTxTransaction>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2220      	movs	r2, #32
 80053d4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e000      	b.n	8005404 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005402:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005414:	7ffb      	ldrb	r3, [r7, #31]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b088      	sub	sp, #32
 8005422:	af02      	add	r7, sp, #8
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800543a:	d112      	bne.n	8005462 <HAL_SPI_Receive+0x44>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10e      	bne.n	8005462 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2204      	movs	r2, #4
 8005448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800544c:	88fa      	ldrh	r2, [r7, #6]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	4613      	mov	r3, r2
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f910 	bl	800567e <HAL_SPI_TransmitReceive>
 800545e:	4603      	mov	r3, r0
 8005460:	e109      	b.n	8005676 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_SPI_Receive+0x52>
 800546c:	2302      	movs	r3, #2
 800546e:	e102      	b.n	8005676 <HAL_SPI_Receive+0x258>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005478:	f7fd ffcc 	bl	8003414 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	d002      	beq.n	8005490 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800548a:	2302      	movs	r3, #2
 800548c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800548e:	e0e9      	b.n	8005664 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_SPI_Receive+0x7e>
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d102      	bne.n	80054a2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054a0:	e0e0      	b.n	8005664 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2204      	movs	r2, #4
 80054a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	88fa      	ldrh	r2, [r7, #6]
 80054ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054ec:	d908      	bls.n	8005500 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	e007      	b.n	8005510 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800550e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005518:	d10f      	bne.n	800553a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005528:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005538:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d007      	beq.n	8005558 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005556:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005560:	d867      	bhi.n	8005632 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005562:	e030      	b.n	80055c6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d117      	bne.n	80055a2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f103 020c 	add.w	r2, r3, #12
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	7812      	ldrb	r2, [r2, #0]
 8005580:	b2d2      	uxtb	r2, r2
 8005582:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	1c5a      	adds	r2, r3, #1
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005594:	b29b      	uxth	r3, r3
 8005596:	3b01      	subs	r3, #1
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80055a0:	e011      	b.n	80055c6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055a2:	f7fd ff37 	bl	8003414 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d803      	bhi.n	80055ba <HAL_SPI_Receive+0x19c>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b8:	d102      	bne.n	80055c0 <HAL_SPI_Receive+0x1a2>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d102      	bne.n	80055c6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055c4:	e04e      	b.n	8005664 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1c8      	bne.n	8005564 <HAL_SPI_Receive+0x146>
 80055d2:	e034      	b.n	800563e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d115      	bne.n	800560e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	b292      	uxth	r2, r2
 80055ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	1c9a      	adds	r2, r3, #2
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800560c:	e011      	b.n	8005632 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800560e:	f7fd ff01 	bl	8003414 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d803      	bhi.n	8005626 <HAL_SPI_Receive+0x208>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d102      	bne.n	800562c <HAL_SPI_Receive+0x20e>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d102      	bne.n	8005632 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005630:	e018      	b.n	8005664 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ca      	bne.n	80055d4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fb4c 	bl	8005ce0 <SPI_EndRxTransaction>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005658:	2b00      	cmp	r3, #0
 800565a:	d002      	beq.n	8005662 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	75fb      	strb	r3, [r7, #23]
 8005660:	e000      	b.n	8005664 <HAL_SPI_Receive+0x246>
  }

error :
 8005662:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005674:	7dfb      	ldrb	r3, [r7, #23]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b08a      	sub	sp, #40	; 0x28
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800568c:	2301      	movs	r3, #1
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_SPI_TransmitReceive+0x26>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e1fb      	b.n	8005a9c <HAL_SPI_TransmitReceive+0x41e>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056ac:	f7fd feb2 	bl	8003414 <HAL_GetTick>
 80056b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80056c0:	887b      	ldrh	r3, [r7, #2]
 80056c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80056c4:	887b      	ldrh	r3, [r7, #2]
 80056c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056c8:	7efb      	ldrb	r3, [r7, #27]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d00e      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x6e>
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d4:	d106      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x66>
 80056de:	7efb      	ldrb	r3, [r7, #27]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d003      	beq.n	80056ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80056e4:	2302      	movs	r3, #2
 80056e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80056ea:	e1cd      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d005      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x80>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x80>
 80056f8:	887b      	ldrh	r3, [r7, #2]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005704:	e1c0      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b04      	cmp	r3, #4
 8005710:	d003      	beq.n	800571a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2205      	movs	r2, #5
 8005716:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	887a      	ldrh	r2, [r7, #2]
 800572a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	887a      	ldrh	r2, [r7, #2]
 8005732:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	887a      	ldrh	r2, [r7, #2]
 8005740:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	887a      	ldrh	r2, [r7, #2]
 8005746:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800575c:	d802      	bhi.n	8005764 <HAL_SPI_TransmitReceive+0xe6>
 800575e:	8a3b      	ldrh	r3, [r7, #16]
 8005760:	2b01      	cmp	r3, #1
 8005762:	d908      	bls.n	8005776 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005772:	605a      	str	r2, [r3, #4]
 8005774:	e007      	b.n	8005786 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005784:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d007      	beq.n	80057a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ac:	d97c      	bls.n	80058a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_SPI_TransmitReceive+0x13e>
 80057b6:	8a7b      	ldrh	r3, [r7, #18]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d169      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	1c9a      	adds	r2, r3, #2
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e0:	e056      	b.n	8005890 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d11b      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x1aa>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d016      	beq.n	8005828 <HAL_SPI_TransmitReceive+0x1aa>
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d113      	bne.n	8005828 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b01      	cmp	r3, #1
 8005834:	d11c      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1f2>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68da      	ldr	r2, [r3, #12]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	b292      	uxth	r2, r2
 800584e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	1c9a      	adds	r2, r3, #2
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586c:	2301      	movs	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005870:	f7fd fdd0 	bl	8003414 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587c:	429a      	cmp	r2, r3
 800587e:	d807      	bhi.n	8005890 <HAL_SPI_TransmitReceive+0x212>
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d003      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800588e:	e0fb      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1a3      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x164>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19d      	bne.n	80057e2 <HAL_SPI_TransmitReceive+0x164>
 80058a6:	e0df      	b.n	8005a68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_SPI_TransmitReceive+0x23a>
 80058b0:	8a7b      	ldrh	r3, [r7, #18]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	f040 80cb 	bne.w	8005a4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d912      	bls.n	80058e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d2:	1c9a      	adds	r2, r3, #2
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058dc:	b29b      	uxth	r3, r3
 80058de:	3b02      	subs	r3, #2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058e6:	e0b2      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e09e      	b.n	8005a4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d134      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d02f      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2b01      	cmp	r3, #1
 800592c:	d12c      	bne.n	8005988 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	d912      	bls.n	800595e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b02      	subs	r3, #2
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800595c:	e012      	b.n	8005984 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	1c5a      	adds	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800597a:	b29b      	uxth	r3, r3
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d148      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x3aa>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d042      	beq.n	8005a28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d923      	bls.n	80059f6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	b292      	uxth	r2, r2
 80059ba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	1c9a      	adds	r2, r3, #2
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	3b02      	subs	r3, #2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d81f      	bhi.n	8005a24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059f2:	605a      	str	r2, [r3, #4]
 80059f4:	e016      	b.n	8005a24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f103 020c 	add.w	r2, r3, #12
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	7812      	ldrb	r2, [r2, #0]
 8005a04:	b2d2      	uxtb	r2, r2
 8005a06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a24:	2301      	movs	r3, #1
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005a28:	f7fd fcf4 	bl	8003414 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d803      	bhi.n	8005a40 <HAL_SPI_TransmitReceive+0x3c2>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_TransmitReceive+0x3c8>
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a4c:	e01c      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f47f af5b 	bne.w	8005910 <HAL_SPI_TransmitReceive+0x292>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f47f af54 	bne.w	8005910 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a68:	69fa      	ldr	r2, [r7, #28]
 8005a6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f98f 	bl	8005d90 <SPI_EndRxTxTransaction>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d006      	beq.n	8005a86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	661a      	str	r2, [r3, #96]	; 0x60
 8005a84:	e000      	b.n	8005a88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005a86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005a98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3728      	adds	r7, #40	; 0x28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ab4:	f7fd fcae 	bl	8003414 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ac4:	f7fd fca6 	bl	8003414 <HAL_GetTick>
 8005ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005aca:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	015b      	lsls	r3, r3, #5
 8005ad0:	0d1b      	lsrs	r3, r3, #20
 8005ad2:	69fa      	ldr	r2, [r7, #28]
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ada:	e054      	b.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae2:	d050      	beq.n	8005b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ae4:	f7fd fc96 	bl	8003414 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	69fa      	ldr	r2, [r7, #28]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d902      	bls.n	8005afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d13d      	bne.n	8005b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b12:	d111      	bne.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b1c:	d004      	beq.n	8005b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b26:	d107      	bne.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b40:	d10f      	bne.n	8005b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e017      	b.n	8005ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	68ba      	ldr	r2, [r7, #8]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	bf0c      	ite	eq
 8005b96:	2301      	moveq	r3, #1
 8005b98:	2300      	movne	r3, #0
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d19b      	bne.n	8005adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005bc6:	f7fd fc25 	bl	8003414 <HAL_GetTick>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005bd6:	f7fd fc1d 	bl	8003414 <HAL_GetTick>
 8005bda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005be4:	4b3d      	ldr	r3, [pc, #244]	; (8005cdc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	00da      	lsls	r2, r3, #3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	0d1b      	lsrs	r3, r3, #20
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf6:	fb02 f303 	mul.w	r3, r2, r3
 8005bfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005bfc:	e060      	b.n	8005cc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c04:	d107      	bne.n	8005c16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d050      	beq.n	8005cc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c1e:	f7fd fbf9 	bl	8003414 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6a3b      	ldr	r3, [r7, #32]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d902      	bls.n	8005c34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d13d      	bne.n	8005cb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4c:	d111      	bne.n	8005c72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c56:	d004      	beq.n	8005c62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d107      	bne.n	8005c72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	d10f      	bne.n	8005c9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e010      	b.n	8005cd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d196      	bne.n	8005bfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3728      	adds	r7, #40	; 0x28
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20000000 	.word	0x20000000

08005ce0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af02      	add	r7, sp, #8
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf4:	d111      	bne.n	8005d1a <SPI_EndRxTransaction+0x3a>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfe:	d004      	beq.n	8005d0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d08:	d107      	bne.n	8005d1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	2180      	movs	r1, #128	; 0x80
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff febd 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d34:	f043 0220 	orr.w	r2, r3, #32
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e023      	b.n	8005d88 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d48:	d11d      	bne.n	8005d86 <SPI_EndRxTransaction+0xa6>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d52:	d004      	beq.n	8005d5e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5c:	d113      	bne.n	8005d86 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f7ff ff22 	bl	8005bb4 <SPI_WaitFifoStateUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d007      	beq.n	8005d86 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d7a:	f043 0220 	orr.w	r2, r3, #32
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e000      	b.n	8005d88 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b086      	sub	sp, #24
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f7ff ff03 	bl	8005bb4 <SPI_WaitFifoStateUntilTimeout>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d007      	beq.n	8005dc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db8:	f043 0220 	orr.w	r2, r3, #32
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e027      	b.n	8005e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2180      	movs	r1, #128	; 0x80
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fe68 	bl	8005aa4 <SPI_WaitFlagStateUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	f043 0220 	orr.w	r2, r3, #32
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e014      	b.n	8005e14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f7ff fedc 	bl	8005bb4 <SPI_WaitFifoStateUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e06:	f043 0220 	orr.w	r2, r3, #32
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e000      	b.n	8005e14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e049      	b.n	8005ec2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d106      	bne.n	8005e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fd f8d8 	bl	8002ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3304      	adds	r3, #4
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	f000 f968 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
	...

08005ecc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b085      	sub	sp, #20
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d001      	beq.n	8005ee4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e047      	b.n	8005f74 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a23      	ldr	r2, [pc, #140]	; (8005f80 <HAL_TIM_Base_Start+0xb4>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d018      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1f      	ldr	r2, [pc, #124]	; (8005f84 <HAL_TIM_Base_Start+0xb8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <HAL_TIM_Base_Start+0xbc>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <HAL_TIM_Base_Start+0xc0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1b      	ldr	r2, [pc, #108]	; (8005f90 <HAL_TIM_Base_Start+0xc4>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIM_Base_Start+0x66>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a19      	ldr	r2, [pc, #100]	; (8005f94 <HAL_TIM_Base_Start+0xc8>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d115      	bne.n	8005f5e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	4b17      	ldr	r3, [pc, #92]	; (8005f98 <HAL_TIM_Base_Start+0xcc>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b06      	cmp	r3, #6
 8005f42:	d015      	beq.n	8005f70 <HAL_TIM_Base_Start+0xa4>
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4a:	d011      	beq.n	8005f70 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5c:	e008      	b.n	8005f70 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f042 0201 	orr.w	r2, r2, #1
 8005f6c:	601a      	str	r2, [r3, #0]
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f70:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40000400 	.word	0x40000400
 8005f88:	40000800 	.word	0x40000800
 8005f8c:	40000c00 	.word	0x40000c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	00010007 	.word	0x00010007

08005f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e0b6      	b.n	8006126 <HAL_TIM_ConfigClockSource+0x18a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff4:	d03e      	beq.n	8006074 <HAL_TIM_ConfigClockSource+0xd8>
 8005ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ffa:	f200 8087 	bhi.w	800610c <HAL_TIM_ConfigClockSource+0x170>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	f000 8086 	beq.w	8006112 <HAL_TIM_ConfigClockSource+0x176>
 8006006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600a:	d87f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 800600c:	2b70      	cmp	r3, #112	; 0x70
 800600e:	d01a      	beq.n	8006046 <HAL_TIM_ConfigClockSource+0xaa>
 8006010:	2b70      	cmp	r3, #112	; 0x70
 8006012:	d87b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 8006014:	2b60      	cmp	r3, #96	; 0x60
 8006016:	d050      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x11e>
 8006018:	2b60      	cmp	r3, #96	; 0x60
 800601a:	d877      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 800601c:	2b50      	cmp	r3, #80	; 0x50
 800601e:	d03c      	beq.n	800609a <HAL_TIM_ConfigClockSource+0xfe>
 8006020:	2b50      	cmp	r3, #80	; 0x50
 8006022:	d873      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d058      	beq.n	80060da <HAL_TIM_ConfigClockSource+0x13e>
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d86f      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 800602c:	2b30      	cmp	r3, #48	; 0x30
 800602e:	d064      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15e>
 8006030:	2b30      	cmp	r3, #48	; 0x30
 8006032:	d86b      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 8006034:	2b20      	cmp	r3, #32
 8006036:	d060      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15e>
 8006038:	2b20      	cmp	r3, #32
 800603a:	d867      	bhi.n	800610c <HAL_TIM_ConfigClockSource+0x170>
 800603c:	2b00      	cmp	r3, #0
 800603e:	d05c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15e>
 8006040:	2b10      	cmp	r3, #16
 8006042:	d05a      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0x15e>
 8006044:	e062      	b.n	800610c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006056:	f000 f97f 	bl	8006358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006068:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	609a      	str	r2, [r3, #8]
      break;
 8006072:	e04f      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006084:	f000 f968 	bl	8006358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006096:	609a      	str	r2, [r3, #8]
      break;
 8006098:	e03c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 f8dc 	bl	8006264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2150      	movs	r1, #80	; 0x50
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 f935 	bl	8006322 <TIM_ITRx_SetConfig>
      break;
 80060b8:	e02c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060c6:	461a      	mov	r2, r3
 80060c8:	f000 f8fb 	bl	80062c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2160      	movs	r1, #96	; 0x60
 80060d2:	4618      	mov	r0, r3
 80060d4:	f000 f925 	bl	8006322 <TIM_ITRx_SetConfig>
      break;
 80060d8:	e01c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060e6:	461a      	mov	r2, r3
 80060e8:	f000 f8bc 	bl	8006264 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2140      	movs	r1, #64	; 0x40
 80060f2:	4618      	mov	r0, r3
 80060f4:	f000 f915 	bl	8006322 <TIM_ITRx_SetConfig>
      break;
 80060f8:	e00c      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f000 f90c 	bl	8006322 <TIM_ITRx_SetConfig>
      break;
 800610a:	e003      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	73fb      	strb	r3, [r7, #15]
      break;
 8006110:	e000      	b.n	8006114 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006112:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006124:	7bfb      	ldrb	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3d      	ldr	r2, [pc, #244]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3c      	ldr	r2, [pc, #240]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3b      	ldr	r2, [pc, #236]	; (8006250 <TIM_Base_SetConfig+0x120>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3a      	ldr	r2, [pc, #232]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006190:	d01b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2c      	ldr	r2, [pc, #176]	; (8006248 <TIM_Base_SetConfig+0x118>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d017      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2b      	ldr	r2, [pc, #172]	; (800624c <TIM_Base_SetConfig+0x11c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <TIM_Base_SetConfig+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	; (8006254 <TIM_Base_SetConfig+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	; (8006258 <TIM_Base_SetConfig+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	; (800625c <TIM_Base_SetConfig+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a26      	ldr	r2, [pc, #152]	; (8006260 <TIM_Base_SetConfig+0x130>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d108      	bne.n	80061dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	; (8006244 <TIM_Base_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a12      	ldr	r2, [pc, #72]	; (8006254 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a11      	ldr	r2, [pc, #68]	; (8006258 <TIM_Base_SetConfig+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a10      	ldr	r2, [pc, #64]	; (800625c <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	; (8006260 <TIM_Base_SetConfig+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800

08006264 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0201 	bic.w	r2, r3, #1
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800628e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	693a      	ldr	r2, [r7, #16]
 8006296:	4313      	orrs	r3, r2
 8006298:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f023 030a 	bic.w	r3, r3, #10
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b087      	sub	sp, #28
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	60f8      	str	r0, [r7, #12]
 80062ca:	60b9      	str	r1, [r7, #8]
 80062cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f023 0210 	bic.w	r2, r3, #16
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	031b      	lsls	r3, r3, #12
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	621a      	str	r2, [r3, #32]
}
 8006316:	bf00      	nop
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	f043 0307 	orr.w	r3, r3, #7
 8006344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	609a      	str	r2, [r3, #8]
}
 800634c:	bf00      	nop
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006358:	b480      	push	{r7}
 800635a:	b087      	sub	sp, #28
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	021a      	lsls	r2, r3, #8
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	431a      	orrs	r2, r3
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e068      	b.n	8006482 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2e      	ldr	r2, [pc, #184]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d108      	bne.n	80063f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01d      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d018      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1b      	ldr	r2, [pc, #108]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1a      	ldr	r2, [pc, #104]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00e      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d009      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a13      	ldr	r2, [pc, #76]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d10c      	bne.n	8006470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800645c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	4313      	orrs	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40013400 	.word	0x40013400
 8006498:	40000400 	.word	0x40000400
 800649c:	40000800 	.word	0x40000800
 80064a0:	40000c00 	.word	0x40000c00
 80064a4:	40014000 	.word	0x40014000

080064a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e040      	b.n	800653c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fc fdb2 	bl	8003034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2224      	movs	r2, #36	; 0x24
 80064d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f8c0 	bl	800666c <UART_SetConfig>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e022      	b.n	800653c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fb6c 	bl	8006bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006512:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006522:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fbf3 	bl	8006d20 <UART_CheckIdleState>
 800653a:	4603      	mov	r3, r0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3708      	adds	r7, #8
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	; 0x28
 8006548:	af02      	add	r7, sp, #8
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	603b      	str	r3, [r7, #0]
 8006550:	4613      	mov	r3, r2
 8006552:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006558:	2b20      	cmp	r3, #32
 800655a:	f040 8082 	bne.w	8006662 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_UART_Transmit+0x26>
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e07a      	b.n	8006664 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_UART_Transmit+0x38>
 8006578:	2302      	movs	r3, #2
 800657a:	e073      	b.n	8006664 <HAL_UART_Transmit+0x120>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2221      	movs	r2, #33	; 0x21
 8006590:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006592:	f7fc ff3f 	bl	8003414 <HAL_GetTick>
 8006596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	88fa      	ldrh	r2, [r7, #6]
 800659c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b0:	d108      	bne.n	80065c4 <HAL_UART_Transmit+0x80>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e003      	b.n	80065cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80065d4:	e02d      	b.n	8006632 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fbe6 	bl	8006db2 <UART_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e039      	b.n	8006664 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10b      	bne.n	800660e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	881a      	ldrh	r2, [r3, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006602:	b292      	uxth	r2, r2
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	3302      	adds	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
 800660c:	e008      	b.n	8006620 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	781a      	ldrb	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	b292      	uxth	r2, r2
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	3301      	adds	r3, #1
 800661e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b29a      	uxth	r2, r3
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1cb      	bne.n	80065d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2200      	movs	r2, #0
 8006646:	2140      	movs	r1, #64	; 0x40
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fbb2 	bl	8006db2 <UART_WaitOnFlagUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	e005      	b.n	8006664 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	e000      	b.n	8006664 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006662:	2302      	movs	r3, #2
  }
}
 8006664:	4618      	mov	r0, r3
 8006666:	3720      	adds	r7, #32
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800666c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006670:	b08a      	sub	sp, #40	; 0x28
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006676:	2300      	movs	r3, #0
 8006678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	431a      	orrs	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	431a      	orrs	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	4313      	orrs	r3, r2
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	4ba4      	ldr	r3, [pc, #656]	; (800692c <UART_SetConfig+0x2c0>)
 800669c:	4013      	ands	r3, r2
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a99      	ldr	r2, [pc, #612]	; (8006930 <UART_SetConfig+0x2c4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d004      	beq.n	80066d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d4:	4313      	orrs	r3, r2
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e8:	430a      	orrs	r2, r1
 80066ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a90      	ldr	r2, [pc, #576]	; (8006934 <UART_SetConfig+0x2c8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d126      	bne.n	8006744 <UART_SetConfig+0xd8>
 80066f6:	4b90      	ldr	r3, [pc, #576]	; (8006938 <UART_SetConfig+0x2cc>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f003 0303 	and.w	r3, r3, #3
 8006700:	2b03      	cmp	r3, #3
 8006702:	d81b      	bhi.n	800673c <UART_SetConfig+0xd0>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <UART_SetConfig+0xa0>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	0800671d 	.word	0x0800671d
 8006710:	0800672d 	.word	0x0800672d
 8006714:	08006725 	.word	0x08006725
 8006718:	08006735 	.word	0x08006735
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e116      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006724:	2302      	movs	r3, #2
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	e112      	b.n	8006952 <UART_SetConfig+0x2e6>
 800672c:	2304      	movs	r3, #4
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	e10e      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006734:	2308      	movs	r3, #8
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673a:	e10a      	b.n	8006952 <UART_SetConfig+0x2e6>
 800673c:	2310      	movs	r3, #16
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006742:	e106      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a7c      	ldr	r2, [pc, #496]	; (800693c <UART_SetConfig+0x2d0>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d138      	bne.n	80067c0 <UART_SetConfig+0x154>
 800674e:	4b7a      	ldr	r3, [pc, #488]	; (8006938 <UART_SetConfig+0x2cc>)
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f003 030c 	and.w	r3, r3, #12
 8006758:	2b0c      	cmp	r3, #12
 800675a:	d82d      	bhi.n	80067b8 <UART_SetConfig+0x14c>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <UART_SetConfig+0xf8>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006799 	.word	0x08006799
 8006768:	080067b9 	.word	0x080067b9
 800676c:	080067b9 	.word	0x080067b9
 8006770:	080067b9 	.word	0x080067b9
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067b9 	.word	0x080067b9
 800677c:	080067b9 	.word	0x080067b9
 8006780:	080067b9 	.word	0x080067b9
 8006784:	080067a1 	.word	0x080067a1
 8006788:	080067b9 	.word	0x080067b9
 800678c:	080067b9 	.word	0x080067b9
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067b1 	.word	0x080067b1
 8006798:	2300      	movs	r3, #0
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e0d8      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067a0:	2302      	movs	r3, #2
 80067a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a6:	e0d4      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067a8:	2304      	movs	r3, #4
 80067aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ae:	e0d0      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067b0:	2308      	movs	r3, #8
 80067b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067b6:	e0cc      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067b8:	2310      	movs	r3, #16
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067be:	e0c8      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a5e      	ldr	r2, [pc, #376]	; (8006940 <UART_SetConfig+0x2d4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d125      	bne.n	8006816 <UART_SetConfig+0x1aa>
 80067ca:	4b5b      	ldr	r3, [pc, #364]	; (8006938 <UART_SetConfig+0x2cc>)
 80067cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067d4:	2b30      	cmp	r3, #48	; 0x30
 80067d6:	d016      	beq.n	8006806 <UART_SetConfig+0x19a>
 80067d8:	2b30      	cmp	r3, #48	; 0x30
 80067da:	d818      	bhi.n	800680e <UART_SetConfig+0x1a2>
 80067dc:	2b20      	cmp	r3, #32
 80067de:	d00a      	beq.n	80067f6 <UART_SetConfig+0x18a>
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d814      	bhi.n	800680e <UART_SetConfig+0x1a2>
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <UART_SetConfig+0x182>
 80067e8:	2b10      	cmp	r3, #16
 80067ea:	d008      	beq.n	80067fe <UART_SetConfig+0x192>
 80067ec:	e00f      	b.n	800680e <UART_SetConfig+0x1a2>
 80067ee:	2300      	movs	r3, #0
 80067f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f4:	e0ad      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067f6:	2302      	movs	r3, #2
 80067f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fc:	e0a9      	b.n	8006952 <UART_SetConfig+0x2e6>
 80067fe:	2304      	movs	r3, #4
 8006800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006804:	e0a5      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006806:	2308      	movs	r3, #8
 8006808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800680c:	e0a1      	b.n	8006952 <UART_SetConfig+0x2e6>
 800680e:	2310      	movs	r3, #16
 8006810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006814:	e09d      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a4a      	ldr	r2, [pc, #296]	; (8006944 <UART_SetConfig+0x2d8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d125      	bne.n	800686c <UART_SetConfig+0x200>
 8006820:	4b45      	ldr	r3, [pc, #276]	; (8006938 <UART_SetConfig+0x2cc>)
 8006822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800682a:	2bc0      	cmp	r3, #192	; 0xc0
 800682c:	d016      	beq.n	800685c <UART_SetConfig+0x1f0>
 800682e:	2bc0      	cmp	r3, #192	; 0xc0
 8006830:	d818      	bhi.n	8006864 <UART_SetConfig+0x1f8>
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d00a      	beq.n	800684c <UART_SetConfig+0x1e0>
 8006836:	2b80      	cmp	r3, #128	; 0x80
 8006838:	d814      	bhi.n	8006864 <UART_SetConfig+0x1f8>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <UART_SetConfig+0x1d8>
 800683e:	2b40      	cmp	r3, #64	; 0x40
 8006840:	d008      	beq.n	8006854 <UART_SetConfig+0x1e8>
 8006842:	e00f      	b.n	8006864 <UART_SetConfig+0x1f8>
 8006844:	2300      	movs	r3, #0
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e082      	b.n	8006952 <UART_SetConfig+0x2e6>
 800684c:	2302      	movs	r3, #2
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e07e      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006854:	2304      	movs	r3, #4
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e07a      	b.n	8006952 <UART_SetConfig+0x2e6>
 800685c:	2308      	movs	r3, #8
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006862:	e076      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006864:	2310      	movs	r3, #16
 8006866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800686a:	e072      	b.n	8006952 <UART_SetConfig+0x2e6>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a35      	ldr	r2, [pc, #212]	; (8006948 <UART_SetConfig+0x2dc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d12a      	bne.n	80068cc <UART_SetConfig+0x260>
 8006876:	4b30      	ldr	r3, [pc, #192]	; (8006938 <UART_SetConfig+0x2cc>)
 8006878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006884:	d01a      	beq.n	80068bc <UART_SetConfig+0x250>
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	d81b      	bhi.n	80068c4 <UART_SetConfig+0x258>
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d00c      	beq.n	80068ac <UART_SetConfig+0x240>
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	d815      	bhi.n	80068c4 <UART_SetConfig+0x258>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <UART_SetConfig+0x238>
 800689c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068a0:	d008      	beq.n	80068b4 <UART_SetConfig+0x248>
 80068a2:	e00f      	b.n	80068c4 <UART_SetConfig+0x258>
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068aa:	e052      	b.n	8006952 <UART_SetConfig+0x2e6>
 80068ac:	2302      	movs	r3, #2
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e04e      	b.n	8006952 <UART_SetConfig+0x2e6>
 80068b4:	2304      	movs	r3, #4
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e04a      	b.n	8006952 <UART_SetConfig+0x2e6>
 80068bc:	2308      	movs	r3, #8
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e046      	b.n	8006952 <UART_SetConfig+0x2e6>
 80068c4:	2310      	movs	r3, #16
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e042      	b.n	8006952 <UART_SetConfig+0x2e6>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a17      	ldr	r2, [pc, #92]	; (8006930 <UART_SetConfig+0x2c4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d13a      	bne.n	800694c <UART_SetConfig+0x2e0>
 80068d6:	4b18      	ldr	r3, [pc, #96]	; (8006938 <UART_SetConfig+0x2cc>)
 80068d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e4:	d01a      	beq.n	800691c <UART_SetConfig+0x2b0>
 80068e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ea:	d81b      	bhi.n	8006924 <UART_SetConfig+0x2b8>
 80068ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f0:	d00c      	beq.n	800690c <UART_SetConfig+0x2a0>
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f6:	d815      	bhi.n	8006924 <UART_SetConfig+0x2b8>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <UART_SetConfig+0x298>
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006900:	d008      	beq.n	8006914 <UART_SetConfig+0x2a8>
 8006902:	e00f      	b.n	8006924 <UART_SetConfig+0x2b8>
 8006904:	2300      	movs	r3, #0
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e022      	b.n	8006952 <UART_SetConfig+0x2e6>
 800690c:	2302      	movs	r3, #2
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006912:	e01e      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006914:	2304      	movs	r3, #4
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800691a:	e01a      	b.n	8006952 <UART_SetConfig+0x2e6>
 800691c:	2308      	movs	r3, #8
 800691e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006922:	e016      	b.n	8006952 <UART_SetConfig+0x2e6>
 8006924:	2310      	movs	r3, #16
 8006926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800692a:	e012      	b.n	8006952 <UART_SetConfig+0x2e6>
 800692c:	efff69f3 	.word	0xefff69f3
 8006930:	40008000 	.word	0x40008000
 8006934:	40013800 	.word	0x40013800
 8006938:	40021000 	.word	0x40021000
 800693c:	40004400 	.word	0x40004400
 8006940:	40004800 	.word	0x40004800
 8006944:	40004c00 	.word	0x40004c00
 8006948:	40005000 	.word	0x40005000
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a9f      	ldr	r2, [pc, #636]	; (8006bd4 <UART_SetConfig+0x568>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d17a      	bne.n	8006a52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800695c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006960:	2b08      	cmp	r3, #8
 8006962:	d824      	bhi.n	80069ae <UART_SetConfig+0x342>
 8006964:	a201      	add	r2, pc, #4	; (adr r2, 800696c <UART_SetConfig+0x300>)
 8006966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696a:	bf00      	nop
 800696c:	08006991 	.word	0x08006991
 8006970:	080069af 	.word	0x080069af
 8006974:	08006999 	.word	0x08006999
 8006978:	080069af 	.word	0x080069af
 800697c:	0800699f 	.word	0x0800699f
 8006980:	080069af 	.word	0x080069af
 8006984:	080069af 	.word	0x080069af
 8006988:	080069af 	.word	0x080069af
 800698c:	080069a7 	.word	0x080069a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006990:	f7fd fddc 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006994:	61f8      	str	r0, [r7, #28]
        break;
 8006996:	e010      	b.n	80069ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006998:	4b8f      	ldr	r3, [pc, #572]	; (8006bd8 <UART_SetConfig+0x56c>)
 800699a:	61fb      	str	r3, [r7, #28]
        break;
 800699c:	e00d      	b.n	80069ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800699e:	f7fd fd3d 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80069a2:	61f8      	str	r0, [r7, #28]
        break;
 80069a4:	e009      	b.n	80069ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069aa:	61fb      	str	r3, [r7, #28]
        break;
 80069ac:	e005      	b.n	80069ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80fb 	beq.w	8006bb8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	005b      	lsls	r3, r3, #1
 80069ca:	4413      	add	r3, r2
 80069cc:	69fa      	ldr	r2, [r7, #28]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d305      	bcc.n	80069de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d903      	bls.n	80069e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069e4:	e0e8      	b.n	8006bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2200      	movs	r2, #0
 80069ea:	461c      	mov	r4, r3
 80069ec:	4615      	mov	r5, r2
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	022b      	lsls	r3, r5, #8
 80069f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069fc:	0222      	lsls	r2, r4, #8
 80069fe:	68f9      	ldr	r1, [r7, #12]
 8006a00:	6849      	ldr	r1, [r1, #4]
 8006a02:	0849      	lsrs	r1, r1, #1
 8006a04:	2000      	movs	r0, #0
 8006a06:	4688      	mov	r8, r1
 8006a08:	4681      	mov	r9, r0
 8006a0a:	eb12 0a08 	adds.w	sl, r2, r8
 8006a0e:	eb43 0b09 	adc.w	fp, r3, r9
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	603b      	str	r3, [r7, #0]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a20:	4650      	mov	r0, sl
 8006a22:	4659      	mov	r1, fp
 8006a24:	f7fa f910 	bl	8000c48 <__aeabi_uldivmod>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a36:	d308      	bcc.n	8006a4a <UART_SetConfig+0x3de>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a3e:	d204      	bcs.n	8006a4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	60da      	str	r2, [r3, #12]
 8006a48:	e0b6      	b.n	8006bb8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a50:	e0b2      	b.n	8006bb8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d15e      	bne.n	8006b1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d828      	bhi.n	8006ab6 <UART_SetConfig+0x44a>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <UART_SetConfig+0x400>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006a91 	.word	0x08006a91
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006aa1 	.word	0x08006aa1
 8006a78:	08006ab7 	.word	0x08006ab7
 8006a7c:	08006aa7 	.word	0x08006aa7
 8006a80:	08006ab7 	.word	0x08006ab7
 8006a84:	08006ab7 	.word	0x08006ab7
 8006a88:	08006ab7 	.word	0x08006ab7
 8006a8c:	08006aaf 	.word	0x08006aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a90:	f7fd fd5c 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006a94:	61f8      	str	r0, [r7, #28]
        break;
 8006a96:	e014      	b.n	8006ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fd fd6e 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	61f8      	str	r0, [r7, #28]
        break;
 8006a9e:	e010      	b.n	8006ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aa0:	4b4d      	ldr	r3, [pc, #308]	; (8006bd8 <UART_SetConfig+0x56c>)
 8006aa2:	61fb      	str	r3, [r7, #28]
        break;
 8006aa4:	e00d      	b.n	8006ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aa6:	f7fd fcb9 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8006aaa:	61f8      	str	r0, [r7, #28]
        break;
 8006aac:	e009      	b.n	8006ac2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ab2:	61fb      	str	r3, [r7, #28]
        break;
 8006ab4:	e005      	b.n	8006ac2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d077      	beq.n	8006bb8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	005a      	lsls	r2, r3, #1
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	441a      	add	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006adc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d916      	bls.n	8006b12 <UART_SetConfig+0x4a6>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aea:	d212      	bcs.n	8006b12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f023 030f 	bic.w	r3, r3, #15
 8006af4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	8afb      	ldrh	r3, [r7, #22]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	8afa      	ldrh	r2, [r7, #22]
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	e052      	b.n	8006bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b18:	e04e      	b.n	8006bb8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b1e:	2b08      	cmp	r3, #8
 8006b20:	d827      	bhi.n	8006b72 <UART_SetConfig+0x506>
 8006b22:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <UART_SetConfig+0x4bc>)
 8006b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b55 	.word	0x08006b55
 8006b30:	08006b5d 	.word	0x08006b5d
 8006b34:	08006b73 	.word	0x08006b73
 8006b38:	08006b63 	.word	0x08006b63
 8006b3c:	08006b73 	.word	0x08006b73
 8006b40:	08006b73 	.word	0x08006b73
 8006b44:	08006b73 	.word	0x08006b73
 8006b48:	08006b6b 	.word	0x08006b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b4c:	f7fd fcfe 	bl	800454c <HAL_RCC_GetPCLK1Freq>
 8006b50:	61f8      	str	r0, [r7, #28]
        break;
 8006b52:	e014      	b.n	8006b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b54:	f7fd fd10 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8006b58:	61f8      	str	r0, [r7, #28]
        break;
 8006b5a:	e010      	b.n	8006b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <UART_SetConfig+0x56c>)
 8006b5e:	61fb      	str	r3, [r7, #28]
        break;
 8006b60:	e00d      	b.n	8006b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b62:	f7fd fc5b 	bl	800441c <HAL_RCC_GetSysClockFreq>
 8006b66:	61f8      	str	r0, [r7, #28]
        break;
 8006b68:	e009      	b.n	8006b7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b6e:	61fb      	str	r3, [r7, #28]
        break;
 8006b70:	e005      	b.n	8006b7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085a      	lsrs	r2, r3, #1
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	441a      	add	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b0f      	cmp	r3, #15
 8006b9c:	d909      	bls.n	8006bb2 <UART_SetConfig+0x546>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba4:	d205      	bcs.n	8006bb2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e002      	b.n	8006bb8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3728      	adds	r7, #40	; 0x28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bd2:	bf00      	nop
 8006bd4:	40008000 	.word	0x40008000
 8006bd8:	00f42400 	.word	0x00f42400

08006bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d01a      	beq.n	8006cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cda:	d10a      	bne.n	8006cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	605a      	str	r2, [r3, #4]
  }
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d30:	f7fc fb70 	bl	8003414 <HAL_GetTick>
 8006d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0308 	and.w	r3, r3, #8
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d10e      	bne.n	8006d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f82d 	bl	8006db2 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e023      	b.n	8006daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b04      	cmp	r3, #4
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f817 	bl	8006db2 <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e00d      	b.n	8006daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}

08006db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b09c      	sub	sp, #112	; 0x70
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	603b      	str	r3, [r7, #0]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc2:	e0a5      	b.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dca:	f000 80a1 	beq.w	8006f10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dce:	f7fc fb21 	bl	8003414 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d302      	bcc.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d13e      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006df8:	667b      	str	r3, [r7, #100]	; 0x64
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e6      	bne.n	8006de4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	3308      	adds	r3, #8
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f023 0301 	bic.w	r3, r3, #1
 8006e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e5      	bne.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2220      	movs	r2, #32
 8006e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e067      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d04f      	beq.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69db      	ldr	r3, [r3, #28]
 8006e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7e:	d147      	bne.n	8006f10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e6      	bne.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3308      	adds	r3, #8
 8006ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 0301 	bic.w	r3, r3, #1
 8006ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006edc:	623a      	str	r2, [r7, #32]
 8006ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2200      	movs	r2, #0
 8006f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e010      	b.n	8006f32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69da      	ldr	r2, [r3, #28]
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bf0c      	ite	eq
 8006f20:	2301      	moveq	r3, #1
 8006f22:	2300      	movne	r3, #0
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	79fb      	ldrb	r3, [r7, #7]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	f43f af4a 	beq.w	8006dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3770      	adds	r7, #112	; 0x70
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <__cvt>:
 8006f3a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f3e:	ec55 4b10 	vmov	r4, r5, d0
 8006f42:	2d00      	cmp	r5, #0
 8006f44:	460e      	mov	r6, r1
 8006f46:	4619      	mov	r1, r3
 8006f48:	462b      	mov	r3, r5
 8006f4a:	bfbb      	ittet	lt
 8006f4c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f50:	461d      	movlt	r5, r3
 8006f52:	2300      	movge	r3, #0
 8006f54:	232d      	movlt	r3, #45	; 0x2d
 8006f56:	700b      	strb	r3, [r1, #0]
 8006f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f5a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f5e:	4691      	mov	r9, r2
 8006f60:	f023 0820 	bic.w	r8, r3, #32
 8006f64:	bfbc      	itt	lt
 8006f66:	4622      	movlt	r2, r4
 8006f68:	4614      	movlt	r4, r2
 8006f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6e:	d005      	beq.n	8006f7c <__cvt+0x42>
 8006f70:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f74:	d100      	bne.n	8006f78 <__cvt+0x3e>
 8006f76:	3601      	adds	r6, #1
 8006f78:	2102      	movs	r1, #2
 8006f7a:	e000      	b.n	8006f7e <__cvt+0x44>
 8006f7c:	2103      	movs	r1, #3
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	ab02      	add	r3, sp, #8
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	ec45 4b10 	vmov	d0, r4, r5
 8006f8a:	4653      	mov	r3, sl
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	f000 ff4b 	bl	8007e28 <_dtoa_r>
 8006f92:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f96:	4607      	mov	r7, r0
 8006f98:	d102      	bne.n	8006fa0 <__cvt+0x66>
 8006f9a:	f019 0f01 	tst.w	r9, #1
 8006f9e:	d022      	beq.n	8006fe6 <__cvt+0xac>
 8006fa0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fa4:	eb07 0906 	add.w	r9, r7, r6
 8006fa8:	d110      	bne.n	8006fcc <__cvt+0x92>
 8006faa:	783b      	ldrb	r3, [r7, #0]
 8006fac:	2b30      	cmp	r3, #48	; 0x30
 8006fae:	d10a      	bne.n	8006fc6 <__cvt+0x8c>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4620      	mov	r0, r4
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	f7f9 fd86 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fbc:	b918      	cbnz	r0, 8006fc6 <__cvt+0x8c>
 8006fbe:	f1c6 0601 	rsb	r6, r6, #1
 8006fc2:	f8ca 6000 	str.w	r6, [sl]
 8006fc6:	f8da 3000 	ldr.w	r3, [sl]
 8006fca:	4499      	add	r9, r3
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2300      	movs	r3, #0
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7f9 fd78 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fd8:	b108      	cbz	r0, 8006fde <__cvt+0xa4>
 8006fda:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fde:	2230      	movs	r2, #48	; 0x30
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	454b      	cmp	r3, r9
 8006fe4:	d307      	bcc.n	8006ff6 <__cvt+0xbc>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fea:	1bdb      	subs	r3, r3, r7
 8006fec:	4638      	mov	r0, r7
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	b004      	add	sp, #16
 8006ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	9103      	str	r1, [sp, #12]
 8006ffa:	701a      	strb	r2, [r3, #0]
 8006ffc:	e7f0      	b.n	8006fe0 <__cvt+0xa6>

08006ffe <__exponent>:
 8006ffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007000:	4603      	mov	r3, r0
 8007002:	2900      	cmp	r1, #0
 8007004:	bfb8      	it	lt
 8007006:	4249      	neglt	r1, r1
 8007008:	f803 2b02 	strb.w	r2, [r3], #2
 800700c:	bfb4      	ite	lt
 800700e:	222d      	movlt	r2, #45	; 0x2d
 8007010:	222b      	movge	r2, #43	; 0x2b
 8007012:	2909      	cmp	r1, #9
 8007014:	7042      	strb	r2, [r0, #1]
 8007016:	dd2a      	ble.n	800706e <__exponent+0x70>
 8007018:	f10d 0207 	add.w	r2, sp, #7
 800701c:	4617      	mov	r7, r2
 800701e:	260a      	movs	r6, #10
 8007020:	4694      	mov	ip, r2
 8007022:	fb91 f5f6 	sdiv	r5, r1, r6
 8007026:	fb06 1415 	mls	r4, r6, r5, r1
 800702a:	3430      	adds	r4, #48	; 0x30
 800702c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007030:	460c      	mov	r4, r1
 8007032:	2c63      	cmp	r4, #99	; 0x63
 8007034:	f102 32ff 	add.w	r2, r2, #4294967295
 8007038:	4629      	mov	r1, r5
 800703a:	dcf1      	bgt.n	8007020 <__exponent+0x22>
 800703c:	3130      	adds	r1, #48	; 0x30
 800703e:	f1ac 0402 	sub.w	r4, ip, #2
 8007042:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007046:	1c41      	adds	r1, r0, #1
 8007048:	4622      	mov	r2, r4
 800704a:	42ba      	cmp	r2, r7
 800704c:	d30a      	bcc.n	8007064 <__exponent+0x66>
 800704e:	f10d 0209 	add.w	r2, sp, #9
 8007052:	eba2 020c 	sub.w	r2, r2, ip
 8007056:	42bc      	cmp	r4, r7
 8007058:	bf88      	it	hi
 800705a:	2200      	movhi	r2, #0
 800705c:	4413      	add	r3, r2
 800705e:	1a18      	subs	r0, r3, r0
 8007060:	b003      	add	sp, #12
 8007062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007064:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007068:	f801 5f01 	strb.w	r5, [r1, #1]!
 800706c:	e7ed      	b.n	800704a <__exponent+0x4c>
 800706e:	2330      	movs	r3, #48	; 0x30
 8007070:	3130      	adds	r1, #48	; 0x30
 8007072:	7083      	strb	r3, [r0, #2]
 8007074:	70c1      	strb	r1, [r0, #3]
 8007076:	1d03      	adds	r3, r0, #4
 8007078:	e7f1      	b.n	800705e <__exponent+0x60>
	...

0800707c <_printf_float>:
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	ed2d 8b02 	vpush	{d8}
 8007084:	b08d      	sub	sp, #52	; 0x34
 8007086:	460c      	mov	r4, r1
 8007088:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800708c:	4616      	mov	r6, r2
 800708e:	461f      	mov	r7, r3
 8007090:	4605      	mov	r5, r0
 8007092:	f000 fdc9 	bl	8007c28 <_localeconv_r>
 8007096:	f8d0 a000 	ldr.w	sl, [r0]
 800709a:	4650      	mov	r0, sl
 800709c:	f7f9 f8e8 	bl	8000270 <strlen>
 80070a0:	2300      	movs	r3, #0
 80070a2:	930a      	str	r3, [sp, #40]	; 0x28
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	9305      	str	r3, [sp, #20]
 80070a8:	f8d8 3000 	ldr.w	r3, [r8]
 80070ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070b0:	3307      	adds	r3, #7
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	f103 0208 	add.w	r2, r3, #8
 80070ba:	f8c8 2000 	str.w	r2, [r8]
 80070be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80070cc:	ee08 0a10 	vmov	s16, r0
 80070d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80070d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d8:	4b9e      	ldr	r3, [pc, #632]	; (8007354 <_printf_float+0x2d8>)
 80070da:	f04f 32ff 	mov.w	r2, #4294967295
 80070de:	f7f9 fd25 	bl	8000b2c <__aeabi_dcmpun>
 80070e2:	bb88      	cbnz	r0, 8007148 <_printf_float+0xcc>
 80070e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e8:	4b9a      	ldr	r3, [pc, #616]	; (8007354 <_printf_float+0x2d8>)
 80070ea:	f04f 32ff 	mov.w	r2, #4294967295
 80070ee:	f7f9 fcff 	bl	8000af0 <__aeabi_dcmple>
 80070f2:	bb48      	cbnz	r0, 8007148 <_printf_float+0xcc>
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	4640      	mov	r0, r8
 80070fa:	4649      	mov	r1, r9
 80070fc:	f7f9 fcee 	bl	8000adc <__aeabi_dcmplt>
 8007100:	b110      	cbz	r0, 8007108 <_printf_float+0x8c>
 8007102:	232d      	movs	r3, #45	; 0x2d
 8007104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007108:	4a93      	ldr	r2, [pc, #588]	; (8007358 <_printf_float+0x2dc>)
 800710a:	4b94      	ldr	r3, [pc, #592]	; (800735c <_printf_float+0x2e0>)
 800710c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007110:	bf94      	ite	ls
 8007112:	4690      	movls	r8, r2
 8007114:	4698      	movhi	r8, r3
 8007116:	2303      	movs	r3, #3
 8007118:	6123      	str	r3, [r4, #16]
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	f023 0304 	bic.w	r3, r3, #4
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	f04f 0900 	mov.w	r9, #0
 8007126:	9700      	str	r7, [sp, #0]
 8007128:	4633      	mov	r3, r6
 800712a:	aa0b      	add	r2, sp, #44	; 0x2c
 800712c:	4621      	mov	r1, r4
 800712e:	4628      	mov	r0, r5
 8007130:	f000 f9da 	bl	80074e8 <_printf_common>
 8007134:	3001      	adds	r0, #1
 8007136:	f040 8090 	bne.w	800725a <_printf_float+0x1de>
 800713a:	f04f 30ff 	mov.w	r0, #4294967295
 800713e:	b00d      	add	sp, #52	; 0x34
 8007140:	ecbd 8b02 	vpop	{d8}
 8007144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007148:	4642      	mov	r2, r8
 800714a:	464b      	mov	r3, r9
 800714c:	4640      	mov	r0, r8
 800714e:	4649      	mov	r1, r9
 8007150:	f7f9 fcec 	bl	8000b2c <__aeabi_dcmpun>
 8007154:	b140      	cbz	r0, 8007168 <_printf_float+0xec>
 8007156:	464b      	mov	r3, r9
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfbc      	itt	lt
 800715c:	232d      	movlt	r3, #45	; 0x2d
 800715e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007162:	4a7f      	ldr	r2, [pc, #508]	; (8007360 <_printf_float+0x2e4>)
 8007164:	4b7f      	ldr	r3, [pc, #508]	; (8007364 <_printf_float+0x2e8>)
 8007166:	e7d1      	b.n	800710c <_printf_float+0x90>
 8007168:	6863      	ldr	r3, [r4, #4]
 800716a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800716e:	9206      	str	r2, [sp, #24]
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	d13f      	bne.n	80071f4 <_printf_float+0x178>
 8007174:	2306      	movs	r3, #6
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	9b05      	ldr	r3, [sp, #20]
 800717a:	6861      	ldr	r1, [r4, #4]
 800717c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007180:	2300      	movs	r3, #0
 8007182:	9303      	str	r3, [sp, #12]
 8007184:	ab0a      	add	r3, sp, #40	; 0x28
 8007186:	e9cd b301 	strd	fp, r3, [sp, #4]
 800718a:	ab09      	add	r3, sp, #36	; 0x24
 800718c:	ec49 8b10 	vmov	d0, r8, r9
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	6022      	str	r2, [r4, #0]
 8007194:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007198:	4628      	mov	r0, r5
 800719a:	f7ff fece 	bl	8006f3a <__cvt>
 800719e:	9b06      	ldr	r3, [sp, #24]
 80071a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071a2:	2b47      	cmp	r3, #71	; 0x47
 80071a4:	4680      	mov	r8, r0
 80071a6:	d108      	bne.n	80071ba <_printf_float+0x13e>
 80071a8:	1cc8      	adds	r0, r1, #3
 80071aa:	db02      	blt.n	80071b2 <_printf_float+0x136>
 80071ac:	6863      	ldr	r3, [r4, #4]
 80071ae:	4299      	cmp	r1, r3
 80071b0:	dd41      	ble.n	8007236 <_printf_float+0x1ba>
 80071b2:	f1ab 0302 	sub.w	r3, fp, #2
 80071b6:	fa5f fb83 	uxtb.w	fp, r3
 80071ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071be:	d820      	bhi.n	8007202 <_printf_float+0x186>
 80071c0:	3901      	subs	r1, #1
 80071c2:	465a      	mov	r2, fp
 80071c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071c8:	9109      	str	r1, [sp, #36]	; 0x24
 80071ca:	f7ff ff18 	bl	8006ffe <__exponent>
 80071ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071d0:	1813      	adds	r3, r2, r0
 80071d2:	2a01      	cmp	r2, #1
 80071d4:	4681      	mov	r9, r0
 80071d6:	6123      	str	r3, [r4, #16]
 80071d8:	dc02      	bgt.n	80071e0 <_printf_float+0x164>
 80071da:	6822      	ldr	r2, [r4, #0]
 80071dc:	07d2      	lsls	r2, r2, #31
 80071de:	d501      	bpl.n	80071e4 <_printf_float+0x168>
 80071e0:	3301      	adds	r3, #1
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d09c      	beq.n	8007126 <_printf_float+0xaa>
 80071ec:	232d      	movs	r3, #45	; 0x2d
 80071ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071f2:	e798      	b.n	8007126 <_printf_float+0xaa>
 80071f4:	9a06      	ldr	r2, [sp, #24]
 80071f6:	2a47      	cmp	r2, #71	; 0x47
 80071f8:	d1be      	bne.n	8007178 <_printf_float+0xfc>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1bc      	bne.n	8007178 <_printf_float+0xfc>
 80071fe:	2301      	movs	r3, #1
 8007200:	e7b9      	b.n	8007176 <_printf_float+0xfa>
 8007202:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007206:	d118      	bne.n	800723a <_printf_float+0x1be>
 8007208:	2900      	cmp	r1, #0
 800720a:	6863      	ldr	r3, [r4, #4]
 800720c:	dd0b      	ble.n	8007226 <_printf_float+0x1aa>
 800720e:	6121      	str	r1, [r4, #16]
 8007210:	b913      	cbnz	r3, 8007218 <_printf_float+0x19c>
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	07d0      	lsls	r0, r2, #31
 8007216:	d502      	bpl.n	800721e <_printf_float+0x1a2>
 8007218:	3301      	adds	r3, #1
 800721a:	440b      	add	r3, r1
 800721c:	6123      	str	r3, [r4, #16]
 800721e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007220:	f04f 0900 	mov.w	r9, #0
 8007224:	e7de      	b.n	80071e4 <_printf_float+0x168>
 8007226:	b913      	cbnz	r3, 800722e <_printf_float+0x1b2>
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	07d2      	lsls	r2, r2, #31
 800722c:	d501      	bpl.n	8007232 <_printf_float+0x1b6>
 800722e:	3302      	adds	r3, #2
 8007230:	e7f4      	b.n	800721c <_printf_float+0x1a0>
 8007232:	2301      	movs	r3, #1
 8007234:	e7f2      	b.n	800721c <_printf_float+0x1a0>
 8007236:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800723a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800723c:	4299      	cmp	r1, r3
 800723e:	db05      	blt.n	800724c <_printf_float+0x1d0>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	6121      	str	r1, [r4, #16]
 8007244:	07d8      	lsls	r0, r3, #31
 8007246:	d5ea      	bpl.n	800721e <_printf_float+0x1a2>
 8007248:	1c4b      	adds	r3, r1, #1
 800724a:	e7e7      	b.n	800721c <_printf_float+0x1a0>
 800724c:	2900      	cmp	r1, #0
 800724e:	bfd4      	ite	le
 8007250:	f1c1 0202 	rsble	r2, r1, #2
 8007254:	2201      	movgt	r2, #1
 8007256:	4413      	add	r3, r2
 8007258:	e7e0      	b.n	800721c <_printf_float+0x1a0>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	055a      	lsls	r2, r3, #21
 800725e:	d407      	bmi.n	8007270 <_printf_float+0x1f4>
 8007260:	6923      	ldr	r3, [r4, #16]
 8007262:	4642      	mov	r2, r8
 8007264:	4631      	mov	r1, r6
 8007266:	4628      	mov	r0, r5
 8007268:	47b8      	blx	r7
 800726a:	3001      	adds	r0, #1
 800726c:	d12c      	bne.n	80072c8 <_printf_float+0x24c>
 800726e:	e764      	b.n	800713a <_printf_float+0xbe>
 8007270:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007274:	f240 80e0 	bls.w	8007438 <_printf_float+0x3bc>
 8007278:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800727c:	2200      	movs	r2, #0
 800727e:	2300      	movs	r3, #0
 8007280:	f7f9 fc22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007284:	2800      	cmp	r0, #0
 8007286:	d034      	beq.n	80072f2 <_printf_float+0x276>
 8007288:	4a37      	ldr	r2, [pc, #220]	; (8007368 <_printf_float+0x2ec>)
 800728a:	2301      	movs	r3, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f af51 	beq.w	800713a <_printf_float+0xbe>
 8007298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800729c:	429a      	cmp	r2, r3
 800729e:	db02      	blt.n	80072a6 <_printf_float+0x22a>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	07d8      	lsls	r0, r3, #31
 80072a4:	d510      	bpl.n	80072c8 <_printf_float+0x24c>
 80072a6:	ee18 3a10 	vmov	r3, s16
 80072aa:	4652      	mov	r2, sl
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af41 	beq.w	800713a <_printf_float+0xbe>
 80072b8:	f04f 0800 	mov.w	r8, #0
 80072bc:	f104 091a 	add.w	r9, r4, #26
 80072c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072c2:	3b01      	subs	r3, #1
 80072c4:	4543      	cmp	r3, r8
 80072c6:	dc09      	bgt.n	80072dc <_printf_float+0x260>
 80072c8:	6823      	ldr	r3, [r4, #0]
 80072ca:	079b      	lsls	r3, r3, #30
 80072cc:	f100 8107 	bmi.w	80074de <_printf_float+0x462>
 80072d0:	68e0      	ldr	r0, [r4, #12]
 80072d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072d4:	4298      	cmp	r0, r3
 80072d6:	bfb8      	it	lt
 80072d8:	4618      	movlt	r0, r3
 80072da:	e730      	b.n	800713e <_printf_float+0xc2>
 80072dc:	2301      	movs	r3, #1
 80072de:	464a      	mov	r2, r9
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af27 	beq.w	800713a <_printf_float+0xbe>
 80072ec:	f108 0801 	add.w	r8, r8, #1
 80072f0:	e7e6      	b.n	80072c0 <_printf_float+0x244>
 80072f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dc39      	bgt.n	800736c <_printf_float+0x2f0>
 80072f8:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <_printf_float+0x2ec>)
 80072fa:	2301      	movs	r3, #1
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	f43f af19 	beq.w	800713a <_printf_float+0xbe>
 8007308:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800730c:	4313      	orrs	r3, r2
 800730e:	d102      	bne.n	8007316 <_printf_float+0x29a>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	07d9      	lsls	r1, r3, #31
 8007314:	d5d8      	bpl.n	80072c8 <_printf_float+0x24c>
 8007316:	ee18 3a10 	vmov	r3, s16
 800731a:	4652      	mov	r2, sl
 800731c:	4631      	mov	r1, r6
 800731e:	4628      	mov	r0, r5
 8007320:	47b8      	blx	r7
 8007322:	3001      	adds	r0, #1
 8007324:	f43f af09 	beq.w	800713a <_printf_float+0xbe>
 8007328:	f04f 0900 	mov.w	r9, #0
 800732c:	f104 0a1a 	add.w	sl, r4, #26
 8007330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007332:	425b      	negs	r3, r3
 8007334:	454b      	cmp	r3, r9
 8007336:	dc01      	bgt.n	800733c <_printf_float+0x2c0>
 8007338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800733a:	e792      	b.n	8007262 <_printf_float+0x1e6>
 800733c:	2301      	movs	r3, #1
 800733e:	4652      	mov	r2, sl
 8007340:	4631      	mov	r1, r6
 8007342:	4628      	mov	r0, r5
 8007344:	47b8      	blx	r7
 8007346:	3001      	adds	r0, #1
 8007348:	f43f aef7 	beq.w	800713a <_printf_float+0xbe>
 800734c:	f109 0901 	add.w	r9, r9, #1
 8007350:	e7ee      	b.n	8007330 <_printf_float+0x2b4>
 8007352:	bf00      	nop
 8007354:	7fefffff 	.word	0x7fefffff
 8007358:	0800aee0 	.word	0x0800aee0
 800735c:	0800aee4 	.word	0x0800aee4
 8007360:	0800aee8 	.word	0x0800aee8
 8007364:	0800aeec 	.word	0x0800aeec
 8007368:	0800aef0 	.word	0x0800aef0
 800736c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800736e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007370:	429a      	cmp	r2, r3
 8007372:	bfa8      	it	ge
 8007374:	461a      	movge	r2, r3
 8007376:	2a00      	cmp	r2, #0
 8007378:	4691      	mov	r9, r2
 800737a:	dc37      	bgt.n	80073ec <_printf_float+0x370>
 800737c:	f04f 0b00 	mov.w	fp, #0
 8007380:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007384:	f104 021a 	add.w	r2, r4, #26
 8007388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800738a:	9305      	str	r3, [sp, #20]
 800738c:	eba3 0309 	sub.w	r3, r3, r9
 8007390:	455b      	cmp	r3, fp
 8007392:	dc33      	bgt.n	80073fc <_printf_float+0x380>
 8007394:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007398:	429a      	cmp	r2, r3
 800739a:	db3b      	blt.n	8007414 <_printf_float+0x398>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	07da      	lsls	r2, r3, #31
 80073a0:	d438      	bmi.n	8007414 <_printf_float+0x398>
 80073a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80073a6:	eba2 0903 	sub.w	r9, r2, r3
 80073aa:	9b05      	ldr	r3, [sp, #20]
 80073ac:	1ad2      	subs	r2, r2, r3
 80073ae:	4591      	cmp	r9, r2
 80073b0:	bfa8      	it	ge
 80073b2:	4691      	movge	r9, r2
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	dc35      	bgt.n	8007426 <_printf_float+0x3aa>
 80073ba:	f04f 0800 	mov.w	r8, #0
 80073be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073c2:	f104 0a1a 	add.w	sl, r4, #26
 80073c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ca:	1a9b      	subs	r3, r3, r2
 80073cc:	eba3 0309 	sub.w	r3, r3, r9
 80073d0:	4543      	cmp	r3, r8
 80073d2:	f77f af79 	ble.w	80072c8 <_printf_float+0x24c>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4652      	mov	r2, sl
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f aeaa 	beq.w	800713a <_printf_float+0xbe>
 80073e6:	f108 0801 	add.w	r8, r8, #1
 80073ea:	e7ec      	b.n	80073c6 <_printf_float+0x34a>
 80073ec:	4613      	mov	r3, r2
 80073ee:	4631      	mov	r1, r6
 80073f0:	4642      	mov	r2, r8
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	d1c0      	bne.n	800737c <_printf_float+0x300>
 80073fa:	e69e      	b.n	800713a <_printf_float+0xbe>
 80073fc:	2301      	movs	r3, #1
 80073fe:	4631      	mov	r1, r6
 8007400:	4628      	mov	r0, r5
 8007402:	9205      	str	r2, [sp, #20]
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f ae97 	beq.w	800713a <_printf_float+0xbe>
 800740c:	9a05      	ldr	r2, [sp, #20]
 800740e:	f10b 0b01 	add.w	fp, fp, #1
 8007412:	e7b9      	b.n	8007388 <_printf_float+0x30c>
 8007414:	ee18 3a10 	vmov	r3, s16
 8007418:	4652      	mov	r2, sl
 800741a:	4631      	mov	r1, r6
 800741c:	4628      	mov	r0, r5
 800741e:	47b8      	blx	r7
 8007420:	3001      	adds	r0, #1
 8007422:	d1be      	bne.n	80073a2 <_printf_float+0x326>
 8007424:	e689      	b.n	800713a <_printf_float+0xbe>
 8007426:	9a05      	ldr	r2, [sp, #20]
 8007428:	464b      	mov	r3, r9
 800742a:	4442      	add	r2, r8
 800742c:	4631      	mov	r1, r6
 800742e:	4628      	mov	r0, r5
 8007430:	47b8      	blx	r7
 8007432:	3001      	adds	r0, #1
 8007434:	d1c1      	bne.n	80073ba <_printf_float+0x33e>
 8007436:	e680      	b.n	800713a <_printf_float+0xbe>
 8007438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800743a:	2a01      	cmp	r2, #1
 800743c:	dc01      	bgt.n	8007442 <_printf_float+0x3c6>
 800743e:	07db      	lsls	r3, r3, #31
 8007440:	d53a      	bpl.n	80074b8 <_printf_float+0x43c>
 8007442:	2301      	movs	r3, #1
 8007444:	4642      	mov	r2, r8
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	f43f ae74 	beq.w	800713a <_printf_float+0xbe>
 8007452:	ee18 3a10 	vmov	r3, s16
 8007456:	4652      	mov	r2, sl
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f ae6b 	beq.w	800713a <_printf_float+0xbe>
 8007464:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007468:	2200      	movs	r2, #0
 800746a:	2300      	movs	r3, #0
 800746c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007470:	f7f9 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007474:	b9d8      	cbnz	r0, 80074ae <_printf_float+0x432>
 8007476:	f10a 33ff 	add.w	r3, sl, #4294967295
 800747a:	f108 0201 	add.w	r2, r8, #1
 800747e:	4631      	mov	r1, r6
 8007480:	4628      	mov	r0, r5
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	d10e      	bne.n	80074a6 <_printf_float+0x42a>
 8007488:	e657      	b.n	800713a <_printf_float+0xbe>
 800748a:	2301      	movs	r3, #1
 800748c:	4652      	mov	r2, sl
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	f43f ae50 	beq.w	800713a <_printf_float+0xbe>
 800749a:	f108 0801 	add.w	r8, r8, #1
 800749e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a0:	3b01      	subs	r3, #1
 80074a2:	4543      	cmp	r3, r8
 80074a4:	dcf1      	bgt.n	800748a <_printf_float+0x40e>
 80074a6:	464b      	mov	r3, r9
 80074a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074ac:	e6da      	b.n	8007264 <_printf_float+0x1e8>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0a1a 	add.w	sl, r4, #26
 80074b6:	e7f2      	b.n	800749e <_printf_float+0x422>
 80074b8:	2301      	movs	r3, #1
 80074ba:	4642      	mov	r2, r8
 80074bc:	e7df      	b.n	800747e <_printf_float+0x402>
 80074be:	2301      	movs	r3, #1
 80074c0:	464a      	mov	r2, r9
 80074c2:	4631      	mov	r1, r6
 80074c4:	4628      	mov	r0, r5
 80074c6:	47b8      	blx	r7
 80074c8:	3001      	adds	r0, #1
 80074ca:	f43f ae36 	beq.w	800713a <_printf_float+0xbe>
 80074ce:	f108 0801 	add.w	r8, r8, #1
 80074d2:	68e3      	ldr	r3, [r4, #12]
 80074d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074d6:	1a5b      	subs	r3, r3, r1
 80074d8:	4543      	cmp	r3, r8
 80074da:	dcf0      	bgt.n	80074be <_printf_float+0x442>
 80074dc:	e6f8      	b.n	80072d0 <_printf_float+0x254>
 80074de:	f04f 0800 	mov.w	r8, #0
 80074e2:	f104 0919 	add.w	r9, r4, #25
 80074e6:	e7f4      	b.n	80074d2 <_printf_float+0x456>

080074e8 <_printf_common>:
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	4616      	mov	r6, r2
 80074ee:	4699      	mov	r9, r3
 80074f0:	688a      	ldr	r2, [r1, #8]
 80074f2:	690b      	ldr	r3, [r1, #16]
 80074f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfb8      	it	lt
 80074fc:	4613      	movlt	r3, r2
 80074fe:	6033      	str	r3, [r6, #0]
 8007500:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007504:	4607      	mov	r7, r0
 8007506:	460c      	mov	r4, r1
 8007508:	b10a      	cbz	r2, 800750e <_printf_common+0x26>
 800750a:	3301      	adds	r3, #1
 800750c:	6033      	str	r3, [r6, #0]
 800750e:	6823      	ldr	r3, [r4, #0]
 8007510:	0699      	lsls	r1, r3, #26
 8007512:	bf42      	ittt	mi
 8007514:	6833      	ldrmi	r3, [r6, #0]
 8007516:	3302      	addmi	r3, #2
 8007518:	6033      	strmi	r3, [r6, #0]
 800751a:	6825      	ldr	r5, [r4, #0]
 800751c:	f015 0506 	ands.w	r5, r5, #6
 8007520:	d106      	bne.n	8007530 <_printf_common+0x48>
 8007522:	f104 0a19 	add.w	sl, r4, #25
 8007526:	68e3      	ldr	r3, [r4, #12]
 8007528:	6832      	ldr	r2, [r6, #0]
 800752a:	1a9b      	subs	r3, r3, r2
 800752c:	42ab      	cmp	r3, r5
 800752e:	dc26      	bgt.n	800757e <_printf_common+0x96>
 8007530:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007534:	1e13      	subs	r3, r2, #0
 8007536:	6822      	ldr	r2, [r4, #0]
 8007538:	bf18      	it	ne
 800753a:	2301      	movne	r3, #1
 800753c:	0692      	lsls	r2, r2, #26
 800753e:	d42b      	bmi.n	8007598 <_printf_common+0xb0>
 8007540:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007544:	4649      	mov	r1, r9
 8007546:	4638      	mov	r0, r7
 8007548:	47c0      	blx	r8
 800754a:	3001      	adds	r0, #1
 800754c:	d01e      	beq.n	800758c <_printf_common+0xa4>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	6922      	ldr	r2, [r4, #16]
 8007552:	f003 0306 	and.w	r3, r3, #6
 8007556:	2b04      	cmp	r3, #4
 8007558:	bf02      	ittt	eq
 800755a:	68e5      	ldreq	r5, [r4, #12]
 800755c:	6833      	ldreq	r3, [r6, #0]
 800755e:	1aed      	subeq	r5, r5, r3
 8007560:	68a3      	ldr	r3, [r4, #8]
 8007562:	bf0c      	ite	eq
 8007564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007568:	2500      	movne	r5, #0
 800756a:	4293      	cmp	r3, r2
 800756c:	bfc4      	itt	gt
 800756e:	1a9b      	subgt	r3, r3, r2
 8007570:	18ed      	addgt	r5, r5, r3
 8007572:	2600      	movs	r6, #0
 8007574:	341a      	adds	r4, #26
 8007576:	42b5      	cmp	r5, r6
 8007578:	d11a      	bne.n	80075b0 <_printf_common+0xc8>
 800757a:	2000      	movs	r0, #0
 800757c:	e008      	b.n	8007590 <_printf_common+0xa8>
 800757e:	2301      	movs	r3, #1
 8007580:	4652      	mov	r2, sl
 8007582:	4649      	mov	r1, r9
 8007584:	4638      	mov	r0, r7
 8007586:	47c0      	blx	r8
 8007588:	3001      	adds	r0, #1
 800758a:	d103      	bne.n	8007594 <_printf_common+0xac>
 800758c:	f04f 30ff 	mov.w	r0, #4294967295
 8007590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007594:	3501      	adds	r5, #1
 8007596:	e7c6      	b.n	8007526 <_printf_common+0x3e>
 8007598:	18e1      	adds	r1, r4, r3
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	2030      	movs	r0, #48	; 0x30
 800759e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075a2:	4422      	add	r2, r4
 80075a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075ac:	3302      	adds	r3, #2
 80075ae:	e7c7      	b.n	8007540 <_printf_common+0x58>
 80075b0:	2301      	movs	r3, #1
 80075b2:	4622      	mov	r2, r4
 80075b4:	4649      	mov	r1, r9
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c0      	blx	r8
 80075ba:	3001      	adds	r0, #1
 80075bc:	d0e6      	beq.n	800758c <_printf_common+0xa4>
 80075be:	3601      	adds	r6, #1
 80075c0:	e7d9      	b.n	8007576 <_printf_common+0x8e>
	...

080075c4 <_printf_i>:
 80075c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	7e0f      	ldrb	r7, [r1, #24]
 80075ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075cc:	2f78      	cmp	r7, #120	; 0x78
 80075ce:	4691      	mov	r9, r2
 80075d0:	4680      	mov	r8, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	469a      	mov	sl, r3
 80075d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075da:	d807      	bhi.n	80075ec <_printf_i+0x28>
 80075dc:	2f62      	cmp	r7, #98	; 0x62
 80075de:	d80a      	bhi.n	80075f6 <_printf_i+0x32>
 80075e0:	2f00      	cmp	r7, #0
 80075e2:	f000 80d4 	beq.w	800778e <_printf_i+0x1ca>
 80075e6:	2f58      	cmp	r7, #88	; 0x58
 80075e8:	f000 80c0 	beq.w	800776c <_printf_i+0x1a8>
 80075ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075f4:	e03a      	b.n	800766c <_printf_i+0xa8>
 80075f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075fa:	2b15      	cmp	r3, #21
 80075fc:	d8f6      	bhi.n	80075ec <_printf_i+0x28>
 80075fe:	a101      	add	r1, pc, #4	; (adr r1, 8007604 <_printf_i+0x40>)
 8007600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007604:	0800765d 	.word	0x0800765d
 8007608:	08007671 	.word	0x08007671
 800760c:	080075ed 	.word	0x080075ed
 8007610:	080075ed 	.word	0x080075ed
 8007614:	080075ed 	.word	0x080075ed
 8007618:	080075ed 	.word	0x080075ed
 800761c:	08007671 	.word	0x08007671
 8007620:	080075ed 	.word	0x080075ed
 8007624:	080075ed 	.word	0x080075ed
 8007628:	080075ed 	.word	0x080075ed
 800762c:	080075ed 	.word	0x080075ed
 8007630:	08007775 	.word	0x08007775
 8007634:	0800769d 	.word	0x0800769d
 8007638:	0800772f 	.word	0x0800772f
 800763c:	080075ed 	.word	0x080075ed
 8007640:	080075ed 	.word	0x080075ed
 8007644:	08007797 	.word	0x08007797
 8007648:	080075ed 	.word	0x080075ed
 800764c:	0800769d 	.word	0x0800769d
 8007650:	080075ed 	.word	0x080075ed
 8007654:	080075ed 	.word	0x080075ed
 8007658:	08007737 	.word	0x08007737
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	1d1a      	adds	r2, r3, #4
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	602a      	str	r2, [r5, #0]
 8007664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800766c:	2301      	movs	r3, #1
 800766e:	e09f      	b.n	80077b0 <_printf_i+0x1ec>
 8007670:	6820      	ldr	r0, [r4, #0]
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	0607      	lsls	r7, r0, #24
 8007676:	f103 0104 	add.w	r1, r3, #4
 800767a:	6029      	str	r1, [r5, #0]
 800767c:	d501      	bpl.n	8007682 <_printf_i+0xbe>
 800767e:	681e      	ldr	r6, [r3, #0]
 8007680:	e003      	b.n	800768a <_printf_i+0xc6>
 8007682:	0646      	lsls	r6, r0, #25
 8007684:	d5fb      	bpl.n	800767e <_printf_i+0xba>
 8007686:	f9b3 6000 	ldrsh.w	r6, [r3]
 800768a:	2e00      	cmp	r6, #0
 800768c:	da03      	bge.n	8007696 <_printf_i+0xd2>
 800768e:	232d      	movs	r3, #45	; 0x2d
 8007690:	4276      	negs	r6, r6
 8007692:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007696:	485a      	ldr	r0, [pc, #360]	; (8007800 <_printf_i+0x23c>)
 8007698:	230a      	movs	r3, #10
 800769a:	e012      	b.n	80076c2 <_printf_i+0xfe>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	1d19      	adds	r1, r3, #4
 80076a2:	6029      	str	r1, [r5, #0]
 80076a4:	0605      	lsls	r5, r0, #24
 80076a6:	d501      	bpl.n	80076ac <_printf_i+0xe8>
 80076a8:	681e      	ldr	r6, [r3, #0]
 80076aa:	e002      	b.n	80076b2 <_printf_i+0xee>
 80076ac:	0641      	lsls	r1, r0, #25
 80076ae:	d5fb      	bpl.n	80076a8 <_printf_i+0xe4>
 80076b0:	881e      	ldrh	r6, [r3, #0]
 80076b2:	4853      	ldr	r0, [pc, #332]	; (8007800 <_printf_i+0x23c>)
 80076b4:	2f6f      	cmp	r7, #111	; 0x6f
 80076b6:	bf0c      	ite	eq
 80076b8:	2308      	moveq	r3, #8
 80076ba:	230a      	movne	r3, #10
 80076bc:	2100      	movs	r1, #0
 80076be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076c2:	6865      	ldr	r5, [r4, #4]
 80076c4:	60a5      	str	r5, [r4, #8]
 80076c6:	2d00      	cmp	r5, #0
 80076c8:	bfa2      	ittt	ge
 80076ca:	6821      	ldrge	r1, [r4, #0]
 80076cc:	f021 0104 	bicge.w	r1, r1, #4
 80076d0:	6021      	strge	r1, [r4, #0]
 80076d2:	b90e      	cbnz	r6, 80076d8 <_printf_i+0x114>
 80076d4:	2d00      	cmp	r5, #0
 80076d6:	d04b      	beq.n	8007770 <_printf_i+0x1ac>
 80076d8:	4615      	mov	r5, r2
 80076da:	fbb6 f1f3 	udiv	r1, r6, r3
 80076de:	fb03 6711 	mls	r7, r3, r1, r6
 80076e2:	5dc7      	ldrb	r7, [r0, r7]
 80076e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076e8:	4637      	mov	r7, r6
 80076ea:	42bb      	cmp	r3, r7
 80076ec:	460e      	mov	r6, r1
 80076ee:	d9f4      	bls.n	80076da <_printf_i+0x116>
 80076f0:	2b08      	cmp	r3, #8
 80076f2:	d10b      	bne.n	800770c <_printf_i+0x148>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	07de      	lsls	r6, r3, #31
 80076f8:	d508      	bpl.n	800770c <_printf_i+0x148>
 80076fa:	6923      	ldr	r3, [r4, #16]
 80076fc:	6861      	ldr	r1, [r4, #4]
 80076fe:	4299      	cmp	r1, r3
 8007700:	bfde      	ittt	le
 8007702:	2330      	movle	r3, #48	; 0x30
 8007704:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007708:	f105 35ff 	addle.w	r5, r5, #4294967295
 800770c:	1b52      	subs	r2, r2, r5
 800770e:	6122      	str	r2, [r4, #16]
 8007710:	f8cd a000 	str.w	sl, [sp]
 8007714:	464b      	mov	r3, r9
 8007716:	aa03      	add	r2, sp, #12
 8007718:	4621      	mov	r1, r4
 800771a:	4640      	mov	r0, r8
 800771c:	f7ff fee4 	bl	80074e8 <_printf_common>
 8007720:	3001      	adds	r0, #1
 8007722:	d14a      	bne.n	80077ba <_printf_i+0x1f6>
 8007724:	f04f 30ff 	mov.w	r0, #4294967295
 8007728:	b004      	add	sp, #16
 800772a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	f043 0320 	orr.w	r3, r3, #32
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	4833      	ldr	r0, [pc, #204]	; (8007804 <_printf_i+0x240>)
 8007738:	2778      	movs	r7, #120	; 0x78
 800773a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	6829      	ldr	r1, [r5, #0]
 8007742:	061f      	lsls	r7, r3, #24
 8007744:	f851 6b04 	ldr.w	r6, [r1], #4
 8007748:	d402      	bmi.n	8007750 <_printf_i+0x18c>
 800774a:	065f      	lsls	r7, r3, #25
 800774c:	bf48      	it	mi
 800774e:	b2b6      	uxthmi	r6, r6
 8007750:	07df      	lsls	r7, r3, #31
 8007752:	bf48      	it	mi
 8007754:	f043 0320 	orrmi.w	r3, r3, #32
 8007758:	6029      	str	r1, [r5, #0]
 800775a:	bf48      	it	mi
 800775c:	6023      	strmi	r3, [r4, #0]
 800775e:	b91e      	cbnz	r6, 8007768 <_printf_i+0x1a4>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	f023 0320 	bic.w	r3, r3, #32
 8007766:	6023      	str	r3, [r4, #0]
 8007768:	2310      	movs	r3, #16
 800776a:	e7a7      	b.n	80076bc <_printf_i+0xf8>
 800776c:	4824      	ldr	r0, [pc, #144]	; (8007800 <_printf_i+0x23c>)
 800776e:	e7e4      	b.n	800773a <_printf_i+0x176>
 8007770:	4615      	mov	r5, r2
 8007772:	e7bd      	b.n	80076f0 <_printf_i+0x12c>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	6826      	ldr	r6, [r4, #0]
 8007778:	6961      	ldr	r1, [r4, #20]
 800777a:	1d18      	adds	r0, r3, #4
 800777c:	6028      	str	r0, [r5, #0]
 800777e:	0635      	lsls	r5, r6, #24
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	d501      	bpl.n	8007788 <_printf_i+0x1c4>
 8007784:	6019      	str	r1, [r3, #0]
 8007786:	e002      	b.n	800778e <_printf_i+0x1ca>
 8007788:	0670      	lsls	r0, r6, #25
 800778a:	d5fb      	bpl.n	8007784 <_printf_i+0x1c0>
 800778c:	8019      	strh	r1, [r3, #0]
 800778e:	2300      	movs	r3, #0
 8007790:	6123      	str	r3, [r4, #16]
 8007792:	4615      	mov	r5, r2
 8007794:	e7bc      	b.n	8007710 <_printf_i+0x14c>
 8007796:	682b      	ldr	r3, [r5, #0]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	602a      	str	r2, [r5, #0]
 800779c:	681d      	ldr	r5, [r3, #0]
 800779e:	6862      	ldr	r2, [r4, #4]
 80077a0:	2100      	movs	r1, #0
 80077a2:	4628      	mov	r0, r5
 80077a4:	f7f8 fd14 	bl	80001d0 <memchr>
 80077a8:	b108      	cbz	r0, 80077ae <_printf_i+0x1ea>
 80077aa:	1b40      	subs	r0, r0, r5
 80077ac:	6060      	str	r0, [r4, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	6123      	str	r3, [r4, #16]
 80077b2:	2300      	movs	r3, #0
 80077b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077b8:	e7aa      	b.n	8007710 <_printf_i+0x14c>
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	462a      	mov	r2, r5
 80077be:	4649      	mov	r1, r9
 80077c0:	4640      	mov	r0, r8
 80077c2:	47d0      	blx	sl
 80077c4:	3001      	adds	r0, #1
 80077c6:	d0ad      	beq.n	8007724 <_printf_i+0x160>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	079b      	lsls	r3, r3, #30
 80077cc:	d413      	bmi.n	80077f6 <_printf_i+0x232>
 80077ce:	68e0      	ldr	r0, [r4, #12]
 80077d0:	9b03      	ldr	r3, [sp, #12]
 80077d2:	4298      	cmp	r0, r3
 80077d4:	bfb8      	it	lt
 80077d6:	4618      	movlt	r0, r3
 80077d8:	e7a6      	b.n	8007728 <_printf_i+0x164>
 80077da:	2301      	movs	r3, #1
 80077dc:	4632      	mov	r2, r6
 80077de:	4649      	mov	r1, r9
 80077e0:	4640      	mov	r0, r8
 80077e2:	47d0      	blx	sl
 80077e4:	3001      	adds	r0, #1
 80077e6:	d09d      	beq.n	8007724 <_printf_i+0x160>
 80077e8:	3501      	adds	r5, #1
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	9903      	ldr	r1, [sp, #12]
 80077ee:	1a5b      	subs	r3, r3, r1
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	dcf2      	bgt.n	80077da <_printf_i+0x216>
 80077f4:	e7eb      	b.n	80077ce <_printf_i+0x20a>
 80077f6:	2500      	movs	r5, #0
 80077f8:	f104 0619 	add.w	r6, r4, #25
 80077fc:	e7f5      	b.n	80077ea <_printf_i+0x226>
 80077fe:	bf00      	nop
 8007800:	0800aef2 	.word	0x0800aef2
 8007804:	0800af03 	.word	0x0800af03

08007808 <std>:
 8007808:	2300      	movs	r3, #0
 800780a:	b510      	push	{r4, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	e9c0 3300 	strd	r3, r3, [r0]
 8007812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007816:	6083      	str	r3, [r0, #8]
 8007818:	8181      	strh	r1, [r0, #12]
 800781a:	6643      	str	r3, [r0, #100]	; 0x64
 800781c:	81c2      	strh	r2, [r0, #14]
 800781e:	6183      	str	r3, [r0, #24]
 8007820:	4619      	mov	r1, r3
 8007822:	2208      	movs	r2, #8
 8007824:	305c      	adds	r0, #92	; 0x5c
 8007826:	f000 f9f7 	bl	8007c18 <memset>
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <std+0x58>)
 800782c:	6263      	str	r3, [r4, #36]	; 0x24
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <std+0x5c>)
 8007830:	62a3      	str	r3, [r4, #40]	; 0x28
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <std+0x60>)
 8007834:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <std+0x64>)
 8007838:	6323      	str	r3, [r4, #48]	; 0x30
 800783a:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <std+0x68>)
 800783c:	6224      	str	r4, [r4, #32]
 800783e:	429c      	cmp	r4, r3
 8007840:	d006      	beq.n	8007850 <std+0x48>
 8007842:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007846:	4294      	cmp	r4, r2
 8007848:	d002      	beq.n	8007850 <std+0x48>
 800784a:	33d0      	adds	r3, #208	; 0xd0
 800784c:	429c      	cmp	r4, r3
 800784e:	d105      	bne.n	800785c <std+0x54>
 8007850:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007858:	f000 ba5a 	b.w	8007d10 <__retarget_lock_init_recursive>
 800785c:	bd10      	pop	{r4, pc}
 800785e:	bf00      	nop
 8007860:	08007a69 	.word	0x08007a69
 8007864:	08007a8b 	.word	0x08007a8b
 8007868:	08007ac3 	.word	0x08007ac3
 800786c:	08007ae7 	.word	0x08007ae7
 8007870:	20000394 	.word	0x20000394

08007874 <stdio_exit_handler>:
 8007874:	4a02      	ldr	r2, [pc, #8]	; (8007880 <stdio_exit_handler+0xc>)
 8007876:	4903      	ldr	r1, [pc, #12]	; (8007884 <stdio_exit_handler+0x10>)
 8007878:	4803      	ldr	r0, [pc, #12]	; (8007888 <stdio_exit_handler+0x14>)
 800787a:	f000 b869 	b.w	8007950 <_fwalk_sglue>
 800787e:	bf00      	nop
 8007880:	2000000c 	.word	0x2000000c
 8007884:	08009699 	.word	0x08009699
 8007888:	20000018 	.word	0x20000018

0800788c <cleanup_stdio>:
 800788c:	6841      	ldr	r1, [r0, #4]
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <cleanup_stdio+0x34>)
 8007890:	4299      	cmp	r1, r3
 8007892:	b510      	push	{r4, lr}
 8007894:	4604      	mov	r4, r0
 8007896:	d001      	beq.n	800789c <cleanup_stdio+0x10>
 8007898:	f001 fefe 	bl	8009698 <_fflush_r>
 800789c:	68a1      	ldr	r1, [r4, #8]
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <cleanup_stdio+0x38>)
 80078a0:	4299      	cmp	r1, r3
 80078a2:	d002      	beq.n	80078aa <cleanup_stdio+0x1e>
 80078a4:	4620      	mov	r0, r4
 80078a6:	f001 fef7 	bl	8009698 <_fflush_r>
 80078aa:	68e1      	ldr	r1, [r4, #12]
 80078ac:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <cleanup_stdio+0x3c>)
 80078ae:	4299      	cmp	r1, r3
 80078b0:	d004      	beq.n	80078bc <cleanup_stdio+0x30>
 80078b2:	4620      	mov	r0, r4
 80078b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b8:	f001 beee 	b.w	8009698 <_fflush_r>
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	bf00      	nop
 80078c0:	20000394 	.word	0x20000394
 80078c4:	200003fc 	.word	0x200003fc
 80078c8:	20000464 	.word	0x20000464

080078cc <global_stdio_init.part.0>:
 80078cc:	b510      	push	{r4, lr}
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <global_stdio_init.part.0+0x30>)
 80078d0:	4c0b      	ldr	r4, [pc, #44]	; (8007900 <global_stdio_init.part.0+0x34>)
 80078d2:	4a0c      	ldr	r2, [pc, #48]	; (8007904 <global_stdio_init.part.0+0x38>)
 80078d4:	601a      	str	r2, [r3, #0]
 80078d6:	4620      	mov	r0, r4
 80078d8:	2200      	movs	r2, #0
 80078da:	2104      	movs	r1, #4
 80078dc:	f7ff ff94 	bl	8007808 <std>
 80078e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078e4:	2201      	movs	r2, #1
 80078e6:	2109      	movs	r1, #9
 80078e8:	f7ff ff8e 	bl	8007808 <std>
 80078ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078f0:	2202      	movs	r2, #2
 80078f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f6:	2112      	movs	r1, #18
 80078f8:	f7ff bf86 	b.w	8007808 <std>
 80078fc:	200004cc 	.word	0x200004cc
 8007900:	20000394 	.word	0x20000394
 8007904:	08007875 	.word	0x08007875

08007908 <__sfp_lock_acquire>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__sfp_lock_acquire+0x8>)
 800790a:	f000 ba02 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 800790e:	bf00      	nop
 8007910:	200004d5 	.word	0x200004d5

08007914 <__sfp_lock_release>:
 8007914:	4801      	ldr	r0, [pc, #4]	; (800791c <__sfp_lock_release+0x8>)
 8007916:	f000 b9fd 	b.w	8007d14 <__retarget_lock_release_recursive>
 800791a:	bf00      	nop
 800791c:	200004d5 	.word	0x200004d5

08007920 <__sinit>:
 8007920:	b510      	push	{r4, lr}
 8007922:	4604      	mov	r4, r0
 8007924:	f7ff fff0 	bl	8007908 <__sfp_lock_acquire>
 8007928:	6a23      	ldr	r3, [r4, #32]
 800792a:	b11b      	cbz	r3, 8007934 <__sinit+0x14>
 800792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007930:	f7ff bff0 	b.w	8007914 <__sfp_lock_release>
 8007934:	4b04      	ldr	r3, [pc, #16]	; (8007948 <__sinit+0x28>)
 8007936:	6223      	str	r3, [r4, #32]
 8007938:	4b04      	ldr	r3, [pc, #16]	; (800794c <__sinit+0x2c>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f5      	bne.n	800792c <__sinit+0xc>
 8007940:	f7ff ffc4 	bl	80078cc <global_stdio_init.part.0>
 8007944:	e7f2      	b.n	800792c <__sinit+0xc>
 8007946:	bf00      	nop
 8007948:	0800788d 	.word	0x0800788d
 800794c:	200004cc 	.word	0x200004cc

08007950 <_fwalk_sglue>:
 8007950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	4607      	mov	r7, r0
 8007956:	4688      	mov	r8, r1
 8007958:	4614      	mov	r4, r2
 800795a:	2600      	movs	r6, #0
 800795c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007960:	f1b9 0901 	subs.w	r9, r9, #1
 8007964:	d505      	bpl.n	8007972 <_fwalk_sglue+0x22>
 8007966:	6824      	ldr	r4, [r4, #0]
 8007968:	2c00      	cmp	r4, #0
 800796a:	d1f7      	bne.n	800795c <_fwalk_sglue+0xc>
 800796c:	4630      	mov	r0, r6
 800796e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007972:	89ab      	ldrh	r3, [r5, #12]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d907      	bls.n	8007988 <_fwalk_sglue+0x38>
 8007978:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800797c:	3301      	adds	r3, #1
 800797e:	d003      	beq.n	8007988 <_fwalk_sglue+0x38>
 8007980:	4629      	mov	r1, r5
 8007982:	4638      	mov	r0, r7
 8007984:	47c0      	blx	r8
 8007986:	4306      	orrs	r6, r0
 8007988:	3568      	adds	r5, #104	; 0x68
 800798a:	e7e9      	b.n	8007960 <_fwalk_sglue+0x10>

0800798c <iprintf>:
 800798c:	b40f      	push	{r0, r1, r2, r3}
 800798e:	b507      	push	{r0, r1, r2, lr}
 8007990:	4906      	ldr	r1, [pc, #24]	; (80079ac <iprintf+0x20>)
 8007992:	ab04      	add	r3, sp, #16
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	f853 2b04 	ldr.w	r2, [r3], #4
 800799a:	6881      	ldr	r1, [r0, #8]
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	f001 fcdb 	bl	8009358 <_vfiprintf_r>
 80079a2:	b003      	add	sp, #12
 80079a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a8:	b004      	add	sp, #16
 80079aa:	4770      	bx	lr
 80079ac:	20000064 	.word	0x20000064

080079b0 <_puts_r>:
 80079b0:	6a03      	ldr	r3, [r0, #32]
 80079b2:	b570      	push	{r4, r5, r6, lr}
 80079b4:	6884      	ldr	r4, [r0, #8]
 80079b6:	4605      	mov	r5, r0
 80079b8:	460e      	mov	r6, r1
 80079ba:	b90b      	cbnz	r3, 80079c0 <_puts_r+0x10>
 80079bc:	f7ff ffb0 	bl	8007920 <__sinit>
 80079c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c2:	07db      	lsls	r3, r3, #31
 80079c4:	d405      	bmi.n	80079d2 <_puts_r+0x22>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	0598      	lsls	r0, r3, #22
 80079ca:	d402      	bmi.n	80079d2 <_puts_r+0x22>
 80079cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ce:	f000 f9a0 	bl	8007d12 <__retarget_lock_acquire_recursive>
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	0719      	lsls	r1, r3, #28
 80079d6:	d513      	bpl.n	8007a00 <_puts_r+0x50>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b18b      	cbz	r3, 8007a00 <_puts_r+0x50>
 80079dc:	3e01      	subs	r6, #1
 80079de:	68a3      	ldr	r3, [r4, #8]
 80079e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079e4:	3b01      	subs	r3, #1
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	b9e9      	cbnz	r1, 8007a26 <_puts_r+0x76>
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	da2e      	bge.n	8007a4c <_puts_r+0x9c>
 80079ee:	4622      	mov	r2, r4
 80079f0:	210a      	movs	r1, #10
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f87b 	bl	8007aee <__swbuf_r>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d007      	beq.n	8007a0c <_puts_r+0x5c>
 80079fc:	250a      	movs	r5, #10
 80079fe:	e007      	b.n	8007a10 <_puts_r+0x60>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f8b0 	bl	8007b68 <__swsetup_r>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d0e7      	beq.n	80079dc <_puts_r+0x2c>
 8007a0c:	f04f 35ff 	mov.w	r5, #4294967295
 8007a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a12:	07da      	lsls	r2, r3, #31
 8007a14:	d405      	bmi.n	8007a22 <_puts_r+0x72>
 8007a16:	89a3      	ldrh	r3, [r4, #12]
 8007a18:	059b      	lsls	r3, r3, #22
 8007a1a:	d402      	bmi.n	8007a22 <_puts_r+0x72>
 8007a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1e:	f000 f979 	bl	8007d14 <__retarget_lock_release_recursive>
 8007a22:	4628      	mov	r0, r5
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da04      	bge.n	8007a34 <_puts_r+0x84>
 8007a2a:	69a2      	ldr	r2, [r4, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	dc06      	bgt.n	8007a3e <_puts_r+0x8e>
 8007a30:	290a      	cmp	r1, #10
 8007a32:	d004      	beq.n	8007a3e <_puts_r+0x8e>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	1c5a      	adds	r2, r3, #1
 8007a38:	6022      	str	r2, [r4, #0]
 8007a3a:	7019      	strb	r1, [r3, #0]
 8007a3c:	e7cf      	b.n	80079de <_puts_r+0x2e>
 8007a3e:	4622      	mov	r2, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 f854 	bl	8007aee <__swbuf_r>
 8007a46:	3001      	adds	r0, #1
 8007a48:	d1c9      	bne.n	80079de <_puts_r+0x2e>
 8007a4a:	e7df      	b.n	8007a0c <_puts_r+0x5c>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	250a      	movs	r5, #10
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	701d      	strb	r5, [r3, #0]
 8007a56:	e7db      	b.n	8007a10 <_puts_r+0x60>

08007a58 <puts>:
 8007a58:	4b02      	ldr	r3, [pc, #8]	; (8007a64 <puts+0xc>)
 8007a5a:	4601      	mov	r1, r0
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	f7ff bfa7 	b.w	80079b0 <_puts_r>
 8007a62:	bf00      	nop
 8007a64:	20000064 	.word	0x20000064

08007a68 <__sread>:
 8007a68:	b510      	push	{r4, lr}
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a70:	f000 f900 	bl	8007c74 <_read_r>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	bfab      	itete	ge
 8007a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007a7c:	181b      	addge	r3, r3, r0
 8007a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a82:	bfac      	ite	ge
 8007a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a86:	81a3      	strhlt	r3, [r4, #12]
 8007a88:	bd10      	pop	{r4, pc}

08007a8a <__swrite>:
 8007a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8e:	461f      	mov	r7, r3
 8007a90:	898b      	ldrh	r3, [r1, #12]
 8007a92:	05db      	lsls	r3, r3, #23
 8007a94:	4605      	mov	r5, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	4616      	mov	r6, r2
 8007a9a:	d505      	bpl.n	8007aa8 <__swrite+0x1e>
 8007a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f000 f8d4 	bl	8007c50 <_lseek_r>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	4628      	mov	r0, r5
 8007aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007abe:	f000 b8eb 	b.w	8007c98 <_write_r>

08007ac2 <__sseek>:
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aca:	f000 f8c1 	bl	8007c50 <_lseek_r>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	bf15      	itete	ne
 8007ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007ade:	81a3      	strheq	r3, [r4, #12]
 8007ae0:	bf18      	it	ne
 8007ae2:	81a3      	strhne	r3, [r4, #12]
 8007ae4:	bd10      	pop	{r4, pc}

08007ae6 <__sclose>:
 8007ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aea:	f000 b8a1 	b.w	8007c30 <_close_r>

08007aee <__swbuf_r>:
 8007aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af0:	460e      	mov	r6, r1
 8007af2:	4614      	mov	r4, r2
 8007af4:	4605      	mov	r5, r0
 8007af6:	b118      	cbz	r0, 8007b00 <__swbuf_r+0x12>
 8007af8:	6a03      	ldr	r3, [r0, #32]
 8007afa:	b90b      	cbnz	r3, 8007b00 <__swbuf_r+0x12>
 8007afc:	f7ff ff10 	bl	8007920 <__sinit>
 8007b00:	69a3      	ldr	r3, [r4, #24]
 8007b02:	60a3      	str	r3, [r4, #8]
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	071a      	lsls	r2, r3, #28
 8007b08:	d525      	bpl.n	8007b56 <__swbuf_r+0x68>
 8007b0a:	6923      	ldr	r3, [r4, #16]
 8007b0c:	b31b      	cbz	r3, 8007b56 <__swbuf_r+0x68>
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	6922      	ldr	r2, [r4, #16]
 8007b12:	1a98      	subs	r0, r3, r2
 8007b14:	6963      	ldr	r3, [r4, #20]
 8007b16:	b2f6      	uxtb	r6, r6
 8007b18:	4283      	cmp	r3, r0
 8007b1a:	4637      	mov	r7, r6
 8007b1c:	dc04      	bgt.n	8007b28 <__swbuf_r+0x3a>
 8007b1e:	4621      	mov	r1, r4
 8007b20:	4628      	mov	r0, r5
 8007b22:	f001 fdb9 	bl	8009698 <_fflush_r>
 8007b26:	b9e0      	cbnz	r0, 8007b62 <__swbuf_r+0x74>
 8007b28:	68a3      	ldr	r3, [r4, #8]
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	60a3      	str	r3, [r4, #8]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	6022      	str	r2, [r4, #0]
 8007b34:	701e      	strb	r6, [r3, #0]
 8007b36:	6962      	ldr	r2, [r4, #20]
 8007b38:	1c43      	adds	r3, r0, #1
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d004      	beq.n	8007b48 <__swbuf_r+0x5a>
 8007b3e:	89a3      	ldrh	r3, [r4, #12]
 8007b40:	07db      	lsls	r3, r3, #31
 8007b42:	d506      	bpl.n	8007b52 <__swbuf_r+0x64>
 8007b44:	2e0a      	cmp	r6, #10
 8007b46:	d104      	bne.n	8007b52 <__swbuf_r+0x64>
 8007b48:	4621      	mov	r1, r4
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f001 fda4 	bl	8009698 <_fflush_r>
 8007b50:	b938      	cbnz	r0, 8007b62 <__swbuf_r+0x74>
 8007b52:	4638      	mov	r0, r7
 8007b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 f805 	bl	8007b68 <__swsetup_r>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0d5      	beq.n	8007b0e <__swbuf_r+0x20>
 8007b62:	f04f 37ff 	mov.w	r7, #4294967295
 8007b66:	e7f4      	b.n	8007b52 <__swbuf_r+0x64>

08007b68 <__swsetup_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	4b2a      	ldr	r3, [pc, #168]	; (8007c14 <__swsetup_r+0xac>)
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	6818      	ldr	r0, [r3, #0]
 8007b70:	460c      	mov	r4, r1
 8007b72:	b118      	cbz	r0, 8007b7c <__swsetup_r+0x14>
 8007b74:	6a03      	ldr	r3, [r0, #32]
 8007b76:	b90b      	cbnz	r3, 8007b7c <__swsetup_r+0x14>
 8007b78:	f7ff fed2 	bl	8007920 <__sinit>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b82:	0718      	lsls	r0, r3, #28
 8007b84:	d422      	bmi.n	8007bcc <__swsetup_r+0x64>
 8007b86:	06d9      	lsls	r1, r3, #27
 8007b88:	d407      	bmi.n	8007b9a <__swsetup_r+0x32>
 8007b8a:	2309      	movs	r3, #9
 8007b8c:	602b      	str	r3, [r5, #0]
 8007b8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	f04f 30ff 	mov.w	r0, #4294967295
 8007b98:	e034      	b.n	8007c04 <__swsetup_r+0x9c>
 8007b9a:	0758      	lsls	r0, r3, #29
 8007b9c:	d512      	bpl.n	8007bc4 <__swsetup_r+0x5c>
 8007b9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ba0:	b141      	cbz	r1, 8007bb4 <__swsetup_r+0x4c>
 8007ba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d002      	beq.n	8007bb0 <__swsetup_r+0x48>
 8007baa:	4628      	mov	r0, r5
 8007bac:	f000 ff2e 	bl	8008a0c <_free_r>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	6363      	str	r3, [r4, #52]	; 0x34
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	6063      	str	r3, [r4, #4]
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	6023      	str	r3, [r4, #0]
 8007bc4:	89a3      	ldrh	r3, [r4, #12]
 8007bc6:	f043 0308 	orr.w	r3, r3, #8
 8007bca:	81a3      	strh	r3, [r4, #12]
 8007bcc:	6923      	ldr	r3, [r4, #16]
 8007bce:	b94b      	cbnz	r3, 8007be4 <__swsetup_r+0x7c>
 8007bd0:	89a3      	ldrh	r3, [r4, #12]
 8007bd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bda:	d003      	beq.n	8007be4 <__swsetup_r+0x7c>
 8007bdc:	4621      	mov	r1, r4
 8007bde:	4628      	mov	r0, r5
 8007be0:	f001 fda8 	bl	8009734 <__smakebuf_r>
 8007be4:	89a0      	ldrh	r0, [r4, #12]
 8007be6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007bea:	f010 0301 	ands.w	r3, r0, #1
 8007bee:	d00a      	beq.n	8007c06 <__swsetup_r+0x9e>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60a3      	str	r3, [r4, #8]
 8007bf4:	6963      	ldr	r3, [r4, #20]
 8007bf6:	425b      	negs	r3, r3
 8007bf8:	61a3      	str	r3, [r4, #24]
 8007bfa:	6923      	ldr	r3, [r4, #16]
 8007bfc:	b943      	cbnz	r3, 8007c10 <__swsetup_r+0xa8>
 8007bfe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c02:	d1c4      	bne.n	8007b8e <__swsetup_r+0x26>
 8007c04:	bd38      	pop	{r3, r4, r5, pc}
 8007c06:	0781      	lsls	r1, r0, #30
 8007c08:	bf58      	it	pl
 8007c0a:	6963      	ldrpl	r3, [r4, #20]
 8007c0c:	60a3      	str	r3, [r4, #8]
 8007c0e:	e7f4      	b.n	8007bfa <__swsetup_r+0x92>
 8007c10:	2000      	movs	r0, #0
 8007c12:	e7f7      	b.n	8007c04 <__swsetup_r+0x9c>
 8007c14:	20000064 	.word	0x20000064

08007c18 <memset>:
 8007c18:	4402      	add	r2, r0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d100      	bne.n	8007c22 <memset+0xa>
 8007c20:	4770      	bx	lr
 8007c22:	f803 1b01 	strb.w	r1, [r3], #1
 8007c26:	e7f9      	b.n	8007c1c <memset+0x4>

08007c28 <_localeconv_r>:
 8007c28:	4800      	ldr	r0, [pc, #0]	; (8007c2c <_localeconv_r+0x4>)
 8007c2a:	4770      	bx	lr
 8007c2c:	20000158 	.word	0x20000158

08007c30 <_close_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	; (8007c4c <_close_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f7fb fadb 	bl	80031f6 <_close>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_close_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_close_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	200004d0 	.word	0x200004d0

08007c50 <_lseek_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	; (8007c70 <_lseek_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fb faf0 	bl	8003244 <_lseek>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_lseek_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_lseek_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200004d0 	.word	0x200004d0

08007c74 <_read_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	; (8007c94 <_read_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7fb fa7e 	bl	8003184 <_read>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_read_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_read_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	200004d0 	.word	0x200004d0

08007c98 <_write_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	4d07      	ldr	r5, [pc, #28]	; (8007cb8 <_write_r+0x20>)
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	4608      	mov	r0, r1
 8007ca0:	4611      	mov	r1, r2
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	602a      	str	r2, [r5, #0]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f7fb fa89 	bl	80031be <_write>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_write_r+0x1e>
 8007cb0:	682b      	ldr	r3, [r5, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_write_r+0x1e>
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	200004d0 	.word	0x200004d0

08007cbc <__errno>:
 8007cbc:	4b01      	ldr	r3, [pc, #4]	; (8007cc4 <__errno+0x8>)
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	20000064 	.word	0x20000064

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	; (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	; (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	; (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	; (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f002 fd90 	bl	800a800 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	0800b290 	.word	0x0800b290
 8007d04:	0800b290 	.word	0x0800b290
 8007d08:	0800b290 	.word	0x0800b290
 8007d0c:	0800b294 	.word	0x0800b294

08007d10 <__retarget_lock_init_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_acquire_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <__retarget_lock_release_recursive>:
 8007d14:	4770      	bx	lr

08007d16 <quorem>:
 8007d16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d1a:	6903      	ldr	r3, [r0, #16]
 8007d1c:	690c      	ldr	r4, [r1, #16]
 8007d1e:	42a3      	cmp	r3, r4
 8007d20:	4607      	mov	r7, r0
 8007d22:	db7e      	blt.n	8007e22 <quorem+0x10c>
 8007d24:	3c01      	subs	r4, #1
 8007d26:	f101 0814 	add.w	r8, r1, #20
 8007d2a:	f100 0514 	add.w	r5, r0, #20
 8007d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d4c:	d331      	bcc.n	8007db2 <quorem+0x9c>
 8007d4e:	f04f 0e00 	mov.w	lr, #0
 8007d52:	4640      	mov	r0, r8
 8007d54:	46ac      	mov	ip, r5
 8007d56:	46f2      	mov	sl, lr
 8007d58:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d5c:	b293      	uxth	r3, r2
 8007d5e:	fb06 e303 	mla	r3, r6, r3, lr
 8007d62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d66:	0c1a      	lsrs	r2, r3, #16
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	ebaa 0303 	sub.w	r3, sl, r3
 8007d6e:	f8dc a000 	ldr.w	sl, [ip]
 8007d72:	fa13 f38a 	uxtah	r3, r3, sl
 8007d76:	fb06 220e 	mla	r2, r6, lr, r2
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007d82:	b292      	uxth	r2, r2
 8007d84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007d90:	4581      	cmp	r9, r0
 8007d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d96:	f84c 3b04 	str.w	r3, [ip], #4
 8007d9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007d9e:	d2db      	bcs.n	8007d58 <quorem+0x42>
 8007da0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007da4:	b92b      	cbnz	r3, 8007db2 <quorem+0x9c>
 8007da6:	9b01      	ldr	r3, [sp, #4]
 8007da8:	3b04      	subs	r3, #4
 8007daa:	429d      	cmp	r5, r3
 8007dac:	461a      	mov	r2, r3
 8007dae:	d32c      	bcc.n	8007e0a <quorem+0xf4>
 8007db0:	613c      	str	r4, [r7, #16]
 8007db2:	4638      	mov	r0, r7
 8007db4:	f001 f9a6 	bl	8009104 <__mcmp>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	db22      	blt.n	8007e02 <quorem+0xec>
 8007dbc:	3601      	adds	r6, #1
 8007dbe:	4629      	mov	r1, r5
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dc6:	f8d1 c000 	ldr.w	ip, [r1]
 8007dca:	b293      	uxth	r3, r2
 8007dcc:	1ac3      	subs	r3, r0, r3
 8007dce:	0c12      	lsrs	r2, r2, #16
 8007dd0:	fa13 f38c 	uxtah	r3, r3, ip
 8007dd4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007dd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de2:	45c1      	cmp	r9, r8
 8007de4:	f841 3b04 	str.w	r3, [r1], #4
 8007de8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007dec:	d2e9      	bcs.n	8007dc2 <quorem+0xac>
 8007dee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007df2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007df6:	b922      	cbnz	r2, 8007e02 <quorem+0xec>
 8007df8:	3b04      	subs	r3, #4
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	d30a      	bcc.n	8007e16 <quorem+0x100>
 8007e00:	613c      	str	r4, [r7, #16]
 8007e02:	4630      	mov	r0, r6
 8007e04:	b003      	add	sp, #12
 8007e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e0a:	6812      	ldr	r2, [r2, #0]
 8007e0c:	3b04      	subs	r3, #4
 8007e0e:	2a00      	cmp	r2, #0
 8007e10:	d1ce      	bne.n	8007db0 <quorem+0x9a>
 8007e12:	3c01      	subs	r4, #1
 8007e14:	e7c9      	b.n	8007daa <quorem+0x94>
 8007e16:	6812      	ldr	r2, [r2, #0]
 8007e18:	3b04      	subs	r3, #4
 8007e1a:	2a00      	cmp	r2, #0
 8007e1c:	d1f0      	bne.n	8007e00 <quorem+0xea>
 8007e1e:	3c01      	subs	r4, #1
 8007e20:	e7eb      	b.n	8007dfa <quorem+0xe4>
 8007e22:	2000      	movs	r0, #0
 8007e24:	e7ee      	b.n	8007e04 <quorem+0xee>
	...

08007e28 <_dtoa_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	ed2d 8b04 	vpush	{d8-d9}
 8007e30:	69c5      	ldr	r5, [r0, #28]
 8007e32:	b093      	sub	sp, #76	; 0x4c
 8007e34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e38:	ec57 6b10 	vmov	r6, r7, d0
 8007e3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e40:	9107      	str	r1, [sp, #28]
 8007e42:	4604      	mov	r4, r0
 8007e44:	920a      	str	r2, [sp, #40]	; 0x28
 8007e46:	930d      	str	r3, [sp, #52]	; 0x34
 8007e48:	b975      	cbnz	r5, 8007e68 <_dtoa_r+0x40>
 8007e4a:	2010      	movs	r0, #16
 8007e4c:	f000 fe2a 	bl	8008aa4 <malloc>
 8007e50:	4602      	mov	r2, r0
 8007e52:	61e0      	str	r0, [r4, #28]
 8007e54:	b920      	cbnz	r0, 8007e60 <_dtoa_r+0x38>
 8007e56:	4bae      	ldr	r3, [pc, #696]	; (8008110 <_dtoa_r+0x2e8>)
 8007e58:	21ef      	movs	r1, #239	; 0xef
 8007e5a:	48ae      	ldr	r0, [pc, #696]	; (8008114 <_dtoa_r+0x2ec>)
 8007e5c:	f001 fce6 	bl	800982c <__assert_func>
 8007e60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e64:	6005      	str	r5, [r0, #0]
 8007e66:	60c5      	str	r5, [r0, #12]
 8007e68:	69e3      	ldr	r3, [r4, #28]
 8007e6a:	6819      	ldr	r1, [r3, #0]
 8007e6c:	b151      	cbz	r1, 8007e84 <_dtoa_r+0x5c>
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	604a      	str	r2, [r1, #4]
 8007e72:	2301      	movs	r3, #1
 8007e74:	4093      	lsls	r3, r2
 8007e76:	608b      	str	r3, [r1, #8]
 8007e78:	4620      	mov	r0, r4
 8007e7a:	f000 ff07 	bl	8008c8c <_Bfree>
 8007e7e:	69e3      	ldr	r3, [r4, #28]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	1e3b      	subs	r3, r7, #0
 8007e86:	bfbb      	ittet	lt
 8007e88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e8c:	9303      	strlt	r3, [sp, #12]
 8007e8e:	2300      	movge	r3, #0
 8007e90:	2201      	movlt	r2, #1
 8007e92:	bfac      	ite	ge
 8007e94:	f8c8 3000 	strge.w	r3, [r8]
 8007e98:	f8c8 2000 	strlt.w	r2, [r8]
 8007e9c:	4b9e      	ldr	r3, [pc, #632]	; (8008118 <_dtoa_r+0x2f0>)
 8007e9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007ea2:	ea33 0308 	bics.w	r3, r3, r8
 8007ea6:	d11b      	bne.n	8007ee0 <_dtoa_r+0xb8>
 8007ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007eaa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007eb4:	4333      	orrs	r3, r6
 8007eb6:	f000 8593 	beq.w	80089e0 <_dtoa_r+0xbb8>
 8007eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ebc:	b963      	cbnz	r3, 8007ed8 <_dtoa_r+0xb0>
 8007ebe:	4b97      	ldr	r3, [pc, #604]	; (800811c <_dtoa_r+0x2f4>)
 8007ec0:	e027      	b.n	8007f12 <_dtoa_r+0xea>
 8007ec2:	4b97      	ldr	r3, [pc, #604]	; (8008120 <_dtoa_r+0x2f8>)
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	9800      	ldr	r0, [sp, #0]
 8007ece:	b013      	add	sp, #76	; 0x4c
 8007ed0:	ecbd 8b04 	vpop	{d8-d9}
 8007ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed8:	4b90      	ldr	r3, [pc, #576]	; (800811c <_dtoa_r+0x2f4>)
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	3303      	adds	r3, #3
 8007ede:	e7f3      	b.n	8007ec8 <_dtoa_r+0xa0>
 8007ee0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	ec51 0b17 	vmov	r0, r1, d7
 8007eea:	eeb0 8a47 	vmov.f32	s16, s14
 8007eee:	eef0 8a67 	vmov.f32	s17, s15
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f7f8 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef8:	4681      	mov	r9, r0
 8007efa:	b160      	cbz	r0, 8007f16 <_dtoa_r+0xee>
 8007efc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007efe:	2301      	movs	r3, #1
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8568 	beq.w	80089da <_dtoa_r+0xbb2>
 8007f0a:	4b86      	ldr	r3, [pc, #536]	; (8008124 <_dtoa_r+0x2fc>)
 8007f0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	e7da      	b.n	8007ecc <_dtoa_r+0xa4>
 8007f16:	aa10      	add	r2, sp, #64	; 0x40
 8007f18:	a911      	add	r1, sp, #68	; 0x44
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	eeb0 0a48 	vmov.f32	s0, s16
 8007f20:	eef0 0a68 	vmov.f32	s1, s17
 8007f24:	f001 f994 	bl	8009250 <__d2b>
 8007f28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	2d00      	cmp	r5, #0
 8007f30:	d07f      	beq.n	8008032 <_dtoa_r+0x20a>
 8007f32:	ee18 3a90 	vmov	r3, s17
 8007f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007f3e:	ec51 0b18 	vmov	r0, r1, d8
 8007f42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007f46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007f4e:	4619      	mov	r1, r3
 8007f50:	2200      	movs	r2, #0
 8007f52:	4b75      	ldr	r3, [pc, #468]	; (8008128 <_dtoa_r+0x300>)
 8007f54:	f7f8 f998 	bl	8000288 <__aeabi_dsub>
 8007f58:	a367      	add	r3, pc, #412	; (adr r3, 80080f8 <_dtoa_r+0x2d0>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 fb4b 	bl	80005f8 <__aeabi_dmul>
 8007f62:	a367      	add	r3, pc, #412	; (adr r3, 8008100 <_dtoa_r+0x2d8>)
 8007f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f68:	f7f8 f990 	bl	800028c <__adddf3>
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	4628      	mov	r0, r5
 8007f70:	460f      	mov	r7, r1
 8007f72:	f7f8 fad7 	bl	8000524 <__aeabi_i2d>
 8007f76:	a364      	add	r3, pc, #400	; (adr r3, 8008108 <_dtoa_r+0x2e0>)
 8007f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7c:	f7f8 fb3c 	bl	80005f8 <__aeabi_dmul>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 f980 	bl	800028c <__adddf3>
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	f7f8 fde2 	bl	8000b58 <__aeabi_d2iz>
 8007f94:	2200      	movs	r2, #0
 8007f96:	4683      	mov	fp, r0
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4639      	mov	r1, r7
 8007f9e:	f7f8 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8007fa2:	b148      	cbz	r0, 8007fb8 <_dtoa_r+0x190>
 8007fa4:	4658      	mov	r0, fp
 8007fa6:	f7f8 fabd 	bl	8000524 <__aeabi_i2d>
 8007faa:	4632      	mov	r2, r6
 8007fac:	463b      	mov	r3, r7
 8007fae:	f7f8 fd8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fb2:	b908      	cbnz	r0, 8007fb8 <_dtoa_r+0x190>
 8007fb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fb8:	f1bb 0f16 	cmp.w	fp, #22
 8007fbc:	d857      	bhi.n	800806e <_dtoa_r+0x246>
 8007fbe:	4b5b      	ldr	r3, [pc, #364]	; (800812c <_dtoa_r+0x304>)
 8007fc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	ec51 0b18 	vmov	r0, r1, d8
 8007fcc:	f7f8 fd86 	bl	8000adc <__aeabi_dcmplt>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d04e      	beq.n	8008072 <_dtoa_r+0x24a>
 8007fd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007fd8:	2300      	movs	r3, #0
 8007fda:	930c      	str	r3, [sp, #48]	; 0x30
 8007fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007fde:	1b5b      	subs	r3, r3, r5
 8007fe0:	1e5a      	subs	r2, r3, #1
 8007fe2:	bf45      	ittet	mi
 8007fe4:	f1c3 0301 	rsbmi	r3, r3, #1
 8007fe8:	9305      	strmi	r3, [sp, #20]
 8007fea:	2300      	movpl	r3, #0
 8007fec:	2300      	movmi	r3, #0
 8007fee:	9206      	str	r2, [sp, #24]
 8007ff0:	bf54      	ite	pl
 8007ff2:	9305      	strpl	r3, [sp, #20]
 8007ff4:	9306      	strmi	r3, [sp, #24]
 8007ff6:	f1bb 0f00 	cmp.w	fp, #0
 8007ffa:	db3c      	blt.n	8008076 <_dtoa_r+0x24e>
 8007ffc:	9b06      	ldr	r3, [sp, #24]
 8007ffe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008002:	445b      	add	r3, fp
 8008004:	9306      	str	r3, [sp, #24]
 8008006:	2300      	movs	r3, #0
 8008008:	9308      	str	r3, [sp, #32]
 800800a:	9b07      	ldr	r3, [sp, #28]
 800800c:	2b09      	cmp	r3, #9
 800800e:	d868      	bhi.n	80080e2 <_dtoa_r+0x2ba>
 8008010:	2b05      	cmp	r3, #5
 8008012:	bfc4      	itt	gt
 8008014:	3b04      	subgt	r3, #4
 8008016:	9307      	strgt	r3, [sp, #28]
 8008018:	9b07      	ldr	r3, [sp, #28]
 800801a:	f1a3 0302 	sub.w	r3, r3, #2
 800801e:	bfcc      	ite	gt
 8008020:	2500      	movgt	r5, #0
 8008022:	2501      	movle	r5, #1
 8008024:	2b03      	cmp	r3, #3
 8008026:	f200 8085 	bhi.w	8008134 <_dtoa_r+0x30c>
 800802a:	e8df f003 	tbb	[pc, r3]
 800802e:	3b2e      	.short	0x3b2e
 8008030:	5839      	.short	0x5839
 8008032:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008036:	441d      	add	r5, r3
 8008038:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800803c:	2b20      	cmp	r3, #32
 800803e:	bfc1      	itttt	gt
 8008040:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008044:	fa08 f803 	lslgt.w	r8, r8, r3
 8008048:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800804c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008050:	bfd6      	itet	le
 8008052:	f1c3 0320 	rsble	r3, r3, #32
 8008056:	ea48 0003 	orrgt.w	r0, r8, r3
 800805a:	fa06 f003 	lslle.w	r0, r6, r3
 800805e:	f7f8 fa51 	bl	8000504 <__aeabi_ui2d>
 8008062:	2201      	movs	r2, #1
 8008064:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008068:	3d01      	subs	r5, #1
 800806a:	920e      	str	r2, [sp, #56]	; 0x38
 800806c:	e76f      	b.n	8007f4e <_dtoa_r+0x126>
 800806e:	2301      	movs	r3, #1
 8008070:	e7b3      	b.n	8007fda <_dtoa_r+0x1b2>
 8008072:	900c      	str	r0, [sp, #48]	; 0x30
 8008074:	e7b2      	b.n	8007fdc <_dtoa_r+0x1b4>
 8008076:	9b05      	ldr	r3, [sp, #20]
 8008078:	eba3 030b 	sub.w	r3, r3, fp
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	f1cb 0300 	rsb	r3, fp, #0
 8008082:	9308      	str	r3, [sp, #32]
 8008084:	2300      	movs	r3, #0
 8008086:	930b      	str	r3, [sp, #44]	; 0x2c
 8008088:	e7bf      	b.n	800800a <_dtoa_r+0x1e2>
 800808a:	2300      	movs	r3, #0
 800808c:	9309      	str	r3, [sp, #36]	; 0x24
 800808e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc52      	bgt.n	800813a <_dtoa_r+0x312>
 8008094:	2301      	movs	r3, #1
 8008096:	9301      	str	r3, [sp, #4]
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	461a      	mov	r2, r3
 800809c:	920a      	str	r2, [sp, #40]	; 0x28
 800809e:	e00b      	b.n	80080b8 <_dtoa_r+0x290>
 80080a0:	2301      	movs	r3, #1
 80080a2:	e7f3      	b.n	800808c <_dtoa_r+0x264>
 80080a4:	2300      	movs	r3, #0
 80080a6:	9309      	str	r3, [sp, #36]	; 0x24
 80080a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080aa:	445b      	add	r3, fp
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	3301      	adds	r3, #1
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	bfb8      	it	lt
 80080b6:	2301      	movlt	r3, #1
 80080b8:	69e0      	ldr	r0, [r4, #28]
 80080ba:	2100      	movs	r1, #0
 80080bc:	2204      	movs	r2, #4
 80080be:	f102 0614 	add.w	r6, r2, #20
 80080c2:	429e      	cmp	r6, r3
 80080c4:	d93d      	bls.n	8008142 <_dtoa_r+0x31a>
 80080c6:	6041      	str	r1, [r0, #4]
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fd9f 	bl	8008c0c <_Balloc>
 80080ce:	9000      	str	r0, [sp, #0]
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d139      	bne.n	8008148 <_dtoa_r+0x320>
 80080d4:	4b16      	ldr	r3, [pc, #88]	; (8008130 <_dtoa_r+0x308>)
 80080d6:	4602      	mov	r2, r0
 80080d8:	f240 11af 	movw	r1, #431	; 0x1af
 80080dc:	e6bd      	b.n	8007e5a <_dtoa_r+0x32>
 80080de:	2301      	movs	r3, #1
 80080e0:	e7e1      	b.n	80080a6 <_dtoa_r+0x27e>
 80080e2:	2501      	movs	r5, #1
 80080e4:	2300      	movs	r3, #0
 80080e6:	9307      	str	r3, [sp, #28]
 80080e8:	9509      	str	r5, [sp, #36]	; 0x24
 80080ea:	f04f 33ff 	mov.w	r3, #4294967295
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	2200      	movs	r2, #0
 80080f4:	2312      	movs	r3, #18
 80080f6:	e7d1      	b.n	800809c <_dtoa_r+0x274>
 80080f8:	636f4361 	.word	0x636f4361
 80080fc:	3fd287a7 	.word	0x3fd287a7
 8008100:	8b60c8b3 	.word	0x8b60c8b3
 8008104:	3fc68a28 	.word	0x3fc68a28
 8008108:	509f79fb 	.word	0x509f79fb
 800810c:	3fd34413 	.word	0x3fd34413
 8008110:	0800af21 	.word	0x0800af21
 8008114:	0800af38 	.word	0x0800af38
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	0800af1d 	.word	0x0800af1d
 8008120:	0800af14 	.word	0x0800af14
 8008124:	0800aef1 	.word	0x0800aef1
 8008128:	3ff80000 	.word	0x3ff80000
 800812c:	0800b028 	.word	0x0800b028
 8008130:	0800af90 	.word	0x0800af90
 8008134:	2301      	movs	r3, #1
 8008136:	9309      	str	r3, [sp, #36]	; 0x24
 8008138:	e7d7      	b.n	80080ea <_dtoa_r+0x2c2>
 800813a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	e7ba      	b.n	80080b8 <_dtoa_r+0x290>
 8008142:	3101      	adds	r1, #1
 8008144:	0052      	lsls	r2, r2, #1
 8008146:	e7ba      	b.n	80080be <_dtoa_r+0x296>
 8008148:	69e3      	ldr	r3, [r4, #28]
 800814a:	9a00      	ldr	r2, [sp, #0]
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	2b0e      	cmp	r3, #14
 8008152:	f200 80a8 	bhi.w	80082a6 <_dtoa_r+0x47e>
 8008156:	2d00      	cmp	r5, #0
 8008158:	f000 80a5 	beq.w	80082a6 <_dtoa_r+0x47e>
 800815c:	f1bb 0f00 	cmp.w	fp, #0
 8008160:	dd38      	ble.n	80081d4 <_dtoa_r+0x3ac>
 8008162:	4bc0      	ldr	r3, [pc, #768]	; (8008464 <_dtoa_r+0x63c>)
 8008164:	f00b 020f 	and.w	r2, fp, #15
 8008168:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800816c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008170:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008174:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008178:	d019      	beq.n	80081ae <_dtoa_r+0x386>
 800817a:	4bbb      	ldr	r3, [pc, #748]	; (8008468 <_dtoa_r+0x640>)
 800817c:	ec51 0b18 	vmov	r0, r1, d8
 8008180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008184:	f7f8 fb62 	bl	800084c <__aeabi_ddiv>
 8008188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800818c:	f008 080f 	and.w	r8, r8, #15
 8008190:	2503      	movs	r5, #3
 8008192:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008468 <_dtoa_r+0x640>
 8008196:	f1b8 0f00 	cmp.w	r8, #0
 800819a:	d10a      	bne.n	80081b2 <_dtoa_r+0x38a>
 800819c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081a0:	4632      	mov	r2, r6
 80081a2:	463b      	mov	r3, r7
 80081a4:	f7f8 fb52 	bl	800084c <__aeabi_ddiv>
 80081a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ac:	e02b      	b.n	8008206 <_dtoa_r+0x3de>
 80081ae:	2502      	movs	r5, #2
 80081b0:	e7ef      	b.n	8008192 <_dtoa_r+0x36a>
 80081b2:	f018 0f01 	tst.w	r8, #1
 80081b6:	d008      	beq.n	80081ca <_dtoa_r+0x3a2>
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80081c0:	f7f8 fa1a 	bl	80005f8 <__aeabi_dmul>
 80081c4:	3501      	adds	r5, #1
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80081ce:	f109 0908 	add.w	r9, r9, #8
 80081d2:	e7e0      	b.n	8008196 <_dtoa_r+0x36e>
 80081d4:	f000 809f 	beq.w	8008316 <_dtoa_r+0x4ee>
 80081d8:	f1cb 0600 	rsb	r6, fp, #0
 80081dc:	4ba1      	ldr	r3, [pc, #644]	; (8008464 <_dtoa_r+0x63c>)
 80081de:	4fa2      	ldr	r7, [pc, #648]	; (8008468 <_dtoa_r+0x640>)
 80081e0:	f006 020f 	and.w	r2, r6, #15
 80081e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ec:	ec51 0b18 	vmov	r0, r1, d8
 80081f0:	f7f8 fa02 	bl	80005f8 <__aeabi_dmul>
 80081f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081f8:	1136      	asrs	r6, r6, #4
 80081fa:	2300      	movs	r3, #0
 80081fc:	2502      	movs	r5, #2
 80081fe:	2e00      	cmp	r6, #0
 8008200:	d17e      	bne.n	8008300 <_dtoa_r+0x4d8>
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1d0      	bne.n	80081a8 <_dtoa_r+0x380>
 8008206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008208:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8084 	beq.w	800831a <_dtoa_r+0x4f2>
 8008212:	4b96      	ldr	r3, [pc, #600]	; (800846c <_dtoa_r+0x644>)
 8008214:	2200      	movs	r2, #0
 8008216:	4640      	mov	r0, r8
 8008218:	4649      	mov	r1, r9
 800821a:	f7f8 fc5f 	bl	8000adc <__aeabi_dcmplt>
 800821e:	2800      	cmp	r0, #0
 8008220:	d07b      	beq.n	800831a <_dtoa_r+0x4f2>
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d078      	beq.n	800831a <_dtoa_r+0x4f2>
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dd39      	ble.n	80082a2 <_dtoa_r+0x47a>
 800822e:	4b90      	ldr	r3, [pc, #576]	; (8008470 <_dtoa_r+0x648>)
 8008230:	2200      	movs	r2, #0
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	f7f8 f9df 	bl	80005f8 <__aeabi_dmul>
 800823a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800823e:	9e01      	ldr	r6, [sp, #4]
 8008240:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008244:	3501      	adds	r5, #1
 8008246:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800824a:	4628      	mov	r0, r5
 800824c:	f7f8 f96a 	bl	8000524 <__aeabi_i2d>
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	f7f8 f9d0 	bl	80005f8 <__aeabi_dmul>
 8008258:	4b86      	ldr	r3, [pc, #536]	; (8008474 <_dtoa_r+0x64c>)
 800825a:	2200      	movs	r2, #0
 800825c:	f7f8 f816 	bl	800028c <__adddf3>
 8008260:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008264:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008268:	9303      	str	r3, [sp, #12]
 800826a:	2e00      	cmp	r6, #0
 800826c:	d158      	bne.n	8008320 <_dtoa_r+0x4f8>
 800826e:	4b82      	ldr	r3, [pc, #520]	; (8008478 <_dtoa_r+0x650>)
 8008270:	2200      	movs	r2, #0
 8008272:	4640      	mov	r0, r8
 8008274:	4649      	mov	r1, r9
 8008276:	f7f8 f807 	bl	8000288 <__aeabi_dsub>
 800827a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800827e:	4680      	mov	r8, r0
 8008280:	4689      	mov	r9, r1
 8008282:	f7f8 fc49 	bl	8000b18 <__aeabi_dcmpgt>
 8008286:	2800      	cmp	r0, #0
 8008288:	f040 8296 	bne.w	80087b8 <_dtoa_r+0x990>
 800828c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008290:	4640      	mov	r0, r8
 8008292:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008296:	4649      	mov	r1, r9
 8008298:	f7f8 fc20 	bl	8000adc <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	f040 8289 	bne.w	80087b4 <_dtoa_r+0x98c>
 80082a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80082a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f2c0 814e 	blt.w	800854a <_dtoa_r+0x722>
 80082ae:	f1bb 0f0e 	cmp.w	fp, #14
 80082b2:	f300 814a 	bgt.w	800854a <_dtoa_r+0x722>
 80082b6:	4b6b      	ldr	r3, [pc, #428]	; (8008464 <_dtoa_r+0x63c>)
 80082b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80082bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f280 80dc 	bge.w	8008480 <_dtoa_r+0x658>
 80082c8:	9b04      	ldr	r3, [sp, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f300 80d8 	bgt.w	8008480 <_dtoa_r+0x658>
 80082d0:	f040 826f 	bne.w	80087b2 <_dtoa_r+0x98a>
 80082d4:	4b68      	ldr	r3, [pc, #416]	; (8008478 <_dtoa_r+0x650>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	4640      	mov	r0, r8
 80082da:	4649      	mov	r1, r9
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082e4:	f7f8 fc0e 	bl	8000b04 <__aeabi_dcmpge>
 80082e8:	9e04      	ldr	r6, [sp, #16]
 80082ea:	4637      	mov	r7, r6
 80082ec:	2800      	cmp	r0, #0
 80082ee:	f040 8245 	bne.w	800877c <_dtoa_r+0x954>
 80082f2:	9d00      	ldr	r5, [sp, #0]
 80082f4:	2331      	movs	r3, #49	; 0x31
 80082f6:	f805 3b01 	strb.w	r3, [r5], #1
 80082fa:	f10b 0b01 	add.w	fp, fp, #1
 80082fe:	e241      	b.n	8008784 <_dtoa_r+0x95c>
 8008300:	07f2      	lsls	r2, r6, #31
 8008302:	d505      	bpl.n	8008310 <_dtoa_r+0x4e8>
 8008304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008308:	f7f8 f976 	bl	80005f8 <__aeabi_dmul>
 800830c:	3501      	adds	r5, #1
 800830e:	2301      	movs	r3, #1
 8008310:	1076      	asrs	r6, r6, #1
 8008312:	3708      	adds	r7, #8
 8008314:	e773      	b.n	80081fe <_dtoa_r+0x3d6>
 8008316:	2502      	movs	r5, #2
 8008318:	e775      	b.n	8008206 <_dtoa_r+0x3de>
 800831a:	9e04      	ldr	r6, [sp, #16]
 800831c:	465f      	mov	r7, fp
 800831e:	e792      	b.n	8008246 <_dtoa_r+0x41e>
 8008320:	9900      	ldr	r1, [sp, #0]
 8008322:	4b50      	ldr	r3, [pc, #320]	; (8008464 <_dtoa_r+0x63c>)
 8008324:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008328:	4431      	add	r1, r6
 800832a:	9102      	str	r1, [sp, #8]
 800832c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800832e:	eeb0 9a47 	vmov.f32	s18, s14
 8008332:	eef0 9a67 	vmov.f32	s19, s15
 8008336:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800833a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800833e:	2900      	cmp	r1, #0
 8008340:	d044      	beq.n	80083cc <_dtoa_r+0x5a4>
 8008342:	494e      	ldr	r1, [pc, #312]	; (800847c <_dtoa_r+0x654>)
 8008344:	2000      	movs	r0, #0
 8008346:	f7f8 fa81 	bl	800084c <__aeabi_ddiv>
 800834a:	ec53 2b19 	vmov	r2, r3, d9
 800834e:	f7f7 ff9b 	bl	8000288 <__aeabi_dsub>
 8008352:	9d00      	ldr	r5, [sp, #0]
 8008354:	ec41 0b19 	vmov	d9, r0, r1
 8008358:	4649      	mov	r1, r9
 800835a:	4640      	mov	r0, r8
 800835c:	f7f8 fbfc 	bl	8000b58 <__aeabi_d2iz>
 8008360:	4606      	mov	r6, r0
 8008362:	f7f8 f8df 	bl	8000524 <__aeabi_i2d>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	4640      	mov	r0, r8
 800836c:	4649      	mov	r1, r9
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	3630      	adds	r6, #48	; 0x30
 8008374:	f805 6b01 	strb.w	r6, [r5], #1
 8008378:	ec53 2b19 	vmov	r2, r3, d9
 800837c:	4680      	mov	r8, r0
 800837e:	4689      	mov	r9, r1
 8008380:	f7f8 fbac 	bl	8000adc <__aeabi_dcmplt>
 8008384:	2800      	cmp	r0, #0
 8008386:	d164      	bne.n	8008452 <_dtoa_r+0x62a>
 8008388:	4642      	mov	r2, r8
 800838a:	464b      	mov	r3, r9
 800838c:	4937      	ldr	r1, [pc, #220]	; (800846c <_dtoa_r+0x644>)
 800838e:	2000      	movs	r0, #0
 8008390:	f7f7 ff7a 	bl	8000288 <__aeabi_dsub>
 8008394:	ec53 2b19 	vmov	r2, r3, d9
 8008398:	f7f8 fba0 	bl	8000adc <__aeabi_dcmplt>
 800839c:	2800      	cmp	r0, #0
 800839e:	f040 80b6 	bne.w	800850e <_dtoa_r+0x6e6>
 80083a2:	9b02      	ldr	r3, [sp, #8]
 80083a4:	429d      	cmp	r5, r3
 80083a6:	f43f af7c 	beq.w	80082a2 <_dtoa_r+0x47a>
 80083aa:	4b31      	ldr	r3, [pc, #196]	; (8008470 <_dtoa_r+0x648>)
 80083ac:	ec51 0b19 	vmov	r0, r1, d9
 80083b0:	2200      	movs	r2, #0
 80083b2:	f7f8 f921 	bl	80005f8 <__aeabi_dmul>
 80083b6:	4b2e      	ldr	r3, [pc, #184]	; (8008470 <_dtoa_r+0x648>)
 80083b8:	ec41 0b19 	vmov	d9, r0, r1
 80083bc:	2200      	movs	r2, #0
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 f919 	bl	80005f8 <__aeabi_dmul>
 80083c6:	4680      	mov	r8, r0
 80083c8:	4689      	mov	r9, r1
 80083ca:	e7c5      	b.n	8008358 <_dtoa_r+0x530>
 80083cc:	ec51 0b17 	vmov	r0, r1, d7
 80083d0:	f7f8 f912 	bl	80005f8 <__aeabi_dmul>
 80083d4:	9b02      	ldr	r3, [sp, #8]
 80083d6:	9d00      	ldr	r5, [sp, #0]
 80083d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80083da:	ec41 0b19 	vmov	d9, r0, r1
 80083de:	4649      	mov	r1, r9
 80083e0:	4640      	mov	r0, r8
 80083e2:	f7f8 fbb9 	bl	8000b58 <__aeabi_d2iz>
 80083e6:	4606      	mov	r6, r0
 80083e8:	f7f8 f89c 	bl	8000524 <__aeabi_i2d>
 80083ec:	3630      	adds	r6, #48	; 0x30
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4640      	mov	r0, r8
 80083f4:	4649      	mov	r1, r9
 80083f6:	f7f7 ff47 	bl	8000288 <__aeabi_dsub>
 80083fa:	f805 6b01 	strb.w	r6, [r5], #1
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	429d      	cmp	r5, r3
 8008402:	4680      	mov	r8, r0
 8008404:	4689      	mov	r9, r1
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	d124      	bne.n	8008456 <_dtoa_r+0x62e>
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <_dtoa_r+0x654>)
 800840e:	ec51 0b19 	vmov	r0, r1, d9
 8008412:	f7f7 ff3b 	bl	800028c <__adddf3>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4640      	mov	r0, r8
 800841c:	4649      	mov	r1, r9
 800841e:	f7f8 fb7b 	bl	8000b18 <__aeabi_dcmpgt>
 8008422:	2800      	cmp	r0, #0
 8008424:	d173      	bne.n	800850e <_dtoa_r+0x6e6>
 8008426:	ec53 2b19 	vmov	r2, r3, d9
 800842a:	4914      	ldr	r1, [pc, #80]	; (800847c <_dtoa_r+0x654>)
 800842c:	2000      	movs	r0, #0
 800842e:	f7f7 ff2b 	bl	8000288 <__aeabi_dsub>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	4640      	mov	r0, r8
 8008438:	4649      	mov	r1, r9
 800843a:	f7f8 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800843e:	2800      	cmp	r0, #0
 8008440:	f43f af2f 	beq.w	80082a2 <_dtoa_r+0x47a>
 8008444:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008446:	1e6b      	subs	r3, r5, #1
 8008448:	930f      	str	r3, [sp, #60]	; 0x3c
 800844a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800844e:	2b30      	cmp	r3, #48	; 0x30
 8008450:	d0f8      	beq.n	8008444 <_dtoa_r+0x61c>
 8008452:	46bb      	mov	fp, r7
 8008454:	e04a      	b.n	80084ec <_dtoa_r+0x6c4>
 8008456:	4b06      	ldr	r3, [pc, #24]	; (8008470 <_dtoa_r+0x648>)
 8008458:	f7f8 f8ce 	bl	80005f8 <__aeabi_dmul>
 800845c:	4680      	mov	r8, r0
 800845e:	4689      	mov	r9, r1
 8008460:	e7bd      	b.n	80083de <_dtoa_r+0x5b6>
 8008462:	bf00      	nop
 8008464:	0800b028 	.word	0x0800b028
 8008468:	0800b000 	.word	0x0800b000
 800846c:	3ff00000 	.word	0x3ff00000
 8008470:	40240000 	.word	0x40240000
 8008474:	401c0000 	.word	0x401c0000
 8008478:	40140000 	.word	0x40140000
 800847c:	3fe00000 	.word	0x3fe00000
 8008480:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008484:	9d00      	ldr	r5, [sp, #0]
 8008486:	4642      	mov	r2, r8
 8008488:	464b      	mov	r3, r9
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f8 f9dd 	bl	800084c <__aeabi_ddiv>
 8008492:	f7f8 fb61 	bl	8000b58 <__aeabi_d2iz>
 8008496:	9001      	str	r0, [sp, #4]
 8008498:	f7f8 f844 	bl	8000524 <__aeabi_i2d>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f7f8 f8aa 	bl	80005f8 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 feec 	bl	8000288 <__aeabi_dsub>
 80084b0:	9e01      	ldr	r6, [sp, #4]
 80084b2:	9f04      	ldr	r7, [sp, #16]
 80084b4:	3630      	adds	r6, #48	; 0x30
 80084b6:	f805 6b01 	strb.w	r6, [r5], #1
 80084ba:	9e00      	ldr	r6, [sp, #0]
 80084bc:	1bae      	subs	r6, r5, r6
 80084be:	42b7      	cmp	r7, r6
 80084c0:	4602      	mov	r2, r0
 80084c2:	460b      	mov	r3, r1
 80084c4:	d134      	bne.n	8008530 <_dtoa_r+0x708>
 80084c6:	f7f7 fee1 	bl	800028c <__adddf3>
 80084ca:	4642      	mov	r2, r8
 80084cc:	464b      	mov	r3, r9
 80084ce:	4606      	mov	r6, r0
 80084d0:	460f      	mov	r7, r1
 80084d2:	f7f8 fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80084d6:	b9c8      	cbnz	r0, 800850c <_dtoa_r+0x6e4>
 80084d8:	4642      	mov	r2, r8
 80084da:	464b      	mov	r3, r9
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f8 faf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80084e4:	b110      	cbz	r0, 80084ec <_dtoa_r+0x6c4>
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	07db      	lsls	r3, r3, #31
 80084ea:	d40f      	bmi.n	800850c <_dtoa_r+0x6e4>
 80084ec:	4651      	mov	r1, sl
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fbcc 	bl	8008c8c <_Bfree>
 80084f4:	2300      	movs	r3, #0
 80084f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f8:	702b      	strb	r3, [r5, #0]
 80084fa:	f10b 0301 	add.w	r3, fp, #1
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008502:	2b00      	cmp	r3, #0
 8008504:	f43f ace2 	beq.w	8007ecc <_dtoa_r+0xa4>
 8008508:	601d      	str	r5, [r3, #0]
 800850a:	e4df      	b.n	8007ecc <_dtoa_r+0xa4>
 800850c:	465f      	mov	r7, fp
 800850e:	462b      	mov	r3, r5
 8008510:	461d      	mov	r5, r3
 8008512:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008516:	2a39      	cmp	r2, #57	; 0x39
 8008518:	d106      	bne.n	8008528 <_dtoa_r+0x700>
 800851a:	9a00      	ldr	r2, [sp, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d1f7      	bne.n	8008510 <_dtoa_r+0x6e8>
 8008520:	9900      	ldr	r1, [sp, #0]
 8008522:	2230      	movs	r2, #48	; 0x30
 8008524:	3701      	adds	r7, #1
 8008526:	700a      	strb	r2, [r1, #0]
 8008528:	781a      	ldrb	r2, [r3, #0]
 800852a:	3201      	adds	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
 800852e:	e790      	b.n	8008452 <_dtoa_r+0x62a>
 8008530:	4ba3      	ldr	r3, [pc, #652]	; (80087c0 <_dtoa_r+0x998>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f8 f860 	bl	80005f8 <__aeabi_dmul>
 8008538:	2200      	movs	r2, #0
 800853a:	2300      	movs	r3, #0
 800853c:	4606      	mov	r6, r0
 800853e:	460f      	mov	r7, r1
 8008540:	f7f8 fac2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008544:	2800      	cmp	r0, #0
 8008546:	d09e      	beq.n	8008486 <_dtoa_r+0x65e>
 8008548:	e7d0      	b.n	80084ec <_dtoa_r+0x6c4>
 800854a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800854c:	2a00      	cmp	r2, #0
 800854e:	f000 80ca 	beq.w	80086e6 <_dtoa_r+0x8be>
 8008552:	9a07      	ldr	r2, [sp, #28]
 8008554:	2a01      	cmp	r2, #1
 8008556:	f300 80ad 	bgt.w	80086b4 <_dtoa_r+0x88c>
 800855a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800855c:	2a00      	cmp	r2, #0
 800855e:	f000 80a5 	beq.w	80086ac <_dtoa_r+0x884>
 8008562:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008566:	9e08      	ldr	r6, [sp, #32]
 8008568:	9d05      	ldr	r5, [sp, #20]
 800856a:	9a05      	ldr	r2, [sp, #20]
 800856c:	441a      	add	r2, r3
 800856e:	9205      	str	r2, [sp, #20]
 8008570:	9a06      	ldr	r2, [sp, #24]
 8008572:	2101      	movs	r1, #1
 8008574:	441a      	add	r2, r3
 8008576:	4620      	mov	r0, r4
 8008578:	9206      	str	r2, [sp, #24]
 800857a:	f000 fc3d 	bl	8008df8 <__i2b>
 800857e:	4607      	mov	r7, r0
 8008580:	b165      	cbz	r5, 800859c <_dtoa_r+0x774>
 8008582:	9b06      	ldr	r3, [sp, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	dd09      	ble.n	800859c <_dtoa_r+0x774>
 8008588:	42ab      	cmp	r3, r5
 800858a:	9a05      	ldr	r2, [sp, #20]
 800858c:	bfa8      	it	ge
 800858e:	462b      	movge	r3, r5
 8008590:	1ad2      	subs	r2, r2, r3
 8008592:	9205      	str	r2, [sp, #20]
 8008594:	9a06      	ldr	r2, [sp, #24]
 8008596:	1aed      	subs	r5, r5, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	9306      	str	r3, [sp, #24]
 800859c:	9b08      	ldr	r3, [sp, #32]
 800859e:	b1f3      	cbz	r3, 80085de <_dtoa_r+0x7b6>
 80085a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f000 80a3 	beq.w	80086ee <_dtoa_r+0x8c6>
 80085a8:	2e00      	cmp	r6, #0
 80085aa:	dd10      	ble.n	80085ce <_dtoa_r+0x7a6>
 80085ac:	4639      	mov	r1, r7
 80085ae:	4632      	mov	r2, r6
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fce1 	bl	8008f78 <__pow5mult>
 80085b6:	4652      	mov	r2, sl
 80085b8:	4601      	mov	r1, r0
 80085ba:	4607      	mov	r7, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	f000 fc31 	bl	8008e24 <__multiply>
 80085c2:	4651      	mov	r1, sl
 80085c4:	4680      	mov	r8, r0
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 fb60 	bl	8008c8c <_Bfree>
 80085cc:	46c2      	mov	sl, r8
 80085ce:	9b08      	ldr	r3, [sp, #32]
 80085d0:	1b9a      	subs	r2, r3, r6
 80085d2:	d004      	beq.n	80085de <_dtoa_r+0x7b6>
 80085d4:	4651      	mov	r1, sl
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fcce 	bl	8008f78 <__pow5mult>
 80085dc:	4682      	mov	sl, r0
 80085de:	2101      	movs	r1, #1
 80085e0:	4620      	mov	r0, r4
 80085e2:	f000 fc09 	bl	8008df8 <__i2b>
 80085e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	4606      	mov	r6, r0
 80085ec:	f340 8081 	ble.w	80086f2 <_dtoa_r+0x8ca>
 80085f0:	461a      	mov	r2, r3
 80085f2:	4601      	mov	r1, r0
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fcbf 	bl	8008f78 <__pow5mult>
 80085fa:	9b07      	ldr	r3, [sp, #28]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	4606      	mov	r6, r0
 8008600:	dd7a      	ble.n	80086f8 <_dtoa_r+0x8d0>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	6933      	ldr	r3, [r6, #16]
 8008608:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800860c:	6918      	ldr	r0, [r3, #16]
 800860e:	f000 fba5 	bl	8008d5c <__hi0bits>
 8008612:	f1c0 0020 	rsb	r0, r0, #32
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	4418      	add	r0, r3
 800861a:	f010 001f 	ands.w	r0, r0, #31
 800861e:	f000 8094 	beq.w	800874a <_dtoa_r+0x922>
 8008622:	f1c0 0320 	rsb	r3, r0, #32
 8008626:	2b04      	cmp	r3, #4
 8008628:	f340 8085 	ble.w	8008736 <_dtoa_r+0x90e>
 800862c:	9b05      	ldr	r3, [sp, #20]
 800862e:	f1c0 001c 	rsb	r0, r0, #28
 8008632:	4403      	add	r3, r0
 8008634:	9305      	str	r3, [sp, #20]
 8008636:	9b06      	ldr	r3, [sp, #24]
 8008638:	4403      	add	r3, r0
 800863a:	4405      	add	r5, r0
 800863c:	9306      	str	r3, [sp, #24]
 800863e:	9b05      	ldr	r3, [sp, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x828>
 8008644:	4651      	mov	r1, sl
 8008646:	461a      	mov	r2, r3
 8008648:	4620      	mov	r0, r4
 800864a:	f000 fcef 	bl	800902c <__lshift>
 800864e:	4682      	mov	sl, r0
 8008650:	9b06      	ldr	r3, [sp, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	dd05      	ble.n	8008662 <_dtoa_r+0x83a>
 8008656:	4631      	mov	r1, r6
 8008658:	461a      	mov	r2, r3
 800865a:	4620      	mov	r0, r4
 800865c:	f000 fce6 	bl	800902c <__lshift>
 8008660:	4606      	mov	r6, r0
 8008662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008664:	2b00      	cmp	r3, #0
 8008666:	d072      	beq.n	800874e <_dtoa_r+0x926>
 8008668:	4631      	mov	r1, r6
 800866a:	4650      	mov	r0, sl
 800866c:	f000 fd4a 	bl	8009104 <__mcmp>
 8008670:	2800      	cmp	r0, #0
 8008672:	da6c      	bge.n	800874e <_dtoa_r+0x926>
 8008674:	2300      	movs	r3, #0
 8008676:	4651      	mov	r1, sl
 8008678:	220a      	movs	r2, #10
 800867a:	4620      	mov	r0, r4
 800867c:	f000 fb28 	bl	8008cd0 <__multadd>
 8008680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008682:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008686:	4682      	mov	sl, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	f000 81b0 	beq.w	80089ee <_dtoa_r+0xbc6>
 800868e:	2300      	movs	r3, #0
 8008690:	4639      	mov	r1, r7
 8008692:	220a      	movs	r2, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f000 fb1b 	bl	8008cd0 <__multadd>
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	4607      	mov	r7, r0
 80086a0:	f300 8096 	bgt.w	80087d0 <_dtoa_r+0x9a8>
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	dc59      	bgt.n	800875e <_dtoa_r+0x936>
 80086aa:	e091      	b.n	80087d0 <_dtoa_r+0x9a8>
 80086ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80086b2:	e758      	b.n	8008566 <_dtoa_r+0x73e>
 80086b4:	9b04      	ldr	r3, [sp, #16]
 80086b6:	1e5e      	subs	r6, r3, #1
 80086b8:	9b08      	ldr	r3, [sp, #32]
 80086ba:	42b3      	cmp	r3, r6
 80086bc:	bfbf      	itttt	lt
 80086be:	9b08      	ldrlt	r3, [sp, #32]
 80086c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80086c2:	9608      	strlt	r6, [sp, #32]
 80086c4:	1af3      	sublt	r3, r6, r3
 80086c6:	bfb4      	ite	lt
 80086c8:	18d2      	addlt	r2, r2, r3
 80086ca:	1b9e      	subge	r6, r3, r6
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	bfbc      	itt	lt
 80086d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80086d2:	2600      	movlt	r6, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bfb7      	itett	lt
 80086d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80086dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80086e0:	1a9d      	sublt	r5, r3, r2
 80086e2:	2300      	movlt	r3, #0
 80086e4:	e741      	b.n	800856a <_dtoa_r+0x742>
 80086e6:	9e08      	ldr	r6, [sp, #32]
 80086e8:	9d05      	ldr	r5, [sp, #20]
 80086ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80086ec:	e748      	b.n	8008580 <_dtoa_r+0x758>
 80086ee:	9a08      	ldr	r2, [sp, #32]
 80086f0:	e770      	b.n	80085d4 <_dtoa_r+0x7ac>
 80086f2:	9b07      	ldr	r3, [sp, #28]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	dc19      	bgt.n	800872c <_dtoa_r+0x904>
 80086f8:	9b02      	ldr	r3, [sp, #8]
 80086fa:	b9bb      	cbnz	r3, 800872c <_dtoa_r+0x904>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008702:	b99b      	cbnz	r3, 800872c <_dtoa_r+0x904>
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800870a:	0d1b      	lsrs	r3, r3, #20
 800870c:	051b      	lsls	r3, r3, #20
 800870e:	b183      	cbz	r3, 8008732 <_dtoa_r+0x90a>
 8008710:	9b05      	ldr	r3, [sp, #20]
 8008712:	3301      	adds	r3, #1
 8008714:	9305      	str	r3, [sp, #20]
 8008716:	9b06      	ldr	r3, [sp, #24]
 8008718:	3301      	adds	r3, #1
 800871a:	9306      	str	r3, [sp, #24]
 800871c:	f04f 0801 	mov.w	r8, #1
 8008720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	f47f af6f 	bne.w	8008606 <_dtoa_r+0x7de>
 8008728:	2001      	movs	r0, #1
 800872a:	e774      	b.n	8008616 <_dtoa_r+0x7ee>
 800872c:	f04f 0800 	mov.w	r8, #0
 8008730:	e7f6      	b.n	8008720 <_dtoa_r+0x8f8>
 8008732:	4698      	mov	r8, r3
 8008734:	e7f4      	b.n	8008720 <_dtoa_r+0x8f8>
 8008736:	d082      	beq.n	800863e <_dtoa_r+0x816>
 8008738:	9a05      	ldr	r2, [sp, #20]
 800873a:	331c      	adds	r3, #28
 800873c:	441a      	add	r2, r3
 800873e:	9205      	str	r2, [sp, #20]
 8008740:	9a06      	ldr	r2, [sp, #24]
 8008742:	441a      	add	r2, r3
 8008744:	441d      	add	r5, r3
 8008746:	9206      	str	r2, [sp, #24]
 8008748:	e779      	b.n	800863e <_dtoa_r+0x816>
 800874a:	4603      	mov	r3, r0
 800874c:	e7f4      	b.n	8008738 <_dtoa_r+0x910>
 800874e:	9b04      	ldr	r3, [sp, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	dc37      	bgt.n	80087c4 <_dtoa_r+0x99c>
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	2b02      	cmp	r3, #2
 8008758:	dd34      	ble.n	80087c4 <_dtoa_r+0x99c>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	b963      	cbnz	r3, 800877c <_dtoa_r+0x954>
 8008762:	4631      	mov	r1, r6
 8008764:	2205      	movs	r2, #5
 8008766:	4620      	mov	r0, r4
 8008768:	f000 fab2 	bl	8008cd0 <__multadd>
 800876c:	4601      	mov	r1, r0
 800876e:	4606      	mov	r6, r0
 8008770:	4650      	mov	r0, sl
 8008772:	f000 fcc7 	bl	8009104 <__mcmp>
 8008776:	2800      	cmp	r0, #0
 8008778:	f73f adbb 	bgt.w	80082f2 <_dtoa_r+0x4ca>
 800877c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800877e:	9d00      	ldr	r5, [sp, #0]
 8008780:	ea6f 0b03 	mvn.w	fp, r3
 8008784:	f04f 0800 	mov.w	r8, #0
 8008788:	4631      	mov	r1, r6
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fa7e 	bl	8008c8c <_Bfree>
 8008790:	2f00      	cmp	r7, #0
 8008792:	f43f aeab 	beq.w	80084ec <_dtoa_r+0x6c4>
 8008796:	f1b8 0f00 	cmp.w	r8, #0
 800879a:	d005      	beq.n	80087a8 <_dtoa_r+0x980>
 800879c:	45b8      	cmp	r8, r7
 800879e:	d003      	beq.n	80087a8 <_dtoa_r+0x980>
 80087a0:	4641      	mov	r1, r8
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fa72 	bl	8008c8c <_Bfree>
 80087a8:	4639      	mov	r1, r7
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 fa6e 	bl	8008c8c <_Bfree>
 80087b0:	e69c      	b.n	80084ec <_dtoa_r+0x6c4>
 80087b2:	2600      	movs	r6, #0
 80087b4:	4637      	mov	r7, r6
 80087b6:	e7e1      	b.n	800877c <_dtoa_r+0x954>
 80087b8:	46bb      	mov	fp, r7
 80087ba:	4637      	mov	r7, r6
 80087bc:	e599      	b.n	80082f2 <_dtoa_r+0x4ca>
 80087be:	bf00      	nop
 80087c0:	40240000 	.word	0x40240000
 80087c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80c8 	beq.w	800895c <_dtoa_r+0xb34>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	2d00      	cmp	r5, #0
 80087d2:	dd05      	ble.n	80087e0 <_dtoa_r+0x9b8>
 80087d4:	4639      	mov	r1, r7
 80087d6:	462a      	mov	r2, r5
 80087d8:	4620      	mov	r0, r4
 80087da:	f000 fc27 	bl	800902c <__lshift>
 80087de:	4607      	mov	r7, r0
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	d05b      	beq.n	800889e <_dtoa_r+0xa76>
 80087e6:	6879      	ldr	r1, [r7, #4]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fa0f 	bl	8008c0c <_Balloc>
 80087ee:	4605      	mov	r5, r0
 80087f0:	b928      	cbnz	r0, 80087fe <_dtoa_r+0x9d6>
 80087f2:	4b83      	ldr	r3, [pc, #524]	; (8008a00 <_dtoa_r+0xbd8>)
 80087f4:	4602      	mov	r2, r0
 80087f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80087fa:	f7ff bb2e 	b.w	8007e5a <_dtoa_r+0x32>
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	3202      	adds	r2, #2
 8008802:	0092      	lsls	r2, r2, #2
 8008804:	f107 010c 	add.w	r1, r7, #12
 8008808:	300c      	adds	r0, #12
 800880a:	f001 f801 	bl	8009810 <memcpy>
 800880e:	2201      	movs	r2, #1
 8008810:	4629      	mov	r1, r5
 8008812:	4620      	mov	r0, r4
 8008814:	f000 fc0a 	bl	800902c <__lshift>
 8008818:	9b00      	ldr	r3, [sp, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008822:	4413      	add	r3, r2
 8008824:	9308      	str	r3, [sp, #32]
 8008826:	9b02      	ldr	r3, [sp, #8]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	46b8      	mov	r8, r7
 800882e:	9306      	str	r3, [sp, #24]
 8008830:	4607      	mov	r7, r0
 8008832:	9b04      	ldr	r3, [sp, #16]
 8008834:	4631      	mov	r1, r6
 8008836:	3b01      	subs	r3, #1
 8008838:	4650      	mov	r0, sl
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	f7ff fa6b 	bl	8007d16 <quorem>
 8008840:	4641      	mov	r1, r8
 8008842:	9002      	str	r0, [sp, #8]
 8008844:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008848:	4650      	mov	r0, sl
 800884a:	f000 fc5b 	bl	8009104 <__mcmp>
 800884e:	463a      	mov	r2, r7
 8008850:	9005      	str	r0, [sp, #20]
 8008852:	4631      	mov	r1, r6
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fc71 	bl	800913c <__mdiff>
 800885a:	68c2      	ldr	r2, [r0, #12]
 800885c:	4605      	mov	r5, r0
 800885e:	bb02      	cbnz	r2, 80088a2 <_dtoa_r+0xa7a>
 8008860:	4601      	mov	r1, r0
 8008862:	4650      	mov	r0, sl
 8008864:	f000 fc4e 	bl	8009104 <__mcmp>
 8008868:	4602      	mov	r2, r0
 800886a:	4629      	mov	r1, r5
 800886c:	4620      	mov	r0, r4
 800886e:	9209      	str	r2, [sp, #36]	; 0x24
 8008870:	f000 fa0c 	bl	8008c8c <_Bfree>
 8008874:	9b07      	ldr	r3, [sp, #28]
 8008876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008878:	9d04      	ldr	r5, [sp, #16]
 800887a:	ea43 0102 	orr.w	r1, r3, r2
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	4319      	orrs	r1, r3
 8008882:	d110      	bne.n	80088a6 <_dtoa_r+0xa7e>
 8008884:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008888:	d029      	beq.n	80088de <_dtoa_r+0xab6>
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	2b00      	cmp	r3, #0
 800888e:	dd02      	ble.n	8008896 <_dtoa_r+0xa6e>
 8008890:	9b02      	ldr	r3, [sp, #8]
 8008892:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008896:	9b01      	ldr	r3, [sp, #4]
 8008898:	f883 9000 	strb.w	r9, [r3]
 800889c:	e774      	b.n	8008788 <_dtoa_r+0x960>
 800889e:	4638      	mov	r0, r7
 80088a0:	e7ba      	b.n	8008818 <_dtoa_r+0x9f0>
 80088a2:	2201      	movs	r2, #1
 80088a4:	e7e1      	b.n	800886a <_dtoa_r+0xa42>
 80088a6:	9b05      	ldr	r3, [sp, #20]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	db04      	blt.n	80088b6 <_dtoa_r+0xa8e>
 80088ac:	9907      	ldr	r1, [sp, #28]
 80088ae:	430b      	orrs	r3, r1
 80088b0:	9906      	ldr	r1, [sp, #24]
 80088b2:	430b      	orrs	r3, r1
 80088b4:	d120      	bne.n	80088f8 <_dtoa_r+0xad0>
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	dded      	ble.n	8008896 <_dtoa_r+0xa6e>
 80088ba:	4651      	mov	r1, sl
 80088bc:	2201      	movs	r2, #1
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 fbb4 	bl	800902c <__lshift>
 80088c4:	4631      	mov	r1, r6
 80088c6:	4682      	mov	sl, r0
 80088c8:	f000 fc1c 	bl	8009104 <__mcmp>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	dc03      	bgt.n	80088d8 <_dtoa_r+0xab0>
 80088d0:	d1e1      	bne.n	8008896 <_dtoa_r+0xa6e>
 80088d2:	f019 0f01 	tst.w	r9, #1
 80088d6:	d0de      	beq.n	8008896 <_dtoa_r+0xa6e>
 80088d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80088dc:	d1d8      	bne.n	8008890 <_dtoa_r+0xa68>
 80088de:	9a01      	ldr	r2, [sp, #4]
 80088e0:	2339      	movs	r3, #57	; 0x39
 80088e2:	7013      	strb	r3, [r2, #0]
 80088e4:	462b      	mov	r3, r5
 80088e6:	461d      	mov	r5, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80088ee:	2a39      	cmp	r2, #57	; 0x39
 80088f0:	d06c      	beq.n	80089cc <_dtoa_r+0xba4>
 80088f2:	3201      	adds	r2, #1
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	e747      	b.n	8008788 <_dtoa_r+0x960>
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	dd07      	ble.n	800890c <_dtoa_r+0xae4>
 80088fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008900:	d0ed      	beq.n	80088de <_dtoa_r+0xab6>
 8008902:	9a01      	ldr	r2, [sp, #4]
 8008904:	f109 0301 	add.w	r3, r9, #1
 8008908:	7013      	strb	r3, [r2, #0]
 800890a:	e73d      	b.n	8008788 <_dtoa_r+0x960>
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	9a08      	ldr	r2, [sp, #32]
 8008910:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008914:	4293      	cmp	r3, r2
 8008916:	d043      	beq.n	80089a0 <_dtoa_r+0xb78>
 8008918:	4651      	mov	r1, sl
 800891a:	2300      	movs	r3, #0
 800891c:	220a      	movs	r2, #10
 800891e:	4620      	mov	r0, r4
 8008920:	f000 f9d6 	bl	8008cd0 <__multadd>
 8008924:	45b8      	cmp	r8, r7
 8008926:	4682      	mov	sl, r0
 8008928:	f04f 0300 	mov.w	r3, #0
 800892c:	f04f 020a 	mov.w	r2, #10
 8008930:	4641      	mov	r1, r8
 8008932:	4620      	mov	r0, r4
 8008934:	d107      	bne.n	8008946 <_dtoa_r+0xb1e>
 8008936:	f000 f9cb 	bl	8008cd0 <__multadd>
 800893a:	4680      	mov	r8, r0
 800893c:	4607      	mov	r7, r0
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	9304      	str	r3, [sp, #16]
 8008944:	e775      	b.n	8008832 <_dtoa_r+0xa0a>
 8008946:	f000 f9c3 	bl	8008cd0 <__multadd>
 800894a:	4639      	mov	r1, r7
 800894c:	4680      	mov	r8, r0
 800894e:	2300      	movs	r3, #0
 8008950:	220a      	movs	r2, #10
 8008952:	4620      	mov	r0, r4
 8008954:	f000 f9bc 	bl	8008cd0 <__multadd>
 8008958:	4607      	mov	r7, r0
 800895a:	e7f0      	b.n	800893e <_dtoa_r+0xb16>
 800895c:	9b04      	ldr	r3, [sp, #16]
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	9d00      	ldr	r5, [sp, #0]
 8008962:	4631      	mov	r1, r6
 8008964:	4650      	mov	r0, sl
 8008966:	f7ff f9d6 	bl	8007d16 <quorem>
 800896a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800896e:	9b00      	ldr	r3, [sp, #0]
 8008970:	f805 9b01 	strb.w	r9, [r5], #1
 8008974:	1aea      	subs	r2, r5, r3
 8008976:	9b01      	ldr	r3, [sp, #4]
 8008978:	4293      	cmp	r3, r2
 800897a:	dd07      	ble.n	800898c <_dtoa_r+0xb64>
 800897c:	4651      	mov	r1, sl
 800897e:	2300      	movs	r3, #0
 8008980:	220a      	movs	r2, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f9a4 	bl	8008cd0 <__multadd>
 8008988:	4682      	mov	sl, r0
 800898a:	e7ea      	b.n	8008962 <_dtoa_r+0xb3a>
 800898c:	9b01      	ldr	r3, [sp, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfc8      	it	gt
 8008992:	461d      	movgt	r5, r3
 8008994:	9b00      	ldr	r3, [sp, #0]
 8008996:	bfd8      	it	le
 8008998:	2501      	movle	r5, #1
 800899a:	441d      	add	r5, r3
 800899c:	f04f 0800 	mov.w	r8, #0
 80089a0:	4651      	mov	r1, sl
 80089a2:	2201      	movs	r2, #1
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fb41 	bl	800902c <__lshift>
 80089aa:	4631      	mov	r1, r6
 80089ac:	4682      	mov	sl, r0
 80089ae:	f000 fba9 	bl	8009104 <__mcmp>
 80089b2:	2800      	cmp	r0, #0
 80089b4:	dc96      	bgt.n	80088e4 <_dtoa_r+0xabc>
 80089b6:	d102      	bne.n	80089be <_dtoa_r+0xb96>
 80089b8:	f019 0f01 	tst.w	r9, #1
 80089bc:	d192      	bne.n	80088e4 <_dtoa_r+0xabc>
 80089be:	462b      	mov	r3, r5
 80089c0:	461d      	mov	r5, r3
 80089c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c6:	2a30      	cmp	r2, #48	; 0x30
 80089c8:	d0fa      	beq.n	80089c0 <_dtoa_r+0xb98>
 80089ca:	e6dd      	b.n	8008788 <_dtoa_r+0x960>
 80089cc:	9a00      	ldr	r2, [sp, #0]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d189      	bne.n	80088e6 <_dtoa_r+0xabe>
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	2331      	movs	r3, #49	; 0x31
 80089d8:	e796      	b.n	8008908 <_dtoa_r+0xae0>
 80089da:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <_dtoa_r+0xbdc>)
 80089dc:	f7ff ba99 	b.w	8007f12 <_dtoa_r+0xea>
 80089e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	f47f aa6d 	bne.w	8007ec2 <_dtoa_r+0x9a>
 80089e8:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <_dtoa_r+0xbe0>)
 80089ea:	f7ff ba92 	b.w	8007f12 <_dtoa_r+0xea>
 80089ee:	9b01      	ldr	r3, [sp, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	dcb5      	bgt.n	8008960 <_dtoa_r+0xb38>
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	f73f aeb1 	bgt.w	800875e <_dtoa_r+0x936>
 80089fc:	e7b0      	b.n	8008960 <_dtoa_r+0xb38>
 80089fe:	bf00      	nop
 8008a00:	0800af90 	.word	0x0800af90
 8008a04:	0800aef0 	.word	0x0800aef0
 8008a08:	0800af14 	.word	0x0800af14

08008a0c <_free_r>:
 8008a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a0e:	2900      	cmp	r1, #0
 8008a10:	d044      	beq.n	8008a9c <_free_r+0x90>
 8008a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a16:	9001      	str	r0, [sp, #4]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a1e:	bfb8      	it	lt
 8008a20:	18e4      	addlt	r4, r4, r3
 8008a22:	f000 f8e7 	bl	8008bf4 <__malloc_lock>
 8008a26:	4a1e      	ldr	r2, [pc, #120]	; (8008aa0 <_free_r+0x94>)
 8008a28:	9801      	ldr	r0, [sp, #4]
 8008a2a:	6813      	ldr	r3, [r2, #0]
 8008a2c:	b933      	cbnz	r3, 8008a3c <_free_r+0x30>
 8008a2e:	6063      	str	r3, [r4, #4]
 8008a30:	6014      	str	r4, [r2, #0]
 8008a32:	b003      	add	sp, #12
 8008a34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a38:	f000 b8e2 	b.w	8008c00 <__malloc_unlock>
 8008a3c:	42a3      	cmp	r3, r4
 8008a3e:	d908      	bls.n	8008a52 <_free_r+0x46>
 8008a40:	6825      	ldr	r5, [r4, #0]
 8008a42:	1961      	adds	r1, r4, r5
 8008a44:	428b      	cmp	r3, r1
 8008a46:	bf01      	itttt	eq
 8008a48:	6819      	ldreq	r1, [r3, #0]
 8008a4a:	685b      	ldreq	r3, [r3, #4]
 8008a4c:	1949      	addeq	r1, r1, r5
 8008a4e:	6021      	streq	r1, [r4, #0]
 8008a50:	e7ed      	b.n	8008a2e <_free_r+0x22>
 8008a52:	461a      	mov	r2, r3
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b10b      	cbz	r3, 8008a5c <_free_r+0x50>
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	d9fa      	bls.n	8008a52 <_free_r+0x46>
 8008a5c:	6811      	ldr	r1, [r2, #0]
 8008a5e:	1855      	adds	r5, r2, r1
 8008a60:	42a5      	cmp	r5, r4
 8008a62:	d10b      	bne.n	8008a7c <_free_r+0x70>
 8008a64:	6824      	ldr	r4, [r4, #0]
 8008a66:	4421      	add	r1, r4
 8008a68:	1854      	adds	r4, r2, r1
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	6011      	str	r1, [r2, #0]
 8008a6e:	d1e0      	bne.n	8008a32 <_free_r+0x26>
 8008a70:	681c      	ldr	r4, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	6053      	str	r3, [r2, #4]
 8008a76:	440c      	add	r4, r1
 8008a78:	6014      	str	r4, [r2, #0]
 8008a7a:	e7da      	b.n	8008a32 <_free_r+0x26>
 8008a7c:	d902      	bls.n	8008a84 <_free_r+0x78>
 8008a7e:	230c      	movs	r3, #12
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	e7d6      	b.n	8008a32 <_free_r+0x26>
 8008a84:	6825      	ldr	r5, [r4, #0]
 8008a86:	1961      	adds	r1, r4, r5
 8008a88:	428b      	cmp	r3, r1
 8008a8a:	bf04      	itt	eq
 8008a8c:	6819      	ldreq	r1, [r3, #0]
 8008a8e:	685b      	ldreq	r3, [r3, #4]
 8008a90:	6063      	str	r3, [r4, #4]
 8008a92:	bf04      	itt	eq
 8008a94:	1949      	addeq	r1, r1, r5
 8008a96:	6021      	streq	r1, [r4, #0]
 8008a98:	6054      	str	r4, [r2, #4]
 8008a9a:	e7ca      	b.n	8008a32 <_free_r+0x26>
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bd30      	pop	{r4, r5, pc}
 8008aa0:	200004d8 	.word	0x200004d8

08008aa4 <malloc>:
 8008aa4:	4b02      	ldr	r3, [pc, #8]	; (8008ab0 <malloc+0xc>)
 8008aa6:	4601      	mov	r1, r0
 8008aa8:	6818      	ldr	r0, [r3, #0]
 8008aaa:	f000 b823 	b.w	8008af4 <_malloc_r>
 8008aae:	bf00      	nop
 8008ab0:	20000064 	.word	0x20000064

08008ab4 <sbrk_aligned>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	4e0e      	ldr	r6, [pc, #56]	; (8008af0 <sbrk_aligned+0x3c>)
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6831      	ldr	r1, [r6, #0]
 8008abc:	4605      	mov	r5, r0
 8008abe:	b911      	cbnz	r1, 8008ac6 <sbrk_aligned+0x12>
 8008ac0:	f000 fe96 	bl	80097f0 <_sbrk_r>
 8008ac4:	6030      	str	r0, [r6, #0]
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4628      	mov	r0, r5
 8008aca:	f000 fe91 	bl	80097f0 <_sbrk_r>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	d00a      	beq.n	8008ae8 <sbrk_aligned+0x34>
 8008ad2:	1cc4      	adds	r4, r0, #3
 8008ad4:	f024 0403 	bic.w	r4, r4, #3
 8008ad8:	42a0      	cmp	r0, r4
 8008ada:	d007      	beq.n	8008aec <sbrk_aligned+0x38>
 8008adc:	1a21      	subs	r1, r4, r0
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f000 fe86 	bl	80097f0 <_sbrk_r>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d101      	bne.n	8008aec <sbrk_aligned+0x38>
 8008ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8008aec:	4620      	mov	r0, r4
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	200004dc 	.word	0x200004dc

08008af4 <_malloc_r>:
 8008af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af8:	1ccd      	adds	r5, r1, #3
 8008afa:	f025 0503 	bic.w	r5, r5, #3
 8008afe:	3508      	adds	r5, #8
 8008b00:	2d0c      	cmp	r5, #12
 8008b02:	bf38      	it	cc
 8008b04:	250c      	movcc	r5, #12
 8008b06:	2d00      	cmp	r5, #0
 8008b08:	4607      	mov	r7, r0
 8008b0a:	db01      	blt.n	8008b10 <_malloc_r+0x1c>
 8008b0c:	42a9      	cmp	r1, r5
 8008b0e:	d905      	bls.n	8008b1c <_malloc_r+0x28>
 8008b10:	230c      	movs	r3, #12
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	2600      	movs	r6, #0
 8008b16:	4630      	mov	r0, r6
 8008b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008bf0 <_malloc_r+0xfc>
 8008b20:	f000 f868 	bl	8008bf4 <__malloc_lock>
 8008b24:	f8d8 3000 	ldr.w	r3, [r8]
 8008b28:	461c      	mov	r4, r3
 8008b2a:	bb5c      	cbnz	r4, 8008b84 <_malloc_r+0x90>
 8008b2c:	4629      	mov	r1, r5
 8008b2e:	4638      	mov	r0, r7
 8008b30:	f7ff ffc0 	bl	8008ab4 <sbrk_aligned>
 8008b34:	1c43      	adds	r3, r0, #1
 8008b36:	4604      	mov	r4, r0
 8008b38:	d155      	bne.n	8008be6 <_malloc_r+0xf2>
 8008b3a:	f8d8 4000 	ldr.w	r4, [r8]
 8008b3e:	4626      	mov	r6, r4
 8008b40:	2e00      	cmp	r6, #0
 8008b42:	d145      	bne.n	8008bd0 <_malloc_r+0xdc>
 8008b44:	2c00      	cmp	r4, #0
 8008b46:	d048      	beq.n	8008bda <_malloc_r+0xe6>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	eb04 0903 	add.w	r9, r4, r3
 8008b52:	f000 fe4d 	bl	80097f0 <_sbrk_r>
 8008b56:	4581      	cmp	r9, r0
 8008b58:	d13f      	bne.n	8008bda <_malloc_r+0xe6>
 8008b5a:	6821      	ldr	r1, [r4, #0]
 8008b5c:	1a6d      	subs	r5, r5, r1
 8008b5e:	4629      	mov	r1, r5
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ffa7 	bl	8008ab4 <sbrk_aligned>
 8008b66:	3001      	adds	r0, #1
 8008b68:	d037      	beq.n	8008bda <_malloc_r+0xe6>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	442b      	add	r3, r5
 8008b6e:	6023      	str	r3, [r4, #0]
 8008b70:	f8d8 3000 	ldr.w	r3, [r8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d038      	beq.n	8008bea <_malloc_r+0xf6>
 8008b78:	685a      	ldr	r2, [r3, #4]
 8008b7a:	42a2      	cmp	r2, r4
 8008b7c:	d12b      	bne.n	8008bd6 <_malloc_r+0xe2>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	605a      	str	r2, [r3, #4]
 8008b82:	e00f      	b.n	8008ba4 <_malloc_r+0xb0>
 8008b84:	6822      	ldr	r2, [r4, #0]
 8008b86:	1b52      	subs	r2, r2, r5
 8008b88:	d41f      	bmi.n	8008bca <_malloc_r+0xd6>
 8008b8a:	2a0b      	cmp	r2, #11
 8008b8c:	d917      	bls.n	8008bbe <_malloc_r+0xca>
 8008b8e:	1961      	adds	r1, r4, r5
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	6025      	str	r5, [r4, #0]
 8008b94:	bf18      	it	ne
 8008b96:	6059      	strne	r1, [r3, #4]
 8008b98:	6863      	ldr	r3, [r4, #4]
 8008b9a:	bf08      	it	eq
 8008b9c:	f8c8 1000 	streq.w	r1, [r8]
 8008ba0:	5162      	str	r2, [r4, r5]
 8008ba2:	604b      	str	r3, [r1, #4]
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f104 060b 	add.w	r6, r4, #11
 8008baa:	f000 f829 	bl	8008c00 <__malloc_unlock>
 8008bae:	f026 0607 	bic.w	r6, r6, #7
 8008bb2:	1d23      	adds	r3, r4, #4
 8008bb4:	1af2      	subs	r2, r6, r3
 8008bb6:	d0ae      	beq.n	8008b16 <_malloc_r+0x22>
 8008bb8:	1b9b      	subs	r3, r3, r6
 8008bba:	50a3      	str	r3, [r4, r2]
 8008bbc:	e7ab      	b.n	8008b16 <_malloc_r+0x22>
 8008bbe:	42a3      	cmp	r3, r4
 8008bc0:	6862      	ldr	r2, [r4, #4]
 8008bc2:	d1dd      	bne.n	8008b80 <_malloc_r+0x8c>
 8008bc4:	f8c8 2000 	str.w	r2, [r8]
 8008bc8:	e7ec      	b.n	8008ba4 <_malloc_r+0xb0>
 8008bca:	4623      	mov	r3, r4
 8008bcc:	6864      	ldr	r4, [r4, #4]
 8008bce:	e7ac      	b.n	8008b2a <_malloc_r+0x36>
 8008bd0:	4634      	mov	r4, r6
 8008bd2:	6876      	ldr	r6, [r6, #4]
 8008bd4:	e7b4      	b.n	8008b40 <_malloc_r+0x4c>
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	e7cc      	b.n	8008b74 <_malloc_r+0x80>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	603b      	str	r3, [r7, #0]
 8008bde:	4638      	mov	r0, r7
 8008be0:	f000 f80e 	bl	8008c00 <__malloc_unlock>
 8008be4:	e797      	b.n	8008b16 <_malloc_r+0x22>
 8008be6:	6025      	str	r5, [r4, #0]
 8008be8:	e7dc      	b.n	8008ba4 <_malloc_r+0xb0>
 8008bea:	605b      	str	r3, [r3, #4]
 8008bec:	deff      	udf	#255	; 0xff
 8008bee:	bf00      	nop
 8008bf0:	200004d8 	.word	0x200004d8

08008bf4 <__malloc_lock>:
 8008bf4:	4801      	ldr	r0, [pc, #4]	; (8008bfc <__malloc_lock+0x8>)
 8008bf6:	f7ff b88c 	b.w	8007d12 <__retarget_lock_acquire_recursive>
 8008bfa:	bf00      	nop
 8008bfc:	200004d4 	.word	0x200004d4

08008c00 <__malloc_unlock>:
 8008c00:	4801      	ldr	r0, [pc, #4]	; (8008c08 <__malloc_unlock+0x8>)
 8008c02:	f7ff b887 	b.w	8007d14 <__retarget_lock_release_recursive>
 8008c06:	bf00      	nop
 8008c08:	200004d4 	.word	0x200004d4

08008c0c <_Balloc>:
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	69c6      	ldr	r6, [r0, #28]
 8008c10:	4604      	mov	r4, r0
 8008c12:	460d      	mov	r5, r1
 8008c14:	b976      	cbnz	r6, 8008c34 <_Balloc+0x28>
 8008c16:	2010      	movs	r0, #16
 8008c18:	f7ff ff44 	bl	8008aa4 <malloc>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	61e0      	str	r0, [r4, #28]
 8008c20:	b920      	cbnz	r0, 8008c2c <_Balloc+0x20>
 8008c22:	4b18      	ldr	r3, [pc, #96]	; (8008c84 <_Balloc+0x78>)
 8008c24:	4818      	ldr	r0, [pc, #96]	; (8008c88 <_Balloc+0x7c>)
 8008c26:	216b      	movs	r1, #107	; 0x6b
 8008c28:	f000 fe00 	bl	800982c <__assert_func>
 8008c2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c30:	6006      	str	r6, [r0, #0]
 8008c32:	60c6      	str	r6, [r0, #12]
 8008c34:	69e6      	ldr	r6, [r4, #28]
 8008c36:	68f3      	ldr	r3, [r6, #12]
 8008c38:	b183      	cbz	r3, 8008c5c <_Balloc+0x50>
 8008c3a:	69e3      	ldr	r3, [r4, #28]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c42:	b9b8      	cbnz	r0, 8008c74 <_Balloc+0x68>
 8008c44:	2101      	movs	r1, #1
 8008c46:	fa01 f605 	lsl.w	r6, r1, r5
 8008c4a:	1d72      	adds	r2, r6, #5
 8008c4c:	0092      	lsls	r2, r2, #2
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fe0a 	bl	8009868 <_calloc_r>
 8008c54:	b160      	cbz	r0, 8008c70 <_Balloc+0x64>
 8008c56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c5a:	e00e      	b.n	8008c7a <_Balloc+0x6e>
 8008c5c:	2221      	movs	r2, #33	; 0x21
 8008c5e:	2104      	movs	r1, #4
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fe01 	bl	8009868 <_calloc_r>
 8008c66:	69e3      	ldr	r3, [r4, #28]
 8008c68:	60f0      	str	r0, [r6, #12]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e4      	bne.n	8008c3a <_Balloc+0x2e>
 8008c70:	2000      	movs	r0, #0
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	6802      	ldr	r2, [r0, #0]
 8008c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c80:	e7f7      	b.n	8008c72 <_Balloc+0x66>
 8008c82:	bf00      	nop
 8008c84:	0800af21 	.word	0x0800af21
 8008c88:	0800afa1 	.word	0x0800afa1

08008c8c <_Bfree>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	69c6      	ldr	r6, [r0, #28]
 8008c90:	4605      	mov	r5, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b976      	cbnz	r6, 8008cb4 <_Bfree+0x28>
 8008c96:	2010      	movs	r0, #16
 8008c98:	f7ff ff04 	bl	8008aa4 <malloc>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	61e8      	str	r0, [r5, #28]
 8008ca0:	b920      	cbnz	r0, 8008cac <_Bfree+0x20>
 8008ca2:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <_Bfree+0x3c>)
 8008ca4:	4809      	ldr	r0, [pc, #36]	; (8008ccc <_Bfree+0x40>)
 8008ca6:	218f      	movs	r1, #143	; 0x8f
 8008ca8:	f000 fdc0 	bl	800982c <__assert_func>
 8008cac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cb0:	6006      	str	r6, [r0, #0]
 8008cb2:	60c6      	str	r6, [r0, #12]
 8008cb4:	b13c      	cbz	r4, 8008cc6 <_Bfree+0x3a>
 8008cb6:	69eb      	ldr	r3, [r5, #28]
 8008cb8:	6862      	ldr	r2, [r4, #4]
 8008cba:	68db      	ldr	r3, [r3, #12]
 8008cbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cc0:	6021      	str	r1, [r4, #0]
 8008cc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	0800af21 	.word	0x0800af21
 8008ccc:	0800afa1 	.word	0x0800afa1

08008cd0 <__multadd>:
 8008cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd4:	690d      	ldr	r5, [r1, #16]
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	461e      	mov	r6, r3
 8008cdc:	f101 0c14 	add.w	ip, r1, #20
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ce6:	b299      	uxth	r1, r3
 8008ce8:	fb02 6101 	mla	r1, r2, r1, r6
 8008cec:	0c1e      	lsrs	r6, r3, #16
 8008cee:	0c0b      	lsrs	r3, r1, #16
 8008cf0:	fb02 3306 	mla	r3, r2, r6, r3
 8008cf4:	b289      	uxth	r1, r1
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008cfc:	4285      	cmp	r5, r0
 8008cfe:	f84c 1b04 	str.w	r1, [ip], #4
 8008d02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d06:	dcec      	bgt.n	8008ce2 <__multadd+0x12>
 8008d08:	b30e      	cbz	r6, 8008d4e <__multadd+0x7e>
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	42ab      	cmp	r3, r5
 8008d0e:	dc19      	bgt.n	8008d44 <__multadd+0x74>
 8008d10:	6861      	ldr	r1, [r4, #4]
 8008d12:	4638      	mov	r0, r7
 8008d14:	3101      	adds	r1, #1
 8008d16:	f7ff ff79 	bl	8008c0c <_Balloc>
 8008d1a:	4680      	mov	r8, r0
 8008d1c:	b928      	cbnz	r0, 8008d2a <__multadd+0x5a>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	4b0c      	ldr	r3, [pc, #48]	; (8008d54 <__multadd+0x84>)
 8008d22:	480d      	ldr	r0, [pc, #52]	; (8008d58 <__multadd+0x88>)
 8008d24:	21ba      	movs	r1, #186	; 0xba
 8008d26:	f000 fd81 	bl	800982c <__assert_func>
 8008d2a:	6922      	ldr	r2, [r4, #16]
 8008d2c:	3202      	adds	r2, #2
 8008d2e:	f104 010c 	add.w	r1, r4, #12
 8008d32:	0092      	lsls	r2, r2, #2
 8008d34:	300c      	adds	r0, #12
 8008d36:	f000 fd6b 	bl	8009810 <memcpy>
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	f7ff ffa5 	bl	8008c8c <_Bfree>
 8008d42:	4644      	mov	r4, r8
 8008d44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d48:	3501      	adds	r5, #1
 8008d4a:	615e      	str	r6, [r3, #20]
 8008d4c:	6125      	str	r5, [r4, #16]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d54:	0800af90 	.word	0x0800af90
 8008d58:	0800afa1 	.word	0x0800afa1

08008d5c <__hi0bits>:
 8008d5c:	0c03      	lsrs	r3, r0, #16
 8008d5e:	041b      	lsls	r3, r3, #16
 8008d60:	b9d3      	cbnz	r3, 8008d98 <__hi0bits+0x3c>
 8008d62:	0400      	lsls	r0, r0, #16
 8008d64:	2310      	movs	r3, #16
 8008d66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008d6a:	bf04      	itt	eq
 8008d6c:	0200      	lsleq	r0, r0, #8
 8008d6e:	3308      	addeq	r3, #8
 8008d70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008d74:	bf04      	itt	eq
 8008d76:	0100      	lsleq	r0, r0, #4
 8008d78:	3304      	addeq	r3, #4
 8008d7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008d7e:	bf04      	itt	eq
 8008d80:	0080      	lsleq	r0, r0, #2
 8008d82:	3302      	addeq	r3, #2
 8008d84:	2800      	cmp	r0, #0
 8008d86:	db05      	blt.n	8008d94 <__hi0bits+0x38>
 8008d88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008d8c:	f103 0301 	add.w	r3, r3, #1
 8008d90:	bf08      	it	eq
 8008d92:	2320      	moveq	r3, #32
 8008d94:	4618      	mov	r0, r3
 8008d96:	4770      	bx	lr
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e7e4      	b.n	8008d66 <__hi0bits+0xa>

08008d9c <__lo0bits>:
 8008d9c:	6803      	ldr	r3, [r0, #0]
 8008d9e:	f013 0207 	ands.w	r2, r3, #7
 8008da2:	d00c      	beq.n	8008dbe <__lo0bits+0x22>
 8008da4:	07d9      	lsls	r1, r3, #31
 8008da6:	d422      	bmi.n	8008dee <__lo0bits+0x52>
 8008da8:	079a      	lsls	r2, r3, #30
 8008daa:	bf49      	itett	mi
 8008dac:	085b      	lsrmi	r3, r3, #1
 8008dae:	089b      	lsrpl	r3, r3, #2
 8008db0:	6003      	strmi	r3, [r0, #0]
 8008db2:	2201      	movmi	r2, #1
 8008db4:	bf5c      	itt	pl
 8008db6:	6003      	strpl	r3, [r0, #0]
 8008db8:	2202      	movpl	r2, #2
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4770      	bx	lr
 8008dbe:	b299      	uxth	r1, r3
 8008dc0:	b909      	cbnz	r1, 8008dc6 <__lo0bits+0x2a>
 8008dc2:	0c1b      	lsrs	r3, r3, #16
 8008dc4:	2210      	movs	r2, #16
 8008dc6:	b2d9      	uxtb	r1, r3
 8008dc8:	b909      	cbnz	r1, 8008dce <__lo0bits+0x32>
 8008dca:	3208      	adds	r2, #8
 8008dcc:	0a1b      	lsrs	r3, r3, #8
 8008dce:	0719      	lsls	r1, r3, #28
 8008dd0:	bf04      	itt	eq
 8008dd2:	091b      	lsreq	r3, r3, #4
 8008dd4:	3204      	addeq	r2, #4
 8008dd6:	0799      	lsls	r1, r3, #30
 8008dd8:	bf04      	itt	eq
 8008dda:	089b      	lsreq	r3, r3, #2
 8008ddc:	3202      	addeq	r2, #2
 8008dde:	07d9      	lsls	r1, r3, #31
 8008de0:	d403      	bmi.n	8008dea <__lo0bits+0x4e>
 8008de2:	085b      	lsrs	r3, r3, #1
 8008de4:	f102 0201 	add.w	r2, r2, #1
 8008de8:	d003      	beq.n	8008df2 <__lo0bits+0x56>
 8008dea:	6003      	str	r3, [r0, #0]
 8008dec:	e7e5      	b.n	8008dba <__lo0bits+0x1e>
 8008dee:	2200      	movs	r2, #0
 8008df0:	e7e3      	b.n	8008dba <__lo0bits+0x1e>
 8008df2:	2220      	movs	r2, #32
 8008df4:	e7e1      	b.n	8008dba <__lo0bits+0x1e>
	...

08008df8 <__i2b>:
 8008df8:	b510      	push	{r4, lr}
 8008dfa:	460c      	mov	r4, r1
 8008dfc:	2101      	movs	r1, #1
 8008dfe:	f7ff ff05 	bl	8008c0c <_Balloc>
 8008e02:	4602      	mov	r2, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__i2b+0x1a>
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <__i2b+0x24>)
 8008e08:	4805      	ldr	r0, [pc, #20]	; (8008e20 <__i2b+0x28>)
 8008e0a:	f240 1145 	movw	r1, #325	; 0x145
 8008e0e:	f000 fd0d 	bl	800982c <__assert_func>
 8008e12:	2301      	movs	r3, #1
 8008e14:	6144      	str	r4, [r0, #20]
 8008e16:	6103      	str	r3, [r0, #16]
 8008e18:	bd10      	pop	{r4, pc}
 8008e1a:	bf00      	nop
 8008e1c:	0800af90 	.word	0x0800af90
 8008e20:	0800afa1 	.word	0x0800afa1

08008e24 <__multiply>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	4691      	mov	r9, r2
 8008e2a:	690a      	ldr	r2, [r1, #16]
 8008e2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	bfb8      	it	lt
 8008e34:	460b      	movlt	r3, r1
 8008e36:	460c      	mov	r4, r1
 8008e38:	bfbc      	itt	lt
 8008e3a:	464c      	movlt	r4, r9
 8008e3c:	4699      	movlt	r9, r3
 8008e3e:	6927      	ldr	r7, [r4, #16]
 8008e40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	6861      	ldr	r1, [r4, #4]
 8008e48:	eb07 060a 	add.w	r6, r7, sl
 8008e4c:	42b3      	cmp	r3, r6
 8008e4e:	b085      	sub	sp, #20
 8008e50:	bfb8      	it	lt
 8008e52:	3101      	addlt	r1, #1
 8008e54:	f7ff feda 	bl	8008c0c <_Balloc>
 8008e58:	b930      	cbnz	r0, 8008e68 <__multiply+0x44>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	4b44      	ldr	r3, [pc, #272]	; (8008f70 <__multiply+0x14c>)
 8008e5e:	4845      	ldr	r0, [pc, #276]	; (8008f74 <__multiply+0x150>)
 8008e60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008e64:	f000 fce2 	bl	800982c <__assert_func>
 8008e68:	f100 0514 	add.w	r5, r0, #20
 8008e6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e70:	462b      	mov	r3, r5
 8008e72:	2200      	movs	r2, #0
 8008e74:	4543      	cmp	r3, r8
 8008e76:	d321      	bcc.n	8008ebc <__multiply+0x98>
 8008e78:	f104 0314 	add.w	r3, r4, #20
 8008e7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008e80:	f109 0314 	add.w	r3, r9, #20
 8008e84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008e88:	9202      	str	r2, [sp, #8]
 8008e8a:	1b3a      	subs	r2, r7, r4
 8008e8c:	3a15      	subs	r2, #21
 8008e8e:	f022 0203 	bic.w	r2, r2, #3
 8008e92:	3204      	adds	r2, #4
 8008e94:	f104 0115 	add.w	r1, r4, #21
 8008e98:	428f      	cmp	r7, r1
 8008e9a:	bf38      	it	cc
 8008e9c:	2204      	movcc	r2, #4
 8008e9e:	9201      	str	r2, [sp, #4]
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d80c      	bhi.n	8008ec2 <__multiply+0x9e>
 8008ea8:	2e00      	cmp	r6, #0
 8008eaa:	dd03      	ble.n	8008eb4 <__multiply+0x90>
 8008eac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d05b      	beq.n	8008f6c <__multiply+0x148>
 8008eb4:	6106      	str	r6, [r0, #16]
 8008eb6:	b005      	add	sp, #20
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	f843 2b04 	str.w	r2, [r3], #4
 8008ec0:	e7d8      	b.n	8008e74 <__multiply+0x50>
 8008ec2:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ec6:	f1ba 0f00 	cmp.w	sl, #0
 8008eca:	d024      	beq.n	8008f16 <__multiply+0xf2>
 8008ecc:	f104 0e14 	add.w	lr, r4, #20
 8008ed0:	46a9      	mov	r9, r5
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008eda:	f8d9 1000 	ldr.w	r1, [r9]
 8008ede:	fa1f fb82 	uxth.w	fp, r2
 8008ee2:	b289      	uxth	r1, r1
 8008ee4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008ee8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008eec:	f8d9 2000 	ldr.w	r2, [r9]
 8008ef0:	4461      	add	r1, ip
 8008ef2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008ef6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008efa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008efe:	b289      	uxth	r1, r1
 8008f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f04:	4577      	cmp	r7, lr
 8008f06:	f849 1b04 	str.w	r1, [r9], #4
 8008f0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f0e:	d8e2      	bhi.n	8008ed6 <__multiply+0xb2>
 8008f10:	9a01      	ldr	r2, [sp, #4]
 8008f12:	f845 c002 	str.w	ip, [r5, r2]
 8008f16:	9a03      	ldr	r2, [sp, #12]
 8008f18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	f1b9 0f00 	cmp.w	r9, #0
 8008f22:	d021      	beq.n	8008f68 <__multiply+0x144>
 8008f24:	6829      	ldr	r1, [r5, #0]
 8008f26:	f104 0c14 	add.w	ip, r4, #20
 8008f2a:	46ae      	mov	lr, r5
 8008f2c:	f04f 0a00 	mov.w	sl, #0
 8008f30:	f8bc b000 	ldrh.w	fp, [ip]
 8008f34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f38:	fb09 220b 	mla	r2, r9, fp, r2
 8008f3c:	4452      	add	r2, sl
 8008f3e:	b289      	uxth	r1, r1
 8008f40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f44:	f84e 1b04 	str.w	r1, [lr], #4
 8008f48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008f4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f50:	f8be 1000 	ldrh.w	r1, [lr]
 8008f54:	fb09 110a 	mla	r1, r9, sl, r1
 8008f58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008f5c:	4567      	cmp	r7, ip
 8008f5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f62:	d8e5      	bhi.n	8008f30 <__multiply+0x10c>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	50a9      	str	r1, [r5, r2]
 8008f68:	3504      	adds	r5, #4
 8008f6a:	e799      	b.n	8008ea0 <__multiply+0x7c>
 8008f6c:	3e01      	subs	r6, #1
 8008f6e:	e79b      	b.n	8008ea8 <__multiply+0x84>
 8008f70:	0800af90 	.word	0x0800af90
 8008f74:	0800afa1 	.word	0x0800afa1

08008f78 <__pow5mult>:
 8008f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f7c:	4615      	mov	r5, r2
 8008f7e:	f012 0203 	ands.w	r2, r2, #3
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	d007      	beq.n	8008f98 <__pow5mult+0x20>
 8008f88:	4c25      	ldr	r4, [pc, #148]	; (8009020 <__pow5mult+0xa8>)
 8008f8a:	3a01      	subs	r2, #1
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f92:	f7ff fe9d 	bl	8008cd0 <__multadd>
 8008f96:	4607      	mov	r7, r0
 8008f98:	10ad      	asrs	r5, r5, #2
 8008f9a:	d03d      	beq.n	8009018 <__pow5mult+0xa0>
 8008f9c:	69f4      	ldr	r4, [r6, #28]
 8008f9e:	b97c      	cbnz	r4, 8008fc0 <__pow5mult+0x48>
 8008fa0:	2010      	movs	r0, #16
 8008fa2:	f7ff fd7f 	bl	8008aa4 <malloc>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	61f0      	str	r0, [r6, #28]
 8008faa:	b928      	cbnz	r0, 8008fb8 <__pow5mult+0x40>
 8008fac:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <__pow5mult+0xac>)
 8008fae:	481e      	ldr	r0, [pc, #120]	; (8009028 <__pow5mult+0xb0>)
 8008fb0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008fb4:	f000 fc3a 	bl	800982c <__assert_func>
 8008fb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fbc:	6004      	str	r4, [r0, #0]
 8008fbe:	60c4      	str	r4, [r0, #12]
 8008fc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008fc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fc8:	b94c      	cbnz	r4, 8008fde <__pow5mult+0x66>
 8008fca:	f240 2171 	movw	r1, #625	; 0x271
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f7ff ff12 	bl	8008df8 <__i2b>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fda:	4604      	mov	r4, r0
 8008fdc:	6003      	str	r3, [r0, #0]
 8008fde:	f04f 0900 	mov.w	r9, #0
 8008fe2:	07eb      	lsls	r3, r5, #31
 8008fe4:	d50a      	bpl.n	8008ffc <__pow5mult+0x84>
 8008fe6:	4639      	mov	r1, r7
 8008fe8:	4622      	mov	r2, r4
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff ff1a 	bl	8008e24 <__multiply>
 8008ff0:	4639      	mov	r1, r7
 8008ff2:	4680      	mov	r8, r0
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	f7ff fe49 	bl	8008c8c <_Bfree>
 8008ffa:	4647      	mov	r7, r8
 8008ffc:	106d      	asrs	r5, r5, #1
 8008ffe:	d00b      	beq.n	8009018 <__pow5mult+0xa0>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	b938      	cbnz	r0, 8009014 <__pow5mult+0x9c>
 8009004:	4622      	mov	r2, r4
 8009006:	4621      	mov	r1, r4
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff ff0b 	bl	8008e24 <__multiply>
 800900e:	6020      	str	r0, [r4, #0]
 8009010:	f8c0 9000 	str.w	r9, [r0]
 8009014:	4604      	mov	r4, r0
 8009016:	e7e4      	b.n	8008fe2 <__pow5mult+0x6a>
 8009018:	4638      	mov	r0, r7
 800901a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901e:	bf00      	nop
 8009020:	0800b0f0 	.word	0x0800b0f0
 8009024:	0800af21 	.word	0x0800af21
 8009028:	0800afa1 	.word	0x0800afa1

0800902c <__lshift>:
 800902c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009030:	460c      	mov	r4, r1
 8009032:	6849      	ldr	r1, [r1, #4]
 8009034:	6923      	ldr	r3, [r4, #16]
 8009036:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	4607      	mov	r7, r0
 800903e:	4691      	mov	r9, r2
 8009040:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009044:	f108 0601 	add.w	r6, r8, #1
 8009048:	42b3      	cmp	r3, r6
 800904a:	db0b      	blt.n	8009064 <__lshift+0x38>
 800904c:	4638      	mov	r0, r7
 800904e:	f7ff fddd 	bl	8008c0c <_Balloc>
 8009052:	4605      	mov	r5, r0
 8009054:	b948      	cbnz	r0, 800906a <__lshift+0x3e>
 8009056:	4602      	mov	r2, r0
 8009058:	4b28      	ldr	r3, [pc, #160]	; (80090fc <__lshift+0xd0>)
 800905a:	4829      	ldr	r0, [pc, #164]	; (8009100 <__lshift+0xd4>)
 800905c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009060:	f000 fbe4 	bl	800982c <__assert_func>
 8009064:	3101      	adds	r1, #1
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	e7ee      	b.n	8009048 <__lshift+0x1c>
 800906a:	2300      	movs	r3, #0
 800906c:	f100 0114 	add.w	r1, r0, #20
 8009070:	f100 0210 	add.w	r2, r0, #16
 8009074:	4618      	mov	r0, r3
 8009076:	4553      	cmp	r3, sl
 8009078:	db33      	blt.n	80090e2 <__lshift+0xb6>
 800907a:	6920      	ldr	r0, [r4, #16]
 800907c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009080:	f104 0314 	add.w	r3, r4, #20
 8009084:	f019 091f 	ands.w	r9, r9, #31
 8009088:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800908c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009090:	d02b      	beq.n	80090ea <__lshift+0xbe>
 8009092:	f1c9 0e20 	rsb	lr, r9, #32
 8009096:	468a      	mov	sl, r1
 8009098:	2200      	movs	r2, #0
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	fa00 f009 	lsl.w	r0, r0, r9
 80090a0:	4310      	orrs	r0, r2
 80090a2:	f84a 0b04 	str.w	r0, [sl], #4
 80090a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80090aa:	459c      	cmp	ip, r3
 80090ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80090b0:	d8f3      	bhi.n	800909a <__lshift+0x6e>
 80090b2:	ebac 0304 	sub.w	r3, ip, r4
 80090b6:	3b15      	subs	r3, #21
 80090b8:	f023 0303 	bic.w	r3, r3, #3
 80090bc:	3304      	adds	r3, #4
 80090be:	f104 0015 	add.w	r0, r4, #21
 80090c2:	4584      	cmp	ip, r0
 80090c4:	bf38      	it	cc
 80090c6:	2304      	movcc	r3, #4
 80090c8:	50ca      	str	r2, [r1, r3]
 80090ca:	b10a      	cbz	r2, 80090d0 <__lshift+0xa4>
 80090cc:	f108 0602 	add.w	r6, r8, #2
 80090d0:	3e01      	subs	r6, #1
 80090d2:	4638      	mov	r0, r7
 80090d4:	612e      	str	r6, [r5, #16]
 80090d6:	4621      	mov	r1, r4
 80090d8:	f7ff fdd8 	bl	8008c8c <_Bfree>
 80090dc:	4628      	mov	r0, r5
 80090de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80090e6:	3301      	adds	r3, #1
 80090e8:	e7c5      	b.n	8009076 <__lshift+0x4a>
 80090ea:	3904      	subs	r1, #4
 80090ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80090f4:	459c      	cmp	ip, r3
 80090f6:	d8f9      	bhi.n	80090ec <__lshift+0xc0>
 80090f8:	e7ea      	b.n	80090d0 <__lshift+0xa4>
 80090fa:	bf00      	nop
 80090fc:	0800af90 	.word	0x0800af90
 8009100:	0800afa1 	.word	0x0800afa1

08009104 <__mcmp>:
 8009104:	b530      	push	{r4, r5, lr}
 8009106:	6902      	ldr	r2, [r0, #16]
 8009108:	690c      	ldr	r4, [r1, #16]
 800910a:	1b12      	subs	r2, r2, r4
 800910c:	d10e      	bne.n	800912c <__mcmp+0x28>
 800910e:	f100 0314 	add.w	r3, r0, #20
 8009112:	3114      	adds	r1, #20
 8009114:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009118:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800911c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009120:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009124:	42a5      	cmp	r5, r4
 8009126:	d003      	beq.n	8009130 <__mcmp+0x2c>
 8009128:	d305      	bcc.n	8009136 <__mcmp+0x32>
 800912a:	2201      	movs	r2, #1
 800912c:	4610      	mov	r0, r2
 800912e:	bd30      	pop	{r4, r5, pc}
 8009130:	4283      	cmp	r3, r0
 8009132:	d3f3      	bcc.n	800911c <__mcmp+0x18>
 8009134:	e7fa      	b.n	800912c <__mcmp+0x28>
 8009136:	f04f 32ff 	mov.w	r2, #4294967295
 800913a:	e7f7      	b.n	800912c <__mcmp+0x28>

0800913c <__mdiff>:
 800913c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	460c      	mov	r4, r1
 8009142:	4606      	mov	r6, r0
 8009144:	4611      	mov	r1, r2
 8009146:	4620      	mov	r0, r4
 8009148:	4690      	mov	r8, r2
 800914a:	f7ff ffdb 	bl	8009104 <__mcmp>
 800914e:	1e05      	subs	r5, r0, #0
 8009150:	d110      	bne.n	8009174 <__mdiff+0x38>
 8009152:	4629      	mov	r1, r5
 8009154:	4630      	mov	r0, r6
 8009156:	f7ff fd59 	bl	8008c0c <_Balloc>
 800915a:	b930      	cbnz	r0, 800916a <__mdiff+0x2e>
 800915c:	4b3a      	ldr	r3, [pc, #232]	; (8009248 <__mdiff+0x10c>)
 800915e:	4602      	mov	r2, r0
 8009160:	f240 2137 	movw	r1, #567	; 0x237
 8009164:	4839      	ldr	r0, [pc, #228]	; (800924c <__mdiff+0x110>)
 8009166:	f000 fb61 	bl	800982c <__assert_func>
 800916a:	2301      	movs	r3, #1
 800916c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	bfa4      	itt	ge
 8009176:	4643      	movge	r3, r8
 8009178:	46a0      	movge	r8, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009180:	bfa6      	itte	ge
 8009182:	461c      	movge	r4, r3
 8009184:	2500      	movge	r5, #0
 8009186:	2501      	movlt	r5, #1
 8009188:	f7ff fd40 	bl	8008c0c <_Balloc>
 800918c:	b920      	cbnz	r0, 8009198 <__mdiff+0x5c>
 800918e:	4b2e      	ldr	r3, [pc, #184]	; (8009248 <__mdiff+0x10c>)
 8009190:	4602      	mov	r2, r0
 8009192:	f240 2145 	movw	r1, #581	; 0x245
 8009196:	e7e5      	b.n	8009164 <__mdiff+0x28>
 8009198:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800919c:	6926      	ldr	r6, [r4, #16]
 800919e:	60c5      	str	r5, [r0, #12]
 80091a0:	f104 0914 	add.w	r9, r4, #20
 80091a4:	f108 0514 	add.w	r5, r8, #20
 80091a8:	f100 0e14 	add.w	lr, r0, #20
 80091ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80091b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091b4:	f108 0210 	add.w	r2, r8, #16
 80091b8:	46f2      	mov	sl, lr
 80091ba:	2100      	movs	r1, #0
 80091bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80091c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80091c4:	fa11 f88b 	uxtah	r8, r1, fp
 80091c8:	b299      	uxth	r1, r3
 80091ca:	0c1b      	lsrs	r3, r3, #16
 80091cc:	eba8 0801 	sub.w	r8, r8, r1
 80091d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80091d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80091d8:	fa1f f888 	uxth.w	r8, r8
 80091dc:	1419      	asrs	r1, r3, #16
 80091de:	454e      	cmp	r6, r9
 80091e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80091e4:	f84a 3b04 	str.w	r3, [sl], #4
 80091e8:	d8e8      	bhi.n	80091bc <__mdiff+0x80>
 80091ea:	1b33      	subs	r3, r6, r4
 80091ec:	3b15      	subs	r3, #21
 80091ee:	f023 0303 	bic.w	r3, r3, #3
 80091f2:	3304      	adds	r3, #4
 80091f4:	3415      	adds	r4, #21
 80091f6:	42a6      	cmp	r6, r4
 80091f8:	bf38      	it	cc
 80091fa:	2304      	movcc	r3, #4
 80091fc:	441d      	add	r5, r3
 80091fe:	4473      	add	r3, lr
 8009200:	469e      	mov	lr, r3
 8009202:	462e      	mov	r6, r5
 8009204:	4566      	cmp	r6, ip
 8009206:	d30e      	bcc.n	8009226 <__mdiff+0xea>
 8009208:	f10c 0203 	add.w	r2, ip, #3
 800920c:	1b52      	subs	r2, r2, r5
 800920e:	f022 0203 	bic.w	r2, r2, #3
 8009212:	3d03      	subs	r5, #3
 8009214:	45ac      	cmp	ip, r5
 8009216:	bf38      	it	cc
 8009218:	2200      	movcc	r2, #0
 800921a:	4413      	add	r3, r2
 800921c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009220:	b17a      	cbz	r2, 8009242 <__mdiff+0x106>
 8009222:	6107      	str	r7, [r0, #16]
 8009224:	e7a4      	b.n	8009170 <__mdiff+0x34>
 8009226:	f856 8b04 	ldr.w	r8, [r6], #4
 800922a:	fa11 f288 	uxtah	r2, r1, r8
 800922e:	1414      	asrs	r4, r2, #16
 8009230:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009234:	b292      	uxth	r2, r2
 8009236:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800923a:	f84e 2b04 	str.w	r2, [lr], #4
 800923e:	1421      	asrs	r1, r4, #16
 8009240:	e7e0      	b.n	8009204 <__mdiff+0xc8>
 8009242:	3f01      	subs	r7, #1
 8009244:	e7ea      	b.n	800921c <__mdiff+0xe0>
 8009246:	bf00      	nop
 8009248:	0800af90 	.word	0x0800af90
 800924c:	0800afa1 	.word	0x0800afa1

08009250 <__d2b>:
 8009250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009254:	460f      	mov	r7, r1
 8009256:	2101      	movs	r1, #1
 8009258:	ec59 8b10 	vmov	r8, r9, d0
 800925c:	4616      	mov	r6, r2
 800925e:	f7ff fcd5 	bl	8008c0c <_Balloc>
 8009262:	4604      	mov	r4, r0
 8009264:	b930      	cbnz	r0, 8009274 <__d2b+0x24>
 8009266:	4602      	mov	r2, r0
 8009268:	4b24      	ldr	r3, [pc, #144]	; (80092fc <__d2b+0xac>)
 800926a:	4825      	ldr	r0, [pc, #148]	; (8009300 <__d2b+0xb0>)
 800926c:	f240 310f 	movw	r1, #783	; 0x30f
 8009270:	f000 fadc 	bl	800982c <__assert_func>
 8009274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800927c:	bb2d      	cbnz	r5, 80092ca <__d2b+0x7a>
 800927e:	9301      	str	r3, [sp, #4]
 8009280:	f1b8 0300 	subs.w	r3, r8, #0
 8009284:	d026      	beq.n	80092d4 <__d2b+0x84>
 8009286:	4668      	mov	r0, sp
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	f7ff fd87 	bl	8008d9c <__lo0bits>
 800928e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009292:	b1e8      	cbz	r0, 80092d0 <__d2b+0x80>
 8009294:	f1c0 0320 	rsb	r3, r0, #32
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	430b      	orrs	r3, r1
 800929e:	40c2      	lsrs	r2, r0
 80092a0:	6163      	str	r3, [r4, #20]
 80092a2:	9201      	str	r2, [sp, #4]
 80092a4:	9b01      	ldr	r3, [sp, #4]
 80092a6:	61a3      	str	r3, [r4, #24]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	bf14      	ite	ne
 80092ac:	2202      	movne	r2, #2
 80092ae:	2201      	moveq	r2, #1
 80092b0:	6122      	str	r2, [r4, #16]
 80092b2:	b1bd      	cbz	r5, 80092e4 <__d2b+0x94>
 80092b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092b8:	4405      	add	r5, r0
 80092ba:	603d      	str	r5, [r7, #0]
 80092bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80092c0:	6030      	str	r0, [r6, #0]
 80092c2:	4620      	mov	r0, r4
 80092c4:	b003      	add	sp, #12
 80092c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80092ce:	e7d6      	b.n	800927e <__d2b+0x2e>
 80092d0:	6161      	str	r1, [r4, #20]
 80092d2:	e7e7      	b.n	80092a4 <__d2b+0x54>
 80092d4:	a801      	add	r0, sp, #4
 80092d6:	f7ff fd61 	bl	8008d9c <__lo0bits>
 80092da:	9b01      	ldr	r3, [sp, #4]
 80092dc:	6163      	str	r3, [r4, #20]
 80092de:	3020      	adds	r0, #32
 80092e0:	2201      	movs	r2, #1
 80092e2:	e7e5      	b.n	80092b0 <__d2b+0x60>
 80092e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80092e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80092ec:	6038      	str	r0, [r7, #0]
 80092ee:	6918      	ldr	r0, [r3, #16]
 80092f0:	f7ff fd34 	bl	8008d5c <__hi0bits>
 80092f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80092f8:	e7e2      	b.n	80092c0 <__d2b+0x70>
 80092fa:	bf00      	nop
 80092fc:	0800af90 	.word	0x0800af90
 8009300:	0800afa1 	.word	0x0800afa1

08009304 <__sfputc_r>:
 8009304:	6893      	ldr	r3, [r2, #8]
 8009306:	3b01      	subs	r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	b410      	push	{r4}
 800930c:	6093      	str	r3, [r2, #8]
 800930e:	da08      	bge.n	8009322 <__sfputc_r+0x1e>
 8009310:	6994      	ldr	r4, [r2, #24]
 8009312:	42a3      	cmp	r3, r4
 8009314:	db01      	blt.n	800931a <__sfputc_r+0x16>
 8009316:	290a      	cmp	r1, #10
 8009318:	d103      	bne.n	8009322 <__sfputc_r+0x1e>
 800931a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800931e:	f7fe bbe6 	b.w	8007aee <__swbuf_r>
 8009322:	6813      	ldr	r3, [r2, #0]
 8009324:	1c58      	adds	r0, r3, #1
 8009326:	6010      	str	r0, [r2, #0]
 8009328:	7019      	strb	r1, [r3, #0]
 800932a:	4608      	mov	r0, r1
 800932c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009330:	4770      	bx	lr

08009332 <__sfputs_r>:
 8009332:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009334:	4606      	mov	r6, r0
 8009336:	460f      	mov	r7, r1
 8009338:	4614      	mov	r4, r2
 800933a:	18d5      	adds	r5, r2, r3
 800933c:	42ac      	cmp	r4, r5
 800933e:	d101      	bne.n	8009344 <__sfputs_r+0x12>
 8009340:	2000      	movs	r0, #0
 8009342:	e007      	b.n	8009354 <__sfputs_r+0x22>
 8009344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009348:	463a      	mov	r2, r7
 800934a:	4630      	mov	r0, r6
 800934c:	f7ff ffda 	bl	8009304 <__sfputc_r>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d1f3      	bne.n	800933c <__sfputs_r+0xa>
 8009354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009358 <_vfiprintf_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	460d      	mov	r5, r1
 800935e:	b09d      	sub	sp, #116	; 0x74
 8009360:	4614      	mov	r4, r2
 8009362:	4698      	mov	r8, r3
 8009364:	4606      	mov	r6, r0
 8009366:	b118      	cbz	r0, 8009370 <_vfiprintf_r+0x18>
 8009368:	6a03      	ldr	r3, [r0, #32]
 800936a:	b90b      	cbnz	r3, 8009370 <_vfiprintf_r+0x18>
 800936c:	f7fe fad8 	bl	8007920 <__sinit>
 8009370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009372:	07d9      	lsls	r1, r3, #31
 8009374:	d405      	bmi.n	8009382 <_vfiprintf_r+0x2a>
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	059a      	lsls	r2, r3, #22
 800937a:	d402      	bmi.n	8009382 <_vfiprintf_r+0x2a>
 800937c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937e:	f7fe fcc8 	bl	8007d12 <__retarget_lock_acquire_recursive>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	071b      	lsls	r3, r3, #28
 8009386:	d501      	bpl.n	800938c <_vfiprintf_r+0x34>
 8009388:	692b      	ldr	r3, [r5, #16]
 800938a:	b99b      	cbnz	r3, 80093b4 <_vfiprintf_r+0x5c>
 800938c:	4629      	mov	r1, r5
 800938e:	4630      	mov	r0, r6
 8009390:	f7fe fbea 	bl	8007b68 <__swsetup_r>
 8009394:	b170      	cbz	r0, 80093b4 <_vfiprintf_r+0x5c>
 8009396:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009398:	07dc      	lsls	r4, r3, #31
 800939a:	d504      	bpl.n	80093a6 <_vfiprintf_r+0x4e>
 800939c:	f04f 30ff 	mov.w	r0, #4294967295
 80093a0:	b01d      	add	sp, #116	; 0x74
 80093a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a6:	89ab      	ldrh	r3, [r5, #12]
 80093a8:	0598      	lsls	r0, r3, #22
 80093aa:	d4f7      	bmi.n	800939c <_vfiprintf_r+0x44>
 80093ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ae:	f7fe fcb1 	bl	8007d14 <__retarget_lock_release_recursive>
 80093b2:	e7f3      	b.n	800939c <_vfiprintf_r+0x44>
 80093b4:	2300      	movs	r3, #0
 80093b6:	9309      	str	r3, [sp, #36]	; 0x24
 80093b8:	2320      	movs	r3, #32
 80093ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093be:	f8cd 800c 	str.w	r8, [sp, #12]
 80093c2:	2330      	movs	r3, #48	; 0x30
 80093c4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009578 <_vfiprintf_r+0x220>
 80093c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093cc:	f04f 0901 	mov.w	r9, #1
 80093d0:	4623      	mov	r3, r4
 80093d2:	469a      	mov	sl, r3
 80093d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093d8:	b10a      	cbz	r2, 80093de <_vfiprintf_r+0x86>
 80093da:	2a25      	cmp	r2, #37	; 0x25
 80093dc:	d1f9      	bne.n	80093d2 <_vfiprintf_r+0x7a>
 80093de:	ebba 0b04 	subs.w	fp, sl, r4
 80093e2:	d00b      	beq.n	80093fc <_vfiprintf_r+0xa4>
 80093e4:	465b      	mov	r3, fp
 80093e6:	4622      	mov	r2, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	4630      	mov	r0, r6
 80093ec:	f7ff ffa1 	bl	8009332 <__sfputs_r>
 80093f0:	3001      	adds	r0, #1
 80093f2:	f000 80a9 	beq.w	8009548 <_vfiprintf_r+0x1f0>
 80093f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f8:	445a      	add	r2, fp
 80093fa:	9209      	str	r2, [sp, #36]	; 0x24
 80093fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009400:	2b00      	cmp	r3, #0
 8009402:	f000 80a1 	beq.w	8009548 <_vfiprintf_r+0x1f0>
 8009406:	2300      	movs	r3, #0
 8009408:	f04f 32ff 	mov.w	r2, #4294967295
 800940c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009410:	f10a 0a01 	add.w	sl, sl, #1
 8009414:	9304      	str	r3, [sp, #16]
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800941c:	931a      	str	r3, [sp, #104]	; 0x68
 800941e:	4654      	mov	r4, sl
 8009420:	2205      	movs	r2, #5
 8009422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009426:	4854      	ldr	r0, [pc, #336]	; (8009578 <_vfiprintf_r+0x220>)
 8009428:	f7f6 fed2 	bl	80001d0 <memchr>
 800942c:	9a04      	ldr	r2, [sp, #16]
 800942e:	b9d8      	cbnz	r0, 8009468 <_vfiprintf_r+0x110>
 8009430:	06d1      	lsls	r1, r2, #27
 8009432:	bf44      	itt	mi
 8009434:	2320      	movmi	r3, #32
 8009436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800943a:	0713      	lsls	r3, r2, #28
 800943c:	bf44      	itt	mi
 800943e:	232b      	movmi	r3, #43	; 0x2b
 8009440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009444:	f89a 3000 	ldrb.w	r3, [sl]
 8009448:	2b2a      	cmp	r3, #42	; 0x2a
 800944a:	d015      	beq.n	8009478 <_vfiprintf_r+0x120>
 800944c:	9a07      	ldr	r2, [sp, #28]
 800944e:	4654      	mov	r4, sl
 8009450:	2000      	movs	r0, #0
 8009452:	f04f 0c0a 	mov.w	ip, #10
 8009456:	4621      	mov	r1, r4
 8009458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800945c:	3b30      	subs	r3, #48	; 0x30
 800945e:	2b09      	cmp	r3, #9
 8009460:	d94d      	bls.n	80094fe <_vfiprintf_r+0x1a6>
 8009462:	b1b0      	cbz	r0, 8009492 <_vfiprintf_r+0x13a>
 8009464:	9207      	str	r2, [sp, #28]
 8009466:	e014      	b.n	8009492 <_vfiprintf_r+0x13a>
 8009468:	eba0 0308 	sub.w	r3, r0, r8
 800946c:	fa09 f303 	lsl.w	r3, r9, r3
 8009470:	4313      	orrs	r3, r2
 8009472:	9304      	str	r3, [sp, #16]
 8009474:	46a2      	mov	sl, r4
 8009476:	e7d2      	b.n	800941e <_vfiprintf_r+0xc6>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	1d19      	adds	r1, r3, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	9103      	str	r1, [sp, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	bfbb      	ittet	lt
 8009484:	425b      	neglt	r3, r3
 8009486:	f042 0202 	orrlt.w	r2, r2, #2
 800948a:	9307      	strge	r3, [sp, #28]
 800948c:	9307      	strlt	r3, [sp, #28]
 800948e:	bfb8      	it	lt
 8009490:	9204      	strlt	r2, [sp, #16]
 8009492:	7823      	ldrb	r3, [r4, #0]
 8009494:	2b2e      	cmp	r3, #46	; 0x2e
 8009496:	d10c      	bne.n	80094b2 <_vfiprintf_r+0x15a>
 8009498:	7863      	ldrb	r3, [r4, #1]
 800949a:	2b2a      	cmp	r3, #42	; 0x2a
 800949c:	d134      	bne.n	8009508 <_vfiprintf_r+0x1b0>
 800949e:	9b03      	ldr	r3, [sp, #12]
 80094a0:	1d1a      	adds	r2, r3, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	9203      	str	r2, [sp, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bfb8      	it	lt
 80094aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80094ae:	3402      	adds	r4, #2
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009588 <_vfiprintf_r+0x230>
 80094b6:	7821      	ldrb	r1, [r4, #0]
 80094b8:	2203      	movs	r2, #3
 80094ba:	4650      	mov	r0, sl
 80094bc:	f7f6 fe88 	bl	80001d0 <memchr>
 80094c0:	b138      	cbz	r0, 80094d2 <_vfiprintf_r+0x17a>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	eba0 000a 	sub.w	r0, r0, sl
 80094c8:	2240      	movs	r2, #64	; 0x40
 80094ca:	4082      	lsls	r2, r0
 80094cc:	4313      	orrs	r3, r2
 80094ce:	3401      	adds	r4, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	4829      	ldr	r0, [pc, #164]	; (800957c <_vfiprintf_r+0x224>)
 80094d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094dc:	2206      	movs	r2, #6
 80094de:	f7f6 fe77 	bl	80001d0 <memchr>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d03f      	beq.n	8009566 <_vfiprintf_r+0x20e>
 80094e6:	4b26      	ldr	r3, [pc, #152]	; (8009580 <_vfiprintf_r+0x228>)
 80094e8:	bb1b      	cbnz	r3, 8009532 <_vfiprintf_r+0x1da>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	3307      	adds	r3, #7
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	3308      	adds	r3, #8
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094f8:	443b      	add	r3, r7
 80094fa:	9309      	str	r3, [sp, #36]	; 0x24
 80094fc:	e768      	b.n	80093d0 <_vfiprintf_r+0x78>
 80094fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009502:	460c      	mov	r4, r1
 8009504:	2001      	movs	r0, #1
 8009506:	e7a6      	b.n	8009456 <_vfiprintf_r+0xfe>
 8009508:	2300      	movs	r3, #0
 800950a:	3401      	adds	r4, #1
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	4619      	mov	r1, r3
 8009510:	f04f 0c0a 	mov.w	ip, #10
 8009514:	4620      	mov	r0, r4
 8009516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800951a:	3a30      	subs	r2, #48	; 0x30
 800951c:	2a09      	cmp	r2, #9
 800951e:	d903      	bls.n	8009528 <_vfiprintf_r+0x1d0>
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0c6      	beq.n	80094b2 <_vfiprintf_r+0x15a>
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	e7c4      	b.n	80094b2 <_vfiprintf_r+0x15a>
 8009528:	fb0c 2101 	mla	r1, ip, r1, r2
 800952c:	4604      	mov	r4, r0
 800952e:	2301      	movs	r3, #1
 8009530:	e7f0      	b.n	8009514 <_vfiprintf_r+0x1bc>
 8009532:	ab03      	add	r3, sp, #12
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	462a      	mov	r2, r5
 8009538:	4b12      	ldr	r3, [pc, #72]	; (8009584 <_vfiprintf_r+0x22c>)
 800953a:	a904      	add	r1, sp, #16
 800953c:	4630      	mov	r0, r6
 800953e:	f7fd fd9d 	bl	800707c <_printf_float>
 8009542:	4607      	mov	r7, r0
 8009544:	1c78      	adds	r0, r7, #1
 8009546:	d1d6      	bne.n	80094f6 <_vfiprintf_r+0x19e>
 8009548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800954a:	07d9      	lsls	r1, r3, #31
 800954c:	d405      	bmi.n	800955a <_vfiprintf_r+0x202>
 800954e:	89ab      	ldrh	r3, [r5, #12]
 8009550:	059a      	lsls	r2, r3, #22
 8009552:	d402      	bmi.n	800955a <_vfiprintf_r+0x202>
 8009554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009556:	f7fe fbdd 	bl	8007d14 <__retarget_lock_release_recursive>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	065b      	lsls	r3, r3, #25
 800955e:	f53f af1d 	bmi.w	800939c <_vfiprintf_r+0x44>
 8009562:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009564:	e71c      	b.n	80093a0 <_vfiprintf_r+0x48>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b05      	ldr	r3, [pc, #20]	; (8009584 <_vfiprintf_r+0x22c>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4630      	mov	r0, r6
 8009572:	f7fe f827 	bl	80075c4 <_printf_i>
 8009576:	e7e4      	b.n	8009542 <_vfiprintf_r+0x1ea>
 8009578:	0800b0fc 	.word	0x0800b0fc
 800957c:	0800b106 	.word	0x0800b106
 8009580:	0800707d 	.word	0x0800707d
 8009584:	08009333 	.word	0x08009333
 8009588:	0800b102 	.word	0x0800b102

0800958c <__sflush_r>:
 800958c:	898a      	ldrh	r2, [r1, #12]
 800958e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009592:	4605      	mov	r5, r0
 8009594:	0710      	lsls	r0, r2, #28
 8009596:	460c      	mov	r4, r1
 8009598:	d458      	bmi.n	800964c <__sflush_r+0xc0>
 800959a:	684b      	ldr	r3, [r1, #4]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dc05      	bgt.n	80095ac <__sflush_r+0x20>
 80095a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	dc02      	bgt.n	80095ac <__sflush_r+0x20>
 80095a6:	2000      	movs	r0, #0
 80095a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ae:	2e00      	cmp	r6, #0
 80095b0:	d0f9      	beq.n	80095a6 <__sflush_r+0x1a>
 80095b2:	2300      	movs	r3, #0
 80095b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095b8:	682f      	ldr	r7, [r5, #0]
 80095ba:	6a21      	ldr	r1, [r4, #32]
 80095bc:	602b      	str	r3, [r5, #0]
 80095be:	d032      	beq.n	8009626 <__sflush_r+0x9a>
 80095c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	075a      	lsls	r2, r3, #29
 80095c6:	d505      	bpl.n	80095d4 <__sflush_r+0x48>
 80095c8:	6863      	ldr	r3, [r4, #4]
 80095ca:	1ac0      	subs	r0, r0, r3
 80095cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095ce:	b10b      	cbz	r3, 80095d4 <__sflush_r+0x48>
 80095d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095d2:	1ac0      	subs	r0, r0, r3
 80095d4:	2300      	movs	r3, #0
 80095d6:	4602      	mov	r2, r0
 80095d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095da:	6a21      	ldr	r1, [r4, #32]
 80095dc:	4628      	mov	r0, r5
 80095de:	47b0      	blx	r6
 80095e0:	1c43      	adds	r3, r0, #1
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	d106      	bne.n	80095f4 <__sflush_r+0x68>
 80095e6:	6829      	ldr	r1, [r5, #0]
 80095e8:	291d      	cmp	r1, #29
 80095ea:	d82b      	bhi.n	8009644 <__sflush_r+0xb8>
 80095ec:	4a29      	ldr	r2, [pc, #164]	; (8009694 <__sflush_r+0x108>)
 80095ee:	410a      	asrs	r2, r1
 80095f0:	07d6      	lsls	r6, r2, #31
 80095f2:	d427      	bmi.n	8009644 <__sflush_r+0xb8>
 80095f4:	2200      	movs	r2, #0
 80095f6:	6062      	str	r2, [r4, #4]
 80095f8:	04d9      	lsls	r1, r3, #19
 80095fa:	6922      	ldr	r2, [r4, #16]
 80095fc:	6022      	str	r2, [r4, #0]
 80095fe:	d504      	bpl.n	800960a <__sflush_r+0x7e>
 8009600:	1c42      	adds	r2, r0, #1
 8009602:	d101      	bne.n	8009608 <__sflush_r+0x7c>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b903      	cbnz	r3, 800960a <__sflush_r+0x7e>
 8009608:	6560      	str	r0, [r4, #84]	; 0x54
 800960a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960c:	602f      	str	r7, [r5, #0]
 800960e:	2900      	cmp	r1, #0
 8009610:	d0c9      	beq.n	80095a6 <__sflush_r+0x1a>
 8009612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009616:	4299      	cmp	r1, r3
 8009618:	d002      	beq.n	8009620 <__sflush_r+0x94>
 800961a:	4628      	mov	r0, r5
 800961c:	f7ff f9f6 	bl	8008a0c <_free_r>
 8009620:	2000      	movs	r0, #0
 8009622:	6360      	str	r0, [r4, #52]	; 0x34
 8009624:	e7c0      	b.n	80095a8 <__sflush_r+0x1c>
 8009626:	2301      	movs	r3, #1
 8009628:	4628      	mov	r0, r5
 800962a:	47b0      	blx	r6
 800962c:	1c41      	adds	r1, r0, #1
 800962e:	d1c8      	bne.n	80095c2 <__sflush_r+0x36>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0c5      	beq.n	80095c2 <__sflush_r+0x36>
 8009636:	2b1d      	cmp	r3, #29
 8009638:	d001      	beq.n	800963e <__sflush_r+0xb2>
 800963a:	2b16      	cmp	r3, #22
 800963c:	d101      	bne.n	8009642 <__sflush_r+0xb6>
 800963e:	602f      	str	r7, [r5, #0]
 8009640:	e7b1      	b.n	80095a6 <__sflush_r+0x1a>
 8009642:	89a3      	ldrh	r3, [r4, #12]
 8009644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	e7ad      	b.n	80095a8 <__sflush_r+0x1c>
 800964c:	690f      	ldr	r7, [r1, #16]
 800964e:	2f00      	cmp	r7, #0
 8009650:	d0a9      	beq.n	80095a6 <__sflush_r+0x1a>
 8009652:	0793      	lsls	r3, r2, #30
 8009654:	680e      	ldr	r6, [r1, #0]
 8009656:	bf08      	it	eq
 8009658:	694b      	ldreq	r3, [r1, #20]
 800965a:	600f      	str	r7, [r1, #0]
 800965c:	bf18      	it	ne
 800965e:	2300      	movne	r3, #0
 8009660:	eba6 0807 	sub.w	r8, r6, r7
 8009664:	608b      	str	r3, [r1, #8]
 8009666:	f1b8 0f00 	cmp.w	r8, #0
 800966a:	dd9c      	ble.n	80095a6 <__sflush_r+0x1a>
 800966c:	6a21      	ldr	r1, [r4, #32]
 800966e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009670:	4643      	mov	r3, r8
 8009672:	463a      	mov	r2, r7
 8009674:	4628      	mov	r0, r5
 8009676:	47b0      	blx	r6
 8009678:	2800      	cmp	r0, #0
 800967a:	dc06      	bgt.n	800968a <__sflush_r+0xfe>
 800967c:	89a3      	ldrh	r3, [r4, #12]
 800967e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	f04f 30ff 	mov.w	r0, #4294967295
 8009688:	e78e      	b.n	80095a8 <__sflush_r+0x1c>
 800968a:	4407      	add	r7, r0
 800968c:	eba8 0800 	sub.w	r8, r8, r0
 8009690:	e7e9      	b.n	8009666 <__sflush_r+0xda>
 8009692:	bf00      	nop
 8009694:	dfbffffe 	.word	0xdfbffffe

08009698 <_fflush_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	690b      	ldr	r3, [r1, #16]
 800969c:	4605      	mov	r5, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	b913      	cbnz	r3, 80096a8 <_fflush_r+0x10>
 80096a2:	2500      	movs	r5, #0
 80096a4:	4628      	mov	r0, r5
 80096a6:	bd38      	pop	{r3, r4, r5, pc}
 80096a8:	b118      	cbz	r0, 80096b2 <_fflush_r+0x1a>
 80096aa:	6a03      	ldr	r3, [r0, #32]
 80096ac:	b90b      	cbnz	r3, 80096b2 <_fflush_r+0x1a>
 80096ae:	f7fe f937 	bl	8007920 <__sinit>
 80096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d0f3      	beq.n	80096a2 <_fflush_r+0xa>
 80096ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096bc:	07d0      	lsls	r0, r2, #31
 80096be:	d404      	bmi.n	80096ca <_fflush_r+0x32>
 80096c0:	0599      	lsls	r1, r3, #22
 80096c2:	d402      	bmi.n	80096ca <_fflush_r+0x32>
 80096c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096c6:	f7fe fb24 	bl	8007d12 <__retarget_lock_acquire_recursive>
 80096ca:	4628      	mov	r0, r5
 80096cc:	4621      	mov	r1, r4
 80096ce:	f7ff ff5d 	bl	800958c <__sflush_r>
 80096d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096d4:	07da      	lsls	r2, r3, #31
 80096d6:	4605      	mov	r5, r0
 80096d8:	d4e4      	bmi.n	80096a4 <_fflush_r+0xc>
 80096da:	89a3      	ldrh	r3, [r4, #12]
 80096dc:	059b      	lsls	r3, r3, #22
 80096de:	d4e1      	bmi.n	80096a4 <_fflush_r+0xc>
 80096e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096e2:	f7fe fb17 	bl	8007d14 <__retarget_lock_release_recursive>
 80096e6:	e7dd      	b.n	80096a4 <_fflush_r+0xc>

080096e8 <__swhatbuf_r>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	460c      	mov	r4, r1
 80096ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096f0:	2900      	cmp	r1, #0
 80096f2:	b096      	sub	sp, #88	; 0x58
 80096f4:	4615      	mov	r5, r2
 80096f6:	461e      	mov	r6, r3
 80096f8:	da0d      	bge.n	8009716 <__swhatbuf_r+0x2e>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009700:	f04f 0100 	mov.w	r1, #0
 8009704:	bf0c      	ite	eq
 8009706:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800970a:	2340      	movne	r3, #64	; 0x40
 800970c:	2000      	movs	r0, #0
 800970e:	6031      	str	r1, [r6, #0]
 8009710:	602b      	str	r3, [r5, #0]
 8009712:	b016      	add	sp, #88	; 0x58
 8009714:	bd70      	pop	{r4, r5, r6, pc}
 8009716:	466a      	mov	r2, sp
 8009718:	f000 f848 	bl	80097ac <_fstat_r>
 800971c:	2800      	cmp	r0, #0
 800971e:	dbec      	blt.n	80096fa <__swhatbuf_r+0x12>
 8009720:	9901      	ldr	r1, [sp, #4]
 8009722:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009726:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800972a:	4259      	negs	r1, r3
 800972c:	4159      	adcs	r1, r3
 800972e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009732:	e7eb      	b.n	800970c <__swhatbuf_r+0x24>

08009734 <__smakebuf_r>:
 8009734:	898b      	ldrh	r3, [r1, #12]
 8009736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009738:	079d      	lsls	r5, r3, #30
 800973a:	4606      	mov	r6, r0
 800973c:	460c      	mov	r4, r1
 800973e:	d507      	bpl.n	8009750 <__smakebuf_r+0x1c>
 8009740:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	6123      	str	r3, [r4, #16]
 8009748:	2301      	movs	r3, #1
 800974a:	6163      	str	r3, [r4, #20]
 800974c:	b002      	add	sp, #8
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	ab01      	add	r3, sp, #4
 8009752:	466a      	mov	r2, sp
 8009754:	f7ff ffc8 	bl	80096e8 <__swhatbuf_r>
 8009758:	9900      	ldr	r1, [sp, #0]
 800975a:	4605      	mov	r5, r0
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff f9c9 	bl	8008af4 <_malloc_r>
 8009762:	b948      	cbnz	r0, 8009778 <__smakebuf_r+0x44>
 8009764:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009768:	059a      	lsls	r2, r3, #22
 800976a:	d4ef      	bmi.n	800974c <__smakebuf_r+0x18>
 800976c:	f023 0303 	bic.w	r3, r3, #3
 8009770:	f043 0302 	orr.w	r3, r3, #2
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	e7e3      	b.n	8009740 <__smakebuf_r+0xc>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	6020      	str	r0, [r4, #0]
 800977c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	9b00      	ldr	r3, [sp, #0]
 8009784:	6163      	str	r3, [r4, #20]
 8009786:	9b01      	ldr	r3, [sp, #4]
 8009788:	6120      	str	r0, [r4, #16]
 800978a:	b15b      	cbz	r3, 80097a4 <__smakebuf_r+0x70>
 800978c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009790:	4630      	mov	r0, r6
 8009792:	f000 f81d 	bl	80097d0 <_isatty_r>
 8009796:	b128      	cbz	r0, 80097a4 <__smakebuf_r+0x70>
 8009798:	89a3      	ldrh	r3, [r4, #12]
 800979a:	f023 0303 	bic.w	r3, r3, #3
 800979e:	f043 0301 	orr.w	r3, r3, #1
 80097a2:	81a3      	strh	r3, [r4, #12]
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	431d      	orrs	r5, r3
 80097a8:	81a5      	strh	r5, [r4, #12]
 80097aa:	e7cf      	b.n	800974c <__smakebuf_r+0x18>

080097ac <_fstat_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	; (80097cc <_fstat_r+0x20>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	f7f9 fd28 	bl	800320e <_fstat>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d102      	bne.n	80097c8 <_fstat_r+0x1c>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	b103      	cbz	r3, 80097c8 <_fstat_r+0x1c>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
 80097ca:	bf00      	nop
 80097cc:	200004d0 	.word	0x200004d0

080097d0 <_isatty_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_isatty_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f9 fd27 	bl	800322e <_isatty>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_isatty_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_isatty_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	200004d0 	.word	0x200004d0

080097f0 <_sbrk_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d06      	ldr	r5, [pc, #24]	; (800980c <_sbrk_r+0x1c>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	602b      	str	r3, [r5, #0]
 80097fc:	f7f9 fd30 	bl	8003260 <_sbrk>
 8009800:	1c43      	adds	r3, r0, #1
 8009802:	d102      	bne.n	800980a <_sbrk_r+0x1a>
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	b103      	cbz	r3, 800980a <_sbrk_r+0x1a>
 8009808:	6023      	str	r3, [r4, #0]
 800980a:	bd38      	pop	{r3, r4, r5, pc}
 800980c:	200004d0 	.word	0x200004d0

08009810 <memcpy>:
 8009810:	440a      	add	r2, r1
 8009812:	4291      	cmp	r1, r2
 8009814:	f100 33ff 	add.w	r3, r0, #4294967295
 8009818:	d100      	bne.n	800981c <memcpy+0xc>
 800981a:	4770      	bx	lr
 800981c:	b510      	push	{r4, lr}
 800981e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009822:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009826:	4291      	cmp	r1, r2
 8009828:	d1f9      	bne.n	800981e <memcpy+0xe>
 800982a:	bd10      	pop	{r4, pc}

0800982c <__assert_func>:
 800982c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800982e:	4614      	mov	r4, r2
 8009830:	461a      	mov	r2, r3
 8009832:	4b09      	ldr	r3, [pc, #36]	; (8009858 <__assert_func+0x2c>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4605      	mov	r5, r0
 8009838:	68d8      	ldr	r0, [r3, #12]
 800983a:	b14c      	cbz	r4, 8009850 <__assert_func+0x24>
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <__assert_func+0x30>)
 800983e:	9100      	str	r1, [sp, #0]
 8009840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009844:	4906      	ldr	r1, [pc, #24]	; (8009860 <__assert_func+0x34>)
 8009846:	462b      	mov	r3, r5
 8009848:	f000 f844 	bl	80098d4 <fiprintf>
 800984c:	f000 f854 	bl	80098f8 <abort>
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <__assert_func+0x38>)
 8009852:	461c      	mov	r4, r3
 8009854:	e7f3      	b.n	800983e <__assert_func+0x12>
 8009856:	bf00      	nop
 8009858:	20000064 	.word	0x20000064
 800985c:	0800b117 	.word	0x0800b117
 8009860:	0800b124 	.word	0x0800b124
 8009864:	0800b152 	.word	0x0800b152

08009868 <_calloc_r>:
 8009868:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800986a:	fba1 2402 	umull	r2, r4, r1, r2
 800986e:	b94c      	cbnz	r4, 8009884 <_calloc_r+0x1c>
 8009870:	4611      	mov	r1, r2
 8009872:	9201      	str	r2, [sp, #4]
 8009874:	f7ff f93e 	bl	8008af4 <_malloc_r>
 8009878:	9a01      	ldr	r2, [sp, #4]
 800987a:	4605      	mov	r5, r0
 800987c:	b930      	cbnz	r0, 800988c <_calloc_r+0x24>
 800987e:	4628      	mov	r0, r5
 8009880:	b003      	add	sp, #12
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	220c      	movs	r2, #12
 8009886:	6002      	str	r2, [r0, #0]
 8009888:	2500      	movs	r5, #0
 800988a:	e7f8      	b.n	800987e <_calloc_r+0x16>
 800988c:	4621      	mov	r1, r4
 800988e:	f7fe f9c3 	bl	8007c18 <memset>
 8009892:	e7f4      	b.n	800987e <_calloc_r+0x16>

08009894 <__ascii_mbtowc>:
 8009894:	b082      	sub	sp, #8
 8009896:	b901      	cbnz	r1, 800989a <__ascii_mbtowc+0x6>
 8009898:	a901      	add	r1, sp, #4
 800989a:	b142      	cbz	r2, 80098ae <__ascii_mbtowc+0x1a>
 800989c:	b14b      	cbz	r3, 80098b2 <__ascii_mbtowc+0x1e>
 800989e:	7813      	ldrb	r3, [r2, #0]
 80098a0:	600b      	str	r3, [r1, #0]
 80098a2:	7812      	ldrb	r2, [r2, #0]
 80098a4:	1e10      	subs	r0, r2, #0
 80098a6:	bf18      	it	ne
 80098a8:	2001      	movne	r0, #1
 80098aa:	b002      	add	sp, #8
 80098ac:	4770      	bx	lr
 80098ae:	4610      	mov	r0, r2
 80098b0:	e7fb      	b.n	80098aa <__ascii_mbtowc+0x16>
 80098b2:	f06f 0001 	mvn.w	r0, #1
 80098b6:	e7f8      	b.n	80098aa <__ascii_mbtowc+0x16>

080098b8 <__ascii_wctomb>:
 80098b8:	b149      	cbz	r1, 80098ce <__ascii_wctomb+0x16>
 80098ba:	2aff      	cmp	r2, #255	; 0xff
 80098bc:	bf85      	ittet	hi
 80098be:	238a      	movhi	r3, #138	; 0x8a
 80098c0:	6003      	strhi	r3, [r0, #0]
 80098c2:	700a      	strbls	r2, [r1, #0]
 80098c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80098c8:	bf98      	it	ls
 80098ca:	2001      	movls	r0, #1
 80098cc:	4770      	bx	lr
 80098ce:	4608      	mov	r0, r1
 80098d0:	4770      	bx	lr
	...

080098d4 <fiprintf>:
 80098d4:	b40e      	push	{r1, r2, r3}
 80098d6:	b503      	push	{r0, r1, lr}
 80098d8:	4601      	mov	r1, r0
 80098da:	ab03      	add	r3, sp, #12
 80098dc:	4805      	ldr	r0, [pc, #20]	; (80098f4 <fiprintf+0x20>)
 80098de:	f853 2b04 	ldr.w	r2, [r3], #4
 80098e2:	6800      	ldr	r0, [r0, #0]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	f7ff fd37 	bl	8009358 <_vfiprintf_r>
 80098ea:	b002      	add	sp, #8
 80098ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80098f0:	b003      	add	sp, #12
 80098f2:	4770      	bx	lr
 80098f4:	20000064 	.word	0x20000064

080098f8 <abort>:
 80098f8:	b508      	push	{r3, lr}
 80098fa:	2006      	movs	r0, #6
 80098fc:	f000 f82c 	bl	8009958 <raise>
 8009900:	2001      	movs	r0, #1
 8009902:	f7f9 fc35 	bl	8003170 <_exit>

08009906 <_raise_r>:
 8009906:	291f      	cmp	r1, #31
 8009908:	b538      	push	{r3, r4, r5, lr}
 800990a:	4604      	mov	r4, r0
 800990c:	460d      	mov	r5, r1
 800990e:	d904      	bls.n	800991a <_raise_r+0x14>
 8009910:	2316      	movs	r3, #22
 8009912:	6003      	str	r3, [r0, #0]
 8009914:	f04f 30ff 	mov.w	r0, #4294967295
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800991c:	b112      	cbz	r2, 8009924 <_raise_r+0x1e>
 800991e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009922:	b94b      	cbnz	r3, 8009938 <_raise_r+0x32>
 8009924:	4620      	mov	r0, r4
 8009926:	f000 f831 	bl	800998c <_getpid_r>
 800992a:	462a      	mov	r2, r5
 800992c:	4601      	mov	r1, r0
 800992e:	4620      	mov	r0, r4
 8009930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009934:	f000 b818 	b.w	8009968 <_kill_r>
 8009938:	2b01      	cmp	r3, #1
 800993a:	d00a      	beq.n	8009952 <_raise_r+0x4c>
 800993c:	1c59      	adds	r1, r3, #1
 800993e:	d103      	bne.n	8009948 <_raise_r+0x42>
 8009940:	2316      	movs	r3, #22
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	2001      	movs	r0, #1
 8009946:	e7e7      	b.n	8009918 <_raise_r+0x12>
 8009948:	2400      	movs	r4, #0
 800994a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800994e:	4628      	mov	r0, r5
 8009950:	4798      	blx	r3
 8009952:	2000      	movs	r0, #0
 8009954:	e7e0      	b.n	8009918 <_raise_r+0x12>
	...

08009958 <raise>:
 8009958:	4b02      	ldr	r3, [pc, #8]	; (8009964 <raise+0xc>)
 800995a:	4601      	mov	r1, r0
 800995c:	6818      	ldr	r0, [r3, #0]
 800995e:	f7ff bfd2 	b.w	8009906 <_raise_r>
 8009962:	bf00      	nop
 8009964:	20000064 	.word	0x20000064

08009968 <_kill_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	; (8009988 <_kill_r+0x20>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	4611      	mov	r1, r2
 8009974:	602b      	str	r3, [r5, #0]
 8009976:	f7f9 fbeb 	bl	8003150 <_kill>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	d102      	bne.n	8009984 <_kill_r+0x1c>
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	b103      	cbz	r3, 8009984 <_kill_r+0x1c>
 8009982:	6023      	str	r3, [r4, #0]
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	200004d0 	.word	0x200004d0

0800998c <_getpid_r>:
 800998c:	f7f9 bbd8 	b.w	8003140 <_getpid>

08009990 <pow>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	ed2d 8b02 	vpush	{d8}
 8009996:	eeb0 8a40 	vmov.f32	s16, s0
 800999a:	eef0 8a60 	vmov.f32	s17, s1
 800999e:	ec55 4b11 	vmov	r4, r5, d1
 80099a2:	f000 f871 	bl	8009a88 <__ieee754_pow>
 80099a6:	4622      	mov	r2, r4
 80099a8:	462b      	mov	r3, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	ec57 6b10 	vmov	r6, r7, d0
 80099b2:	f7f7 f8bb 	bl	8000b2c <__aeabi_dcmpun>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d13b      	bne.n	8009a32 <pow+0xa2>
 80099ba:	ec51 0b18 	vmov	r0, r1, d8
 80099be:	2200      	movs	r2, #0
 80099c0:	2300      	movs	r3, #0
 80099c2:	f7f7 f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80099c6:	b1b8      	cbz	r0, 80099f8 <pow+0x68>
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f7 f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d146      	bne.n	8009a66 <pow+0xd6>
 80099d8:	ec45 4b10 	vmov	d0, r4, r5
 80099dc:	f000 f848 	bl	8009a70 <finite>
 80099e0:	b338      	cbz	r0, 8009a32 <pow+0xa2>
 80099e2:	2200      	movs	r2, #0
 80099e4:	2300      	movs	r3, #0
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f7 f877 	bl	8000adc <__aeabi_dcmplt>
 80099ee:	b300      	cbz	r0, 8009a32 <pow+0xa2>
 80099f0:	f7fe f964 	bl	8007cbc <__errno>
 80099f4:	2322      	movs	r3, #34	; 0x22
 80099f6:	e01b      	b.n	8009a30 <pow+0xa0>
 80099f8:	ec47 6b10 	vmov	d0, r6, r7
 80099fc:	f000 f838 	bl	8009a70 <finite>
 8009a00:	b9e0      	cbnz	r0, 8009a3c <pow+0xac>
 8009a02:	eeb0 0a48 	vmov.f32	s0, s16
 8009a06:	eef0 0a68 	vmov.f32	s1, s17
 8009a0a:	f000 f831 	bl	8009a70 <finite>
 8009a0e:	b1a8      	cbz	r0, 8009a3c <pow+0xac>
 8009a10:	ec45 4b10 	vmov	d0, r4, r5
 8009a14:	f000 f82c 	bl	8009a70 <finite>
 8009a18:	b180      	cbz	r0, 8009a3c <pow+0xac>
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	463b      	mov	r3, r7
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f7 f883 	bl	8000b2c <__aeabi_dcmpun>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d0e2      	beq.n	80099f0 <pow+0x60>
 8009a2a:	f7fe f947 	bl	8007cbc <__errno>
 8009a2e:	2321      	movs	r3, #33	; 0x21
 8009a30:	6003      	str	r3, [r0, #0]
 8009a32:	ecbd 8b02 	vpop	{d8}
 8009a36:	ec47 6b10 	vmov	d0, r6, r7
 8009a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2300      	movs	r3, #0
 8009a40:	4630      	mov	r0, r6
 8009a42:	4639      	mov	r1, r7
 8009a44:	f7f7 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d0f2      	beq.n	8009a32 <pow+0xa2>
 8009a4c:	eeb0 0a48 	vmov.f32	s0, s16
 8009a50:	eef0 0a68 	vmov.f32	s1, s17
 8009a54:	f000 f80c 	bl	8009a70 <finite>
 8009a58:	2800      	cmp	r0, #0
 8009a5a:	d0ea      	beq.n	8009a32 <pow+0xa2>
 8009a5c:	ec45 4b10 	vmov	d0, r4, r5
 8009a60:	f000 f806 	bl	8009a70 <finite>
 8009a64:	e7c3      	b.n	80099ee <pow+0x5e>
 8009a66:	4f01      	ldr	r7, [pc, #4]	; (8009a6c <pow+0xdc>)
 8009a68:	2600      	movs	r6, #0
 8009a6a:	e7e2      	b.n	8009a32 <pow+0xa2>
 8009a6c:	3ff00000 	.word	0x3ff00000

08009a70 <finite>:
 8009a70:	b082      	sub	sp, #8
 8009a72:	ed8d 0b00 	vstr	d0, [sp]
 8009a76:	9801      	ldr	r0, [sp, #4]
 8009a78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009a7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009a80:	0fc0      	lsrs	r0, r0, #31
 8009a82:	b002      	add	sp, #8
 8009a84:	4770      	bx	lr
	...

08009a88 <__ieee754_pow>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	ed2d 8b06 	vpush	{d8-d10}
 8009a90:	b089      	sub	sp, #36	; 0x24
 8009a92:	ed8d 1b00 	vstr	d1, [sp]
 8009a96:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009a9a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009a9e:	ea58 0102 	orrs.w	r1, r8, r2
 8009aa2:	ec57 6b10 	vmov	r6, r7, d0
 8009aa6:	d115      	bne.n	8009ad4 <__ieee754_pow+0x4c>
 8009aa8:	19b3      	adds	r3, r6, r6
 8009aaa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009aae:	4152      	adcs	r2, r2
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	4b89      	ldr	r3, [pc, #548]	; (8009cd8 <__ieee754_pow+0x250>)
 8009ab4:	4193      	sbcs	r3, r2
 8009ab6:	f080 84d1 	bcs.w	800a45c <__ieee754_pow+0x9d4>
 8009aba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009abe:	4630      	mov	r0, r6
 8009ac0:	4639      	mov	r1, r7
 8009ac2:	f7f6 fbe3 	bl	800028c <__adddf3>
 8009ac6:	ec41 0b10 	vmov	d0, r0, r1
 8009aca:	b009      	add	sp, #36	; 0x24
 8009acc:	ecbd 8b06 	vpop	{d8-d10}
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	4b81      	ldr	r3, [pc, #516]	; (8009cdc <__ieee754_pow+0x254>)
 8009ad6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009ada:	429c      	cmp	r4, r3
 8009adc:	ee10 aa10 	vmov	sl, s0
 8009ae0:	463d      	mov	r5, r7
 8009ae2:	dc06      	bgt.n	8009af2 <__ieee754_pow+0x6a>
 8009ae4:	d101      	bne.n	8009aea <__ieee754_pow+0x62>
 8009ae6:	2e00      	cmp	r6, #0
 8009ae8:	d1e7      	bne.n	8009aba <__ieee754_pow+0x32>
 8009aea:	4598      	cmp	r8, r3
 8009aec:	dc01      	bgt.n	8009af2 <__ieee754_pow+0x6a>
 8009aee:	d10f      	bne.n	8009b10 <__ieee754_pow+0x88>
 8009af0:	b172      	cbz	r2, 8009b10 <__ieee754_pow+0x88>
 8009af2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009af6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009afa:	ea55 050a 	orrs.w	r5, r5, sl
 8009afe:	d1dc      	bne.n	8009aba <__ieee754_pow+0x32>
 8009b00:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b04:	18db      	adds	r3, r3, r3
 8009b06:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009b0a:	4152      	adcs	r2, r2
 8009b0c:	429d      	cmp	r5, r3
 8009b0e:	e7d0      	b.n	8009ab2 <__ieee754_pow+0x2a>
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	da3b      	bge.n	8009b8c <__ieee754_pow+0x104>
 8009b14:	4b72      	ldr	r3, [pc, #456]	; (8009ce0 <__ieee754_pow+0x258>)
 8009b16:	4598      	cmp	r8, r3
 8009b18:	dc51      	bgt.n	8009bbe <__ieee754_pow+0x136>
 8009b1a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009b1e:	4598      	cmp	r8, r3
 8009b20:	f340 84ab 	ble.w	800a47a <__ieee754_pow+0x9f2>
 8009b24:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009b28:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b2c:	2b14      	cmp	r3, #20
 8009b2e:	dd0f      	ble.n	8009b50 <__ieee754_pow+0xc8>
 8009b30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009b34:	fa22 f103 	lsr.w	r1, r2, r3
 8009b38:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	f040 849c 	bne.w	800a47a <__ieee754_pow+0x9f2>
 8009b42:	f001 0101 	and.w	r1, r1, #1
 8009b46:	f1c1 0302 	rsb	r3, r1, #2
 8009b4a:	9304      	str	r3, [sp, #16]
 8009b4c:	b182      	cbz	r2, 8009b70 <__ieee754_pow+0xe8>
 8009b4e:	e05f      	b.n	8009c10 <__ieee754_pow+0x188>
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	d15b      	bne.n	8009c0c <__ieee754_pow+0x184>
 8009b54:	f1c3 0314 	rsb	r3, r3, #20
 8009b58:	fa48 f103 	asr.w	r1, r8, r3
 8009b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b60:	4543      	cmp	r3, r8
 8009b62:	f040 8487 	bne.w	800a474 <__ieee754_pow+0x9ec>
 8009b66:	f001 0101 	and.w	r1, r1, #1
 8009b6a:	f1c1 0302 	rsb	r3, r1, #2
 8009b6e:	9304      	str	r3, [sp, #16]
 8009b70:	4b5c      	ldr	r3, [pc, #368]	; (8009ce4 <__ieee754_pow+0x25c>)
 8009b72:	4598      	cmp	r8, r3
 8009b74:	d132      	bne.n	8009bdc <__ieee754_pow+0x154>
 8009b76:	f1b9 0f00 	cmp.w	r9, #0
 8009b7a:	f280 8477 	bge.w	800a46c <__ieee754_pow+0x9e4>
 8009b7e:	4959      	ldr	r1, [pc, #356]	; (8009ce4 <__ieee754_pow+0x25c>)
 8009b80:	4632      	mov	r2, r6
 8009b82:	463b      	mov	r3, r7
 8009b84:	2000      	movs	r0, #0
 8009b86:	f7f6 fe61 	bl	800084c <__aeabi_ddiv>
 8009b8a:	e79c      	b.n	8009ac6 <__ieee754_pow+0x3e>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d13d      	bne.n	8009c10 <__ieee754_pow+0x188>
 8009b94:	4b51      	ldr	r3, [pc, #324]	; (8009cdc <__ieee754_pow+0x254>)
 8009b96:	4598      	cmp	r8, r3
 8009b98:	d1ea      	bne.n	8009b70 <__ieee754_pow+0xe8>
 8009b9a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b9e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ba6:	f000 8459 	beq.w	800a45c <__ieee754_pow+0x9d4>
 8009baa:	4b4f      	ldr	r3, [pc, #316]	; (8009ce8 <__ieee754_pow+0x260>)
 8009bac:	429c      	cmp	r4, r3
 8009bae:	dd08      	ble.n	8009bc2 <__ieee754_pow+0x13a>
 8009bb0:	f1b9 0f00 	cmp.w	r9, #0
 8009bb4:	f2c0 8456 	blt.w	800a464 <__ieee754_pow+0x9dc>
 8009bb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bbc:	e783      	b.n	8009ac6 <__ieee754_pow+0x3e>
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e7e5      	b.n	8009b8e <__ieee754_pow+0x106>
 8009bc2:	f1b9 0f00 	cmp.w	r9, #0
 8009bc6:	f04f 0000 	mov.w	r0, #0
 8009bca:	f04f 0100 	mov.w	r1, #0
 8009bce:	f6bf af7a 	bge.w	8009ac6 <__ieee754_pow+0x3e>
 8009bd2:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009bd6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009bda:	e774      	b.n	8009ac6 <__ieee754_pow+0x3e>
 8009bdc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009be0:	d106      	bne.n	8009bf0 <__ieee754_pow+0x168>
 8009be2:	4632      	mov	r2, r6
 8009be4:	463b      	mov	r3, r7
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 fd05 	bl	80005f8 <__aeabi_dmul>
 8009bee:	e76a      	b.n	8009ac6 <__ieee754_pow+0x3e>
 8009bf0:	4b3e      	ldr	r3, [pc, #248]	; (8009cec <__ieee754_pow+0x264>)
 8009bf2:	4599      	cmp	r9, r3
 8009bf4:	d10c      	bne.n	8009c10 <__ieee754_pow+0x188>
 8009bf6:	2d00      	cmp	r5, #0
 8009bf8:	db0a      	blt.n	8009c10 <__ieee754_pow+0x188>
 8009bfa:	ec47 6b10 	vmov	d0, r6, r7
 8009bfe:	b009      	add	sp, #36	; 0x24
 8009c00:	ecbd 8b06 	vpop	{d8-d10}
 8009c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	f000 bd20 	b.w	800a64c <__ieee754_sqrt>
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	ec47 6b10 	vmov	d0, r6, r7
 8009c14:	f000 fc62 	bl	800a4dc <fabs>
 8009c18:	ec51 0b10 	vmov	r0, r1, d0
 8009c1c:	f1ba 0f00 	cmp.w	sl, #0
 8009c20:	d129      	bne.n	8009c76 <__ieee754_pow+0x1ee>
 8009c22:	b124      	cbz	r4, 8009c2e <__ieee754_pow+0x1a6>
 8009c24:	4b2f      	ldr	r3, [pc, #188]	; (8009ce4 <__ieee754_pow+0x25c>)
 8009c26:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d123      	bne.n	8009c76 <__ieee754_pow+0x1ee>
 8009c2e:	f1b9 0f00 	cmp.w	r9, #0
 8009c32:	da05      	bge.n	8009c40 <__ieee754_pow+0x1b8>
 8009c34:	4602      	mov	r2, r0
 8009c36:	460b      	mov	r3, r1
 8009c38:	2000      	movs	r0, #0
 8009c3a:	492a      	ldr	r1, [pc, #168]	; (8009ce4 <__ieee754_pow+0x25c>)
 8009c3c:	f7f6 fe06 	bl	800084c <__aeabi_ddiv>
 8009c40:	2d00      	cmp	r5, #0
 8009c42:	f6bf af40 	bge.w	8009ac6 <__ieee754_pow+0x3e>
 8009c46:	9b04      	ldr	r3, [sp, #16]
 8009c48:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c4c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c50:	431c      	orrs	r4, r3
 8009c52:	d108      	bne.n	8009c66 <__ieee754_pow+0x1de>
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f7f6 fb14 	bl	8000288 <__aeabi_dsub>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	e78f      	b.n	8009b86 <__ieee754_pow+0xfe>
 8009c66:	9b04      	ldr	r3, [sp, #16]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	f47f af2c 	bne.w	8009ac6 <__ieee754_pow+0x3e>
 8009c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	4619      	mov	r1, r3
 8009c74:	e727      	b.n	8009ac6 <__ieee754_pow+0x3e>
 8009c76:	0feb      	lsrs	r3, r5, #31
 8009c78:	3b01      	subs	r3, #1
 8009c7a:	9306      	str	r3, [sp, #24]
 8009c7c:	9a06      	ldr	r2, [sp, #24]
 8009c7e:	9b04      	ldr	r3, [sp, #16]
 8009c80:	4313      	orrs	r3, r2
 8009c82:	d102      	bne.n	8009c8a <__ieee754_pow+0x202>
 8009c84:	4632      	mov	r2, r6
 8009c86:	463b      	mov	r3, r7
 8009c88:	e7e6      	b.n	8009c58 <__ieee754_pow+0x1d0>
 8009c8a:	4b19      	ldr	r3, [pc, #100]	; (8009cf0 <__ieee754_pow+0x268>)
 8009c8c:	4598      	cmp	r8, r3
 8009c8e:	f340 80fb 	ble.w	8009e88 <__ieee754_pow+0x400>
 8009c92:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c96:	4598      	cmp	r8, r3
 8009c98:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <__ieee754_pow+0x260>)
 8009c9a:	dd0c      	ble.n	8009cb6 <__ieee754_pow+0x22e>
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	dc0f      	bgt.n	8009cc0 <__ieee754_pow+0x238>
 8009ca0:	f1b9 0f00 	cmp.w	r9, #0
 8009ca4:	da0f      	bge.n	8009cc6 <__ieee754_pow+0x23e>
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	b009      	add	sp, #36	; 0x24
 8009caa:	ecbd 8b06 	vpop	{d8-d10}
 8009cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb2:	f000 bcc2 	b.w	800a63a <__math_oflow>
 8009cb6:	429c      	cmp	r4, r3
 8009cb8:	dbf2      	blt.n	8009ca0 <__ieee754_pow+0x218>
 8009cba:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <__ieee754_pow+0x25c>)
 8009cbc:	429c      	cmp	r4, r3
 8009cbe:	dd19      	ble.n	8009cf4 <__ieee754_pow+0x26c>
 8009cc0:	f1b9 0f00 	cmp.w	r9, #0
 8009cc4:	dcef      	bgt.n	8009ca6 <__ieee754_pow+0x21e>
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	b009      	add	sp, #36	; 0x24
 8009cca:	ecbd 8b06 	vpop	{d8-d10}
 8009cce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd2:	f000 bca9 	b.w	800a628 <__math_uflow>
 8009cd6:	bf00      	nop
 8009cd8:	fff00000 	.word	0xfff00000
 8009cdc:	7ff00000 	.word	0x7ff00000
 8009ce0:	433fffff 	.word	0x433fffff
 8009ce4:	3ff00000 	.word	0x3ff00000
 8009ce8:	3fefffff 	.word	0x3fefffff
 8009cec:	3fe00000 	.word	0x3fe00000
 8009cf0:	41e00000 	.word	0x41e00000
 8009cf4:	4b60      	ldr	r3, [pc, #384]	; (8009e78 <__ieee754_pow+0x3f0>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f7f6 fac6 	bl	8000288 <__aeabi_dsub>
 8009cfc:	a354      	add	r3, pc, #336	; (adr r3, 8009e50 <__ieee754_pow+0x3c8>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	4604      	mov	r4, r0
 8009d04:	460d      	mov	r5, r1
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	a353      	add	r3, pc, #332	; (adr r3, 8009e58 <__ieee754_pow+0x3d0>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4606      	mov	r6, r0
 8009d12:	460f      	mov	r7, r1
 8009d14:	4620      	mov	r0, r4
 8009d16:	4629      	mov	r1, r5
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	4b57      	ldr	r3, [pc, #348]	; (8009e7c <__ieee754_pow+0x3f4>)
 8009d1e:	4682      	mov	sl, r0
 8009d20:	468b      	mov	fp, r1
 8009d22:	2200      	movs	r2, #0
 8009d24:	4620      	mov	r0, r4
 8009d26:	4629      	mov	r1, r5
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	460b      	mov	r3, r1
 8009d30:	a14b      	add	r1, pc, #300	; (adr r1, 8009e60 <__ieee754_pow+0x3d8>)
 8009d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	4622      	mov	r2, r4
 8009d3c:	462b      	mov	r3, r5
 8009d3e:	f7f6 fc5b 	bl	80005f8 <__aeabi_dmul>
 8009d42:	4602      	mov	r2, r0
 8009d44:	460b      	mov	r3, r1
 8009d46:	2000      	movs	r0, #0
 8009d48:	494d      	ldr	r1, [pc, #308]	; (8009e80 <__ieee754_pow+0x3f8>)
 8009d4a:	f7f6 fa9d 	bl	8000288 <__aeabi_dsub>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	4680      	mov	r8, r0
 8009d52:	4689      	mov	r9, r1
 8009d54:	462b      	mov	r3, r5
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fc4d 	bl	80005f8 <__aeabi_dmul>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 fc47 	bl	80005f8 <__aeabi_dmul>
 8009d6a:	a33f      	add	r3, pc, #252	; (adr r3, 8009e68 <__ieee754_pow+0x3e0>)
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	f7f6 fc42 	bl	80005f8 <__aeabi_dmul>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4650      	mov	r0, sl
 8009d7a:	4659      	mov	r1, fp
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	4680      	mov	r8, r0
 8009d86:	4689      	mov	r9, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 fa7e 	bl	800028c <__adddf3>
 8009d90:	2000      	movs	r0, #0
 8009d92:	4632      	mov	r2, r6
 8009d94:	463b      	mov	r3, r7
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	f7f6 fa75 	bl	8000288 <__aeabi_dsub>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	460b      	mov	r3, r1
 8009da2:	4640      	mov	r0, r8
 8009da4:	4649      	mov	r1, r9
 8009da6:	f7f6 fa6f 	bl	8000288 <__aeabi_dsub>
 8009daa:	9b04      	ldr	r3, [sp, #16]
 8009dac:	9a06      	ldr	r2, [sp, #24]
 8009dae:	3b01      	subs	r3, #1
 8009db0:	4313      	orrs	r3, r2
 8009db2:	4682      	mov	sl, r0
 8009db4:	468b      	mov	fp, r1
 8009db6:	f040 81e7 	bne.w	800a188 <__ieee754_pow+0x700>
 8009dba:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009e70 <__ieee754_pow+0x3e8>
 8009dbe:	eeb0 8a47 	vmov.f32	s16, s14
 8009dc2:	eef0 8a67 	vmov.f32	s17, s15
 8009dc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009dca:	2600      	movs	r6, #0
 8009dcc:	4632      	mov	r2, r6
 8009dce:	463b      	mov	r3, r7
 8009dd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009dd4:	f7f6 fa58 	bl	8000288 <__aeabi_dsub>
 8009dd8:	4622      	mov	r2, r4
 8009dda:	462b      	mov	r3, r5
 8009ddc:	f7f6 fc0c 	bl	80005f8 <__aeabi_dmul>
 8009de0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de4:	4680      	mov	r8, r0
 8009de6:	4689      	mov	r9, r1
 8009de8:	4650      	mov	r0, sl
 8009dea:	4659      	mov	r1, fp
 8009dec:	f7f6 fc04 	bl	80005f8 <__aeabi_dmul>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	4640      	mov	r0, r8
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 fa48 	bl	800028c <__adddf3>
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	463b      	mov	r3, r7
 8009e00:	4680      	mov	r8, r0
 8009e02:	4689      	mov	r9, r1
 8009e04:	4620      	mov	r0, r4
 8009e06:	4629      	mov	r1, r5
 8009e08:	f7f6 fbf6 	bl	80005f8 <__aeabi_dmul>
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	4602      	mov	r2, r0
 8009e14:	4649      	mov	r1, r9
 8009e16:	4640      	mov	r0, r8
 8009e18:	f7f6 fa38 	bl	800028c <__adddf3>
 8009e1c:	4b19      	ldr	r3, [pc, #100]	; (8009e84 <__ieee754_pow+0x3fc>)
 8009e1e:	4299      	cmp	r1, r3
 8009e20:	ec45 4b19 	vmov	d9, r4, r5
 8009e24:	4606      	mov	r6, r0
 8009e26:	460f      	mov	r7, r1
 8009e28:	468b      	mov	fp, r1
 8009e2a:	f340 82f0 	ble.w	800a40e <__ieee754_pow+0x986>
 8009e2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009e32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009e36:	4303      	orrs	r3, r0
 8009e38:	f000 81e4 	beq.w	800a204 <__ieee754_pow+0x77c>
 8009e3c:	ec51 0b18 	vmov	r0, r1, d8
 8009e40:	2200      	movs	r2, #0
 8009e42:	2300      	movs	r3, #0
 8009e44:	f7f6 fe4a 	bl	8000adc <__aeabi_dcmplt>
 8009e48:	3800      	subs	r0, #0
 8009e4a:	bf18      	it	ne
 8009e4c:	2001      	movne	r0, #1
 8009e4e:	e72b      	b.n	8009ca8 <__ieee754_pow+0x220>
 8009e50:	60000000 	.word	0x60000000
 8009e54:	3ff71547 	.word	0x3ff71547
 8009e58:	f85ddf44 	.word	0xf85ddf44
 8009e5c:	3e54ae0b 	.word	0x3e54ae0b
 8009e60:	55555555 	.word	0x55555555
 8009e64:	3fd55555 	.word	0x3fd55555
 8009e68:	652b82fe 	.word	0x652b82fe
 8009e6c:	3ff71547 	.word	0x3ff71547
 8009e70:	00000000 	.word	0x00000000
 8009e74:	bff00000 	.word	0xbff00000
 8009e78:	3ff00000 	.word	0x3ff00000
 8009e7c:	3fd00000 	.word	0x3fd00000
 8009e80:	3fe00000 	.word	0x3fe00000
 8009e84:	408fffff 	.word	0x408fffff
 8009e88:	4bd5      	ldr	r3, [pc, #852]	; (800a1e0 <__ieee754_pow+0x758>)
 8009e8a:	402b      	ands	r3, r5
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	b92b      	cbnz	r3, 8009e9c <__ieee754_pow+0x414>
 8009e90:	4bd4      	ldr	r3, [pc, #848]	; (800a1e4 <__ieee754_pow+0x75c>)
 8009e92:	f7f6 fbb1 	bl	80005f8 <__aeabi_dmul>
 8009e96:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e9a:	460c      	mov	r4, r1
 8009e9c:	1523      	asrs	r3, r4, #20
 8009e9e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009ea2:	4413      	add	r3, r2
 8009ea4:	9305      	str	r3, [sp, #20]
 8009ea6:	4bd0      	ldr	r3, [pc, #832]	; (800a1e8 <__ieee754_pow+0x760>)
 8009ea8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009eac:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009eb6:	dd08      	ble.n	8009eca <__ieee754_pow+0x442>
 8009eb8:	4bcc      	ldr	r3, [pc, #816]	; (800a1ec <__ieee754_pow+0x764>)
 8009eba:	429c      	cmp	r4, r3
 8009ebc:	f340 8162 	ble.w	800a184 <__ieee754_pow+0x6fc>
 8009ec0:	9b05      	ldr	r3, [sp, #20]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9305      	str	r3, [sp, #20]
 8009ec6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009eca:	2400      	movs	r4, #0
 8009ecc:	00e3      	lsls	r3, r4, #3
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	4bc7      	ldr	r3, [pc, #796]	; (800a1f0 <__ieee754_pow+0x768>)
 8009ed2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ed6:	ed93 7b00 	vldr	d7, [r3]
 8009eda:	4629      	mov	r1, r5
 8009edc:	ec53 2b17 	vmov	r2, r3, d7
 8009ee0:	eeb0 9a47 	vmov.f32	s18, s14
 8009ee4:	eef0 9a67 	vmov.f32	s19, s15
 8009ee8:	4682      	mov	sl, r0
 8009eea:	f7f6 f9cd 	bl	8000288 <__aeabi_dsub>
 8009eee:	4652      	mov	r2, sl
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	460f      	mov	r7, r1
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	ec51 0b19 	vmov	r0, r1, d9
 8009efa:	f7f6 f9c7 	bl	800028c <__adddf3>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	2000      	movs	r0, #0
 8009f04:	49bb      	ldr	r1, [pc, #748]	; (800a1f4 <__ieee754_pow+0x76c>)
 8009f06:	f7f6 fca1 	bl	800084c <__aeabi_ddiv>
 8009f0a:	ec41 0b1a 	vmov	d10, r0, r1
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4630      	mov	r0, r6
 8009f14:	4639      	mov	r1, r7
 8009f16:	f7f6 fb6f 	bl	80005f8 <__aeabi_dmul>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f20:	9302      	str	r3, [sp, #8]
 8009f22:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009f26:	46ab      	mov	fp, r5
 8009f28:	106d      	asrs	r5, r5, #1
 8009f2a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009f2e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009f32:	ec41 0b18 	vmov	d8, r0, r1
 8009f36:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4640      	mov	r0, r8
 8009f3e:	4649      	mov	r1, r9
 8009f40:	4614      	mov	r4, r2
 8009f42:	461d      	mov	r5, r3
 8009f44:	f7f6 fb58 	bl	80005f8 <__aeabi_dmul>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	4639      	mov	r1, r7
 8009f50:	f7f6 f99a 	bl	8000288 <__aeabi_dsub>
 8009f54:	ec53 2b19 	vmov	r2, r3, d9
 8009f58:	4606      	mov	r6, r0
 8009f5a:	460f      	mov	r7, r1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	f7f6 f992 	bl	8000288 <__aeabi_dsub>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	4650      	mov	r0, sl
 8009f6a:	4659      	mov	r1, fp
 8009f6c:	f7f6 f98c 	bl	8000288 <__aeabi_dsub>
 8009f70:	4642      	mov	r2, r8
 8009f72:	464b      	mov	r3, r9
 8009f74:	f7f6 fb40 	bl	80005f8 <__aeabi_dmul>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	4639      	mov	r1, r7
 8009f80:	f7f6 f982 	bl	8000288 <__aeabi_dsub>
 8009f84:	ec53 2b1a 	vmov	r2, r3, d10
 8009f88:	f7f6 fb36 	bl	80005f8 <__aeabi_dmul>
 8009f8c:	ec53 2b18 	vmov	r2, r3, d8
 8009f90:	ec41 0b19 	vmov	d9, r0, r1
 8009f94:	ec51 0b18 	vmov	r0, r1, d8
 8009f98:	f7f6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8009f9c:	a37c      	add	r3, pc, #496	; (adr r3, 800a190 <__ieee754_pow+0x708>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	f7f6 fb27 	bl	80005f8 <__aeabi_dmul>
 8009faa:	a37b      	add	r3, pc, #492	; (adr r3, 800a198 <__ieee754_pow+0x710>)
 8009fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb0:	f7f6 f96c 	bl	800028c <__adddf3>
 8009fb4:	4622      	mov	r2, r4
 8009fb6:	462b      	mov	r3, r5
 8009fb8:	f7f6 fb1e 	bl	80005f8 <__aeabi_dmul>
 8009fbc:	a378      	add	r3, pc, #480	; (adr r3, 800a1a0 <__ieee754_pow+0x718>)
 8009fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc2:	f7f6 f963 	bl	800028c <__adddf3>
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	462b      	mov	r3, r5
 8009fca:	f7f6 fb15 	bl	80005f8 <__aeabi_dmul>
 8009fce:	a376      	add	r3, pc, #472	; (adr r3, 800a1a8 <__ieee754_pow+0x720>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 f95a 	bl	800028c <__adddf3>
 8009fd8:	4622      	mov	r2, r4
 8009fda:	462b      	mov	r3, r5
 8009fdc:	f7f6 fb0c 	bl	80005f8 <__aeabi_dmul>
 8009fe0:	a373      	add	r3, pc, #460	; (adr r3, 800a1b0 <__ieee754_pow+0x728>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 f951 	bl	800028c <__adddf3>
 8009fea:	4622      	mov	r2, r4
 8009fec:	462b      	mov	r3, r5
 8009fee:	f7f6 fb03 	bl	80005f8 <__aeabi_dmul>
 8009ff2:	a371      	add	r3, pc, #452	; (adr r3, 800a1b8 <__ieee754_pow+0x730>)
 8009ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff8:	f7f6 f948 	bl	800028c <__adddf3>
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	4606      	mov	r6, r0
 800a000:	460f      	mov	r7, r1
 800a002:	462b      	mov	r3, r5
 800a004:	4620      	mov	r0, r4
 800a006:	4629      	mov	r1, r5
 800a008:	f7f6 faf6 	bl	80005f8 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4630      	mov	r0, r6
 800a012:	4639      	mov	r1, r7
 800a014:	f7f6 faf0 	bl	80005f8 <__aeabi_dmul>
 800a018:	4642      	mov	r2, r8
 800a01a:	4604      	mov	r4, r0
 800a01c:	460d      	mov	r5, r1
 800a01e:	464b      	mov	r3, r9
 800a020:	ec51 0b18 	vmov	r0, r1, d8
 800a024:	f7f6 f932 	bl	800028c <__adddf3>
 800a028:	ec53 2b19 	vmov	r2, r3, d9
 800a02c:	f7f6 fae4 	bl	80005f8 <__aeabi_dmul>
 800a030:	4622      	mov	r2, r4
 800a032:	462b      	mov	r3, r5
 800a034:	f7f6 f92a 	bl	800028c <__adddf3>
 800a038:	4642      	mov	r2, r8
 800a03a:	4682      	mov	sl, r0
 800a03c:	468b      	mov	fp, r1
 800a03e:	464b      	mov	r3, r9
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fad8 	bl	80005f8 <__aeabi_dmul>
 800a048:	4b6b      	ldr	r3, [pc, #428]	; (800a1f8 <__ieee754_pow+0x770>)
 800a04a:	2200      	movs	r2, #0
 800a04c:	4606      	mov	r6, r0
 800a04e:	460f      	mov	r7, r1
 800a050:	f7f6 f91c 	bl	800028c <__adddf3>
 800a054:	4652      	mov	r2, sl
 800a056:	465b      	mov	r3, fp
 800a058:	f7f6 f918 	bl	800028c <__adddf3>
 800a05c:	2000      	movs	r0, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	460d      	mov	r5, r1
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 fac5 	bl	80005f8 <__aeabi_dmul>
 800a06e:	4b62      	ldr	r3, [pc, #392]	; (800a1f8 <__ieee754_pow+0x770>)
 800a070:	4680      	mov	r8, r0
 800a072:	4689      	mov	r9, r1
 800a074:	2200      	movs	r2, #0
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 f905 	bl	8000288 <__aeabi_dsub>
 800a07e:	4632      	mov	r2, r6
 800a080:	463b      	mov	r3, r7
 800a082:	f7f6 f901 	bl	8000288 <__aeabi_dsub>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	4650      	mov	r0, sl
 800a08c:	4659      	mov	r1, fp
 800a08e:	f7f6 f8fb 	bl	8000288 <__aeabi_dsub>
 800a092:	ec53 2b18 	vmov	r2, r3, d8
 800a096:	f7f6 faaf 	bl	80005f8 <__aeabi_dmul>
 800a09a:	4622      	mov	r2, r4
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	462b      	mov	r3, r5
 800a0a2:	ec51 0b19 	vmov	r0, r1, d9
 800a0a6:	f7f6 faa7 	bl	80005f8 <__aeabi_dmul>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f7f6 f8eb 	bl	800028c <__adddf3>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	460f      	mov	r7, r1
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4640      	mov	r0, r8
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	f7f6 f8e3 	bl	800028c <__adddf3>
 800a0c6:	a33e      	add	r3, pc, #248	; (adr r3, 800a1c0 <__ieee754_pow+0x738>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	2000      	movs	r0, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	f7f6 fa91 	bl	80005f8 <__aeabi_dmul>
 800a0d6:	4642      	mov	r2, r8
 800a0d8:	ec41 0b18 	vmov	d8, r0, r1
 800a0dc:	464b      	mov	r3, r9
 800a0de:	4620      	mov	r0, r4
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	f7f6 f8d1 	bl	8000288 <__aeabi_dsub>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	f7f6 f8cb 	bl	8000288 <__aeabi_dsub>
 800a0f2:	a335      	add	r3, pc, #212	; (adr r3, 800a1c8 <__ieee754_pow+0x740>)
 800a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f8:	f7f6 fa7e 	bl	80005f8 <__aeabi_dmul>
 800a0fc:	a334      	add	r3, pc, #208	; (adr r3, 800a1d0 <__ieee754_pow+0x748>)
 800a0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a102:	4606      	mov	r6, r0
 800a104:	460f      	mov	r7, r1
 800a106:	4620      	mov	r0, r4
 800a108:	4629      	mov	r1, r5
 800a10a:	f7f6 fa75 	bl	80005f8 <__aeabi_dmul>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4630      	mov	r0, r6
 800a114:	4639      	mov	r1, r7
 800a116:	f7f6 f8b9 	bl	800028c <__adddf3>
 800a11a:	9a07      	ldr	r2, [sp, #28]
 800a11c:	4b37      	ldr	r3, [pc, #220]	; (800a1fc <__ieee754_pow+0x774>)
 800a11e:	4413      	add	r3, r2
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f7f6 f8b2 	bl	800028c <__adddf3>
 800a128:	4682      	mov	sl, r0
 800a12a:	9805      	ldr	r0, [sp, #20]
 800a12c:	468b      	mov	fp, r1
 800a12e:	f7f6 f9f9 	bl	8000524 <__aeabi_i2d>
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	4b32      	ldr	r3, [pc, #200]	; (800a200 <__ieee754_pow+0x778>)
 800a136:	4413      	add	r3, r2
 800a138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a13c:	4606      	mov	r6, r0
 800a13e:	460f      	mov	r7, r1
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	ec51 0b18 	vmov	r0, r1, d8
 800a148:	f7f6 f8a0 	bl	800028c <__adddf3>
 800a14c:	4642      	mov	r2, r8
 800a14e:	464b      	mov	r3, r9
 800a150:	f7f6 f89c 	bl	800028c <__adddf3>
 800a154:	4632      	mov	r2, r6
 800a156:	463b      	mov	r3, r7
 800a158:	f7f6 f898 	bl	800028c <__adddf3>
 800a15c:	2000      	movs	r0, #0
 800a15e:	4632      	mov	r2, r6
 800a160:	463b      	mov	r3, r7
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
 800a166:	f7f6 f88f 	bl	8000288 <__aeabi_dsub>
 800a16a:	4642      	mov	r2, r8
 800a16c:	464b      	mov	r3, r9
 800a16e:	f7f6 f88b 	bl	8000288 <__aeabi_dsub>
 800a172:	ec53 2b18 	vmov	r2, r3, d8
 800a176:	f7f6 f887 	bl	8000288 <__aeabi_dsub>
 800a17a:	4602      	mov	r2, r0
 800a17c:	460b      	mov	r3, r1
 800a17e:	4650      	mov	r0, sl
 800a180:	4659      	mov	r1, fp
 800a182:	e610      	b.n	8009da6 <__ieee754_pow+0x31e>
 800a184:	2401      	movs	r4, #1
 800a186:	e6a1      	b.n	8009ecc <__ieee754_pow+0x444>
 800a188:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a1d8 <__ieee754_pow+0x750>
 800a18c:	e617      	b.n	8009dbe <__ieee754_pow+0x336>
 800a18e:	bf00      	nop
 800a190:	4a454eef 	.word	0x4a454eef
 800a194:	3fca7e28 	.word	0x3fca7e28
 800a198:	93c9db65 	.word	0x93c9db65
 800a19c:	3fcd864a 	.word	0x3fcd864a
 800a1a0:	a91d4101 	.word	0xa91d4101
 800a1a4:	3fd17460 	.word	0x3fd17460
 800a1a8:	518f264d 	.word	0x518f264d
 800a1ac:	3fd55555 	.word	0x3fd55555
 800a1b0:	db6fabff 	.word	0xdb6fabff
 800a1b4:	3fdb6db6 	.word	0x3fdb6db6
 800a1b8:	33333303 	.word	0x33333303
 800a1bc:	3fe33333 	.word	0x3fe33333
 800a1c0:	e0000000 	.word	0xe0000000
 800a1c4:	3feec709 	.word	0x3feec709
 800a1c8:	dc3a03fd 	.word	0xdc3a03fd
 800a1cc:	3feec709 	.word	0x3feec709
 800a1d0:	145b01f5 	.word	0x145b01f5
 800a1d4:	be3e2fe0 	.word	0xbe3e2fe0
 800a1d8:	00000000 	.word	0x00000000
 800a1dc:	3ff00000 	.word	0x3ff00000
 800a1e0:	7ff00000 	.word	0x7ff00000
 800a1e4:	43400000 	.word	0x43400000
 800a1e8:	0003988e 	.word	0x0003988e
 800a1ec:	000bb679 	.word	0x000bb679
 800a1f0:	0800b258 	.word	0x0800b258
 800a1f4:	3ff00000 	.word	0x3ff00000
 800a1f8:	40080000 	.word	0x40080000
 800a1fc:	0800b278 	.word	0x0800b278
 800a200:	0800b268 	.word	0x0800b268
 800a204:	a3b3      	add	r3, pc, #716	; (adr r3, 800a4d4 <__ieee754_pow+0xa4c>)
 800a206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20a:	4640      	mov	r0, r8
 800a20c:	4649      	mov	r1, r9
 800a20e:	f7f6 f83d 	bl	800028c <__adddf3>
 800a212:	4622      	mov	r2, r4
 800a214:	ec41 0b1a 	vmov	d10, r0, r1
 800a218:	462b      	mov	r3, r5
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 f833 	bl	8000288 <__aeabi_dsub>
 800a222:	4602      	mov	r2, r0
 800a224:	460b      	mov	r3, r1
 800a226:	ec51 0b1a 	vmov	r0, r1, d10
 800a22a:	f7f6 fc75 	bl	8000b18 <__aeabi_dcmpgt>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f47f ae04 	bne.w	8009e3c <__ieee754_pow+0x3b4>
 800a234:	4aa2      	ldr	r2, [pc, #648]	; (800a4c0 <__ieee754_pow+0xa38>)
 800a236:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a23a:	4293      	cmp	r3, r2
 800a23c:	f340 8107 	ble.w	800a44e <__ieee754_pow+0x9c6>
 800a240:	151b      	asrs	r3, r3, #20
 800a242:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a246:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a24a:	fa4a fa03 	asr.w	sl, sl, r3
 800a24e:	44da      	add	sl, fp
 800a250:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a254:	489b      	ldr	r0, [pc, #620]	; (800a4c4 <__ieee754_pow+0xa3c>)
 800a256:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a25a:	4108      	asrs	r0, r1
 800a25c:	ea00 030a 	and.w	r3, r0, sl
 800a260:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a264:	f1c1 0114 	rsb	r1, r1, #20
 800a268:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a26c:	fa4a fa01 	asr.w	sl, sl, r1
 800a270:	f1bb 0f00 	cmp.w	fp, #0
 800a274:	f04f 0200 	mov.w	r2, #0
 800a278:	4620      	mov	r0, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	bfb8      	it	lt
 800a27e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a282:	f7f6 f801 	bl	8000288 <__aeabi_dsub>
 800a286:	ec41 0b19 	vmov	d9, r0, r1
 800a28a:	4642      	mov	r2, r8
 800a28c:	464b      	mov	r3, r9
 800a28e:	ec51 0b19 	vmov	r0, r1, d9
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	a37a      	add	r3, pc, #488	; (adr r3, 800a480 <__ieee754_pow+0x9f8>)
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	2000      	movs	r0, #0
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	f7f6 f9a9 	bl	80005f8 <__aeabi_dmul>
 800a2a6:	ec53 2b19 	vmov	r2, r3, d9
 800a2aa:	4606      	mov	r6, r0
 800a2ac:	460f      	mov	r7, r1
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	f7f5 ffe9 	bl	8000288 <__aeabi_dsub>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	4640      	mov	r0, r8
 800a2bc:	4649      	mov	r1, r9
 800a2be:	f7f5 ffe3 	bl	8000288 <__aeabi_dsub>
 800a2c2:	a371      	add	r3, pc, #452	; (adr r3, 800a488 <__ieee754_pow+0xa00>)
 800a2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c8:	f7f6 f996 	bl	80005f8 <__aeabi_dmul>
 800a2cc:	a370      	add	r3, pc, #448	; (adr r3, 800a490 <__ieee754_pow+0xa08>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	4689      	mov	r9, r1
 800a2d6:	4620      	mov	r0, r4
 800a2d8:	4629      	mov	r1, r5
 800a2da:	f7f6 f98d 	bl	80005f8 <__aeabi_dmul>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	f7f5 ffd1 	bl	800028c <__adddf3>
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4630      	mov	r0, r6
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	f7f5 ffc9 	bl	800028c <__adddf3>
 800a2fa:	4632      	mov	r2, r6
 800a2fc:	463b      	mov	r3, r7
 800a2fe:	4680      	mov	r8, r0
 800a300:	4689      	mov	r9, r1
 800a302:	f7f5 ffc1 	bl	8000288 <__aeabi_dsub>
 800a306:	4602      	mov	r2, r0
 800a308:	460b      	mov	r3, r1
 800a30a:	4620      	mov	r0, r4
 800a30c:	4629      	mov	r1, r5
 800a30e:	f7f5 ffbb 	bl	8000288 <__aeabi_dsub>
 800a312:	4642      	mov	r2, r8
 800a314:	4606      	mov	r6, r0
 800a316:	460f      	mov	r7, r1
 800a318:	464b      	mov	r3, r9
 800a31a:	4640      	mov	r0, r8
 800a31c:	4649      	mov	r1, r9
 800a31e:	f7f6 f96b 	bl	80005f8 <__aeabi_dmul>
 800a322:	a35d      	add	r3, pc, #372	; (adr r3, 800a498 <__ieee754_pow+0xa10>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	a35b      	add	r3, pc, #364	; (adr r3, 800a4a0 <__ieee754_pow+0xa18>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f5 ffa7 	bl	8000288 <__aeabi_dsub>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f7f6 f95b 	bl	80005f8 <__aeabi_dmul>
 800a342:	a359      	add	r3, pc, #356	; (adr r3, 800a4a8 <__ieee754_pow+0xa20>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f5 ffa0 	bl	800028c <__adddf3>
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	a356      	add	r3, pc, #344	; (adr r3, 800a4b0 <__ieee754_pow+0xa28>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff95 	bl	8000288 <__aeabi_dsub>
 800a35e:	4622      	mov	r2, r4
 800a360:	462b      	mov	r3, r5
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	a354      	add	r3, pc, #336	; (adr r3, 800a4b8 <__ieee754_pow+0xa30>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ff8e 	bl	800028c <__adddf3>
 800a370:	4622      	mov	r2, r4
 800a372:	462b      	mov	r3, r5
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f5 ff82 	bl	8000288 <__aeabi_dsub>
 800a384:	4604      	mov	r4, r0
 800a386:	460d      	mov	r5, r1
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4640      	mov	r0, r8
 800a38e:	4649      	mov	r1, r9
 800a390:	f7f6 f932 	bl	80005f8 <__aeabi_dmul>
 800a394:	2200      	movs	r2, #0
 800a396:	ec41 0b19 	vmov	d9, r0, r1
 800a39a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a39e:	4620      	mov	r0, r4
 800a3a0:	4629      	mov	r1, r5
 800a3a2:	f7f5 ff71 	bl	8000288 <__aeabi_dsub>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	ec51 0b19 	vmov	r0, r1, d9
 800a3ae:	f7f6 fa4d 	bl	800084c <__aeabi_ddiv>
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	4604      	mov	r4, r0
 800a3b6:	460d      	mov	r5, r1
 800a3b8:	463b      	mov	r3, r7
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	4649      	mov	r1, r9
 800a3be:	f7f6 f91b 	bl	80005f8 <__aeabi_dmul>
 800a3c2:	4632      	mov	r2, r6
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	f7f5 ff61 	bl	800028c <__adddf3>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7f5 ff59 	bl	8000288 <__aeabi_dsub>
 800a3d6:	4642      	mov	r2, r8
 800a3d8:	464b      	mov	r3, r9
 800a3da:	f7f5 ff55 	bl	8000288 <__aeabi_dsub>
 800a3de:	460b      	mov	r3, r1
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	4939      	ldr	r1, [pc, #228]	; (800a4c8 <__ieee754_pow+0xa40>)
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	f7f5 ff4f 	bl	8000288 <__aeabi_dsub>
 800a3ea:	ec41 0b10 	vmov	d0, r0, r1
 800a3ee:	ee10 3a90 	vmov	r3, s1
 800a3f2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a3f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3fa:	da2b      	bge.n	800a454 <__ieee754_pow+0x9cc>
 800a3fc:	4650      	mov	r0, sl
 800a3fe:	f000 f877 	bl	800a4f0 <scalbn>
 800a402:	ec51 0b10 	vmov	r0, r1, d0
 800a406:	ec53 2b18 	vmov	r2, r3, d8
 800a40a:	f7ff bbee 	b.w	8009bea <__ieee754_pow+0x162>
 800a40e:	4b2f      	ldr	r3, [pc, #188]	; (800a4cc <__ieee754_pow+0xa44>)
 800a410:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a414:	429e      	cmp	r6, r3
 800a416:	f77f af0d 	ble.w	800a234 <__ieee754_pow+0x7ac>
 800a41a:	4b2d      	ldr	r3, [pc, #180]	; (800a4d0 <__ieee754_pow+0xa48>)
 800a41c:	440b      	add	r3, r1
 800a41e:	4303      	orrs	r3, r0
 800a420:	d009      	beq.n	800a436 <__ieee754_pow+0x9ae>
 800a422:	ec51 0b18 	vmov	r0, r1, d8
 800a426:	2200      	movs	r2, #0
 800a428:	2300      	movs	r3, #0
 800a42a:	f7f6 fb57 	bl	8000adc <__aeabi_dcmplt>
 800a42e:	3800      	subs	r0, #0
 800a430:	bf18      	it	ne
 800a432:	2001      	movne	r0, #1
 800a434:	e448      	b.n	8009cc8 <__ieee754_pow+0x240>
 800a436:	4622      	mov	r2, r4
 800a438:	462b      	mov	r3, r5
 800a43a:	f7f5 ff25 	bl	8000288 <__aeabi_dsub>
 800a43e:	4642      	mov	r2, r8
 800a440:	464b      	mov	r3, r9
 800a442:	f7f6 fb5f 	bl	8000b04 <__aeabi_dcmpge>
 800a446:	2800      	cmp	r0, #0
 800a448:	f43f aef4 	beq.w	800a234 <__ieee754_pow+0x7ac>
 800a44c:	e7e9      	b.n	800a422 <__ieee754_pow+0x99a>
 800a44e:	f04f 0a00 	mov.w	sl, #0
 800a452:	e71a      	b.n	800a28a <__ieee754_pow+0x802>
 800a454:	ec51 0b10 	vmov	r0, r1, d0
 800a458:	4619      	mov	r1, r3
 800a45a:	e7d4      	b.n	800a406 <__ieee754_pow+0x97e>
 800a45c:	491a      	ldr	r1, [pc, #104]	; (800a4c8 <__ieee754_pow+0xa40>)
 800a45e:	2000      	movs	r0, #0
 800a460:	f7ff bb31 	b.w	8009ac6 <__ieee754_pow+0x3e>
 800a464:	2000      	movs	r0, #0
 800a466:	2100      	movs	r1, #0
 800a468:	f7ff bb2d 	b.w	8009ac6 <__ieee754_pow+0x3e>
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7ff bb29 	b.w	8009ac6 <__ieee754_pow+0x3e>
 800a474:	9204      	str	r2, [sp, #16]
 800a476:	f7ff bb7b 	b.w	8009b70 <__ieee754_pow+0xe8>
 800a47a:	2300      	movs	r3, #0
 800a47c:	f7ff bb65 	b.w	8009b4a <__ieee754_pow+0xc2>
 800a480:	00000000 	.word	0x00000000
 800a484:	3fe62e43 	.word	0x3fe62e43
 800a488:	fefa39ef 	.word	0xfefa39ef
 800a48c:	3fe62e42 	.word	0x3fe62e42
 800a490:	0ca86c39 	.word	0x0ca86c39
 800a494:	be205c61 	.word	0xbe205c61
 800a498:	72bea4d0 	.word	0x72bea4d0
 800a49c:	3e663769 	.word	0x3e663769
 800a4a0:	c5d26bf1 	.word	0xc5d26bf1
 800a4a4:	3ebbbd41 	.word	0x3ebbbd41
 800a4a8:	af25de2c 	.word	0xaf25de2c
 800a4ac:	3f11566a 	.word	0x3f11566a
 800a4b0:	16bebd93 	.word	0x16bebd93
 800a4b4:	3f66c16c 	.word	0x3f66c16c
 800a4b8:	5555553e 	.word	0x5555553e
 800a4bc:	3fc55555 	.word	0x3fc55555
 800a4c0:	3fe00000 	.word	0x3fe00000
 800a4c4:	fff00000 	.word	0xfff00000
 800a4c8:	3ff00000 	.word	0x3ff00000
 800a4cc:	4090cbff 	.word	0x4090cbff
 800a4d0:	3f6f3400 	.word	0x3f6f3400
 800a4d4:	652b82fe 	.word	0x652b82fe
 800a4d8:	3c971547 	.word	0x3c971547

0800a4dc <fabs>:
 800a4dc:	ec51 0b10 	vmov	r0, r1, d0
 800a4e0:	ee10 2a10 	vmov	r2, s0
 800a4e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a4e8:	ec43 2b10 	vmov	d0, r2, r3
 800a4ec:	4770      	bx	lr
	...

0800a4f0 <scalbn>:
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	ec55 4b10 	vmov	r4, r5, d0
 800a4f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	462b      	mov	r3, r5
 800a4fe:	b999      	cbnz	r1, 800a528 <scalbn+0x38>
 800a500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a504:	4323      	orrs	r3, r4
 800a506:	d03f      	beq.n	800a588 <scalbn+0x98>
 800a508:	4b35      	ldr	r3, [pc, #212]	; (800a5e0 <scalbn+0xf0>)
 800a50a:	4629      	mov	r1, r5
 800a50c:	ee10 0a10 	vmov	r0, s0
 800a510:	2200      	movs	r2, #0
 800a512:	f7f6 f871 	bl	80005f8 <__aeabi_dmul>
 800a516:	4b33      	ldr	r3, [pc, #204]	; (800a5e4 <scalbn+0xf4>)
 800a518:	429e      	cmp	r6, r3
 800a51a:	4604      	mov	r4, r0
 800a51c:	460d      	mov	r5, r1
 800a51e:	da10      	bge.n	800a542 <scalbn+0x52>
 800a520:	a327      	add	r3, pc, #156	; (adr r3, 800a5c0 <scalbn+0xd0>)
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	e01f      	b.n	800a568 <scalbn+0x78>
 800a528:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a52c:	4291      	cmp	r1, r2
 800a52e:	d10c      	bne.n	800a54a <scalbn+0x5a>
 800a530:	ee10 2a10 	vmov	r2, s0
 800a534:	4620      	mov	r0, r4
 800a536:	4629      	mov	r1, r5
 800a538:	f7f5 fea8 	bl	800028c <__adddf3>
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	e022      	b.n	800a588 <scalbn+0x98>
 800a542:	460b      	mov	r3, r1
 800a544:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a548:	3936      	subs	r1, #54	; 0x36
 800a54a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a54e:	4296      	cmp	r6, r2
 800a550:	dd0d      	ble.n	800a56e <scalbn+0x7e>
 800a552:	2d00      	cmp	r5, #0
 800a554:	a11c      	add	r1, pc, #112	; (adr r1, 800a5c8 <scalbn+0xd8>)
 800a556:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a55a:	da02      	bge.n	800a562 <scalbn+0x72>
 800a55c:	a11c      	add	r1, pc, #112	; (adr r1, 800a5d0 <scalbn+0xe0>)
 800a55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a562:	a319      	add	r3, pc, #100	; (adr r3, 800a5c8 <scalbn+0xd8>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f6 f846 	bl	80005f8 <__aeabi_dmul>
 800a56c:	e7e6      	b.n	800a53c <scalbn+0x4c>
 800a56e:	1872      	adds	r2, r6, r1
 800a570:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a574:	428a      	cmp	r2, r1
 800a576:	dcec      	bgt.n	800a552 <scalbn+0x62>
 800a578:	2a00      	cmp	r2, #0
 800a57a:	dd08      	ble.n	800a58e <scalbn+0x9e>
 800a57c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a580:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a584:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a588:	ec45 4b10 	vmov	d0, r4, r5
 800a58c:	bd70      	pop	{r4, r5, r6, pc}
 800a58e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a592:	da08      	bge.n	800a5a6 <scalbn+0xb6>
 800a594:	2d00      	cmp	r5, #0
 800a596:	a10a      	add	r1, pc, #40	; (adr r1, 800a5c0 <scalbn+0xd0>)
 800a598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59c:	dac0      	bge.n	800a520 <scalbn+0x30>
 800a59e:	a10e      	add	r1, pc, #56	; (adr r1, 800a5d8 <scalbn+0xe8>)
 800a5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a4:	e7bc      	b.n	800a520 <scalbn+0x30>
 800a5a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a5aa:	3236      	adds	r2, #54	; 0x36
 800a5ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a5b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	4b0c      	ldr	r3, [pc, #48]	; (800a5e8 <scalbn+0xf8>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	e7d5      	b.n	800a568 <scalbn+0x78>
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	c2f8f359 	.word	0xc2f8f359
 800a5c4:	01a56e1f 	.word	0x01a56e1f
 800a5c8:	8800759c 	.word	0x8800759c
 800a5cc:	7e37e43c 	.word	0x7e37e43c
 800a5d0:	8800759c 	.word	0x8800759c
 800a5d4:	fe37e43c 	.word	0xfe37e43c
 800a5d8:	c2f8f359 	.word	0xc2f8f359
 800a5dc:	81a56e1f 	.word	0x81a56e1f
 800a5e0:	43500000 	.word	0x43500000
 800a5e4:	ffff3cb0 	.word	0xffff3cb0
 800a5e8:	3c900000 	.word	0x3c900000

0800a5ec <with_errno>:
 800a5ec:	b570      	push	{r4, r5, r6, lr}
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	460d      	mov	r5, r1
 800a5f2:	4616      	mov	r6, r2
 800a5f4:	f7fd fb62 	bl	8007cbc <__errno>
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	6006      	str	r6, [r0, #0]
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}

0800a600 <xflow>:
 800a600:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a602:	4614      	mov	r4, r2
 800a604:	461d      	mov	r5, r3
 800a606:	b108      	cbz	r0, 800a60c <xflow+0xc>
 800a608:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a60c:	e9cd 2300 	strd	r2, r3, [sp]
 800a610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a614:	4620      	mov	r0, r4
 800a616:	4629      	mov	r1, r5
 800a618:	f7f5 ffee 	bl	80005f8 <__aeabi_dmul>
 800a61c:	2222      	movs	r2, #34	; 0x22
 800a61e:	b003      	add	sp, #12
 800a620:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a624:	f7ff bfe2 	b.w	800a5ec <with_errno>

0800a628 <__math_uflow>:
 800a628:	b508      	push	{r3, lr}
 800a62a:	2200      	movs	r2, #0
 800a62c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a630:	f7ff ffe6 	bl	800a600 <xflow>
 800a634:	ec41 0b10 	vmov	d0, r0, r1
 800a638:	bd08      	pop	{r3, pc}

0800a63a <__math_oflow>:
 800a63a:	b508      	push	{r3, lr}
 800a63c:	2200      	movs	r2, #0
 800a63e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a642:	f7ff ffdd 	bl	800a600 <xflow>
 800a646:	ec41 0b10 	vmov	d0, r0, r1
 800a64a:	bd08      	pop	{r3, pc}

0800a64c <__ieee754_sqrt>:
 800a64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	ec55 4b10 	vmov	r4, r5, d0
 800a654:	4e67      	ldr	r6, [pc, #412]	; (800a7f4 <__ieee754_sqrt+0x1a8>)
 800a656:	43ae      	bics	r6, r5
 800a658:	ee10 0a10 	vmov	r0, s0
 800a65c:	ee10 2a10 	vmov	r2, s0
 800a660:	4629      	mov	r1, r5
 800a662:	462b      	mov	r3, r5
 800a664:	d10d      	bne.n	800a682 <__ieee754_sqrt+0x36>
 800a666:	f7f5 ffc7 	bl	80005f8 <__aeabi_dmul>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4620      	mov	r0, r4
 800a670:	4629      	mov	r1, r5
 800a672:	f7f5 fe0b 	bl	800028c <__adddf3>
 800a676:	4604      	mov	r4, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	ec45 4b10 	vmov	d0, r4, r5
 800a67e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	2d00      	cmp	r5, #0
 800a684:	dc0b      	bgt.n	800a69e <__ieee754_sqrt+0x52>
 800a686:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a68a:	4326      	orrs	r6, r4
 800a68c:	d0f5      	beq.n	800a67a <__ieee754_sqrt+0x2e>
 800a68e:	b135      	cbz	r5, 800a69e <__ieee754_sqrt+0x52>
 800a690:	f7f5 fdfa 	bl	8000288 <__aeabi_dsub>
 800a694:	4602      	mov	r2, r0
 800a696:	460b      	mov	r3, r1
 800a698:	f7f6 f8d8 	bl	800084c <__aeabi_ddiv>
 800a69c:	e7eb      	b.n	800a676 <__ieee754_sqrt+0x2a>
 800a69e:	1509      	asrs	r1, r1, #20
 800a6a0:	f000 808d 	beq.w	800a7be <__ieee754_sqrt+0x172>
 800a6a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6a8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a6ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a6b0:	07c9      	lsls	r1, r1, #31
 800a6b2:	bf5c      	itt	pl
 800a6b4:	005b      	lslpl	r3, r3, #1
 800a6b6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a6ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6be:	bf58      	it	pl
 800a6c0:	0052      	lslpl	r2, r2, #1
 800a6c2:	2500      	movs	r5, #0
 800a6c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a6c8:	1076      	asrs	r6, r6, #1
 800a6ca:	0052      	lsls	r2, r2, #1
 800a6cc:	f04f 0e16 	mov.w	lr, #22
 800a6d0:	46ac      	mov	ip, r5
 800a6d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6d6:	eb0c 0001 	add.w	r0, ip, r1
 800a6da:	4298      	cmp	r0, r3
 800a6dc:	bfde      	ittt	le
 800a6de:	1a1b      	suble	r3, r3, r0
 800a6e0:	eb00 0c01 	addle.w	ip, r0, r1
 800a6e4:	186d      	addle	r5, r5, r1
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	f1be 0e01 	subs.w	lr, lr, #1
 800a6ec:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a6f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a6f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a6f8:	d1ed      	bne.n	800a6d6 <__ieee754_sqrt+0x8a>
 800a6fa:	4674      	mov	r4, lr
 800a6fc:	2720      	movs	r7, #32
 800a6fe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a702:	4563      	cmp	r3, ip
 800a704:	eb01 000e 	add.w	r0, r1, lr
 800a708:	dc02      	bgt.n	800a710 <__ieee754_sqrt+0xc4>
 800a70a:	d113      	bne.n	800a734 <__ieee754_sqrt+0xe8>
 800a70c:	4290      	cmp	r0, r2
 800a70e:	d811      	bhi.n	800a734 <__ieee754_sqrt+0xe8>
 800a710:	2800      	cmp	r0, #0
 800a712:	eb00 0e01 	add.w	lr, r0, r1
 800a716:	da57      	bge.n	800a7c8 <__ieee754_sqrt+0x17c>
 800a718:	f1be 0f00 	cmp.w	lr, #0
 800a71c:	db54      	blt.n	800a7c8 <__ieee754_sqrt+0x17c>
 800a71e:	f10c 0801 	add.w	r8, ip, #1
 800a722:	eba3 030c 	sub.w	r3, r3, ip
 800a726:	4290      	cmp	r0, r2
 800a728:	bf88      	it	hi
 800a72a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a72e:	1a12      	subs	r2, r2, r0
 800a730:	440c      	add	r4, r1
 800a732:	46c4      	mov	ip, r8
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	3f01      	subs	r7, #1
 800a738:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a73c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a740:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a744:	d1dd      	bne.n	800a702 <__ieee754_sqrt+0xb6>
 800a746:	4313      	orrs	r3, r2
 800a748:	d01b      	beq.n	800a782 <__ieee754_sqrt+0x136>
 800a74a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a7f8 <__ieee754_sqrt+0x1ac>
 800a74e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a7fc <__ieee754_sqrt+0x1b0>
 800a752:	e9da 0100 	ldrd	r0, r1, [sl]
 800a756:	e9db 2300 	ldrd	r2, r3, [fp]
 800a75a:	f7f5 fd95 	bl	8000288 <__aeabi_dsub>
 800a75e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a762:	4602      	mov	r2, r0
 800a764:	460b      	mov	r3, r1
 800a766:	4640      	mov	r0, r8
 800a768:	4649      	mov	r1, r9
 800a76a:	f7f6 f9c1 	bl	8000af0 <__aeabi_dcmple>
 800a76e:	b140      	cbz	r0, 800a782 <__ieee754_sqrt+0x136>
 800a770:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a774:	e9da 0100 	ldrd	r0, r1, [sl]
 800a778:	e9db 2300 	ldrd	r2, r3, [fp]
 800a77c:	d126      	bne.n	800a7cc <__ieee754_sqrt+0x180>
 800a77e:	3501      	adds	r5, #1
 800a780:	463c      	mov	r4, r7
 800a782:	106a      	asrs	r2, r5, #1
 800a784:	0863      	lsrs	r3, r4, #1
 800a786:	07e9      	lsls	r1, r5, #31
 800a788:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a78c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a790:	bf48      	it	mi
 800a792:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a796:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a79a:	461c      	mov	r4, r3
 800a79c:	e76d      	b.n	800a67a <__ieee754_sqrt+0x2e>
 800a79e:	0ad3      	lsrs	r3, r2, #11
 800a7a0:	3815      	subs	r0, #21
 800a7a2:	0552      	lsls	r2, r2, #21
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d0fa      	beq.n	800a79e <__ieee754_sqrt+0x152>
 800a7a8:	02dc      	lsls	r4, r3, #11
 800a7aa:	d50a      	bpl.n	800a7c2 <__ieee754_sqrt+0x176>
 800a7ac:	f1c1 0420 	rsb	r4, r1, #32
 800a7b0:	fa22 f404 	lsr.w	r4, r2, r4
 800a7b4:	1e4d      	subs	r5, r1, #1
 800a7b6:	408a      	lsls	r2, r1
 800a7b8:	4323      	orrs	r3, r4
 800a7ba:	1b41      	subs	r1, r0, r5
 800a7bc:	e772      	b.n	800a6a4 <__ieee754_sqrt+0x58>
 800a7be:	4608      	mov	r0, r1
 800a7c0:	e7f0      	b.n	800a7a4 <__ieee754_sqrt+0x158>
 800a7c2:	005b      	lsls	r3, r3, #1
 800a7c4:	3101      	adds	r1, #1
 800a7c6:	e7ef      	b.n	800a7a8 <__ieee754_sqrt+0x15c>
 800a7c8:	46e0      	mov	r8, ip
 800a7ca:	e7aa      	b.n	800a722 <__ieee754_sqrt+0xd6>
 800a7cc:	f7f5 fd5e 	bl	800028c <__adddf3>
 800a7d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f6 f97e 	bl	8000adc <__aeabi_dcmplt>
 800a7e0:	b120      	cbz	r0, 800a7ec <__ieee754_sqrt+0x1a0>
 800a7e2:	1ca0      	adds	r0, r4, #2
 800a7e4:	bf08      	it	eq
 800a7e6:	3501      	addeq	r5, #1
 800a7e8:	3402      	adds	r4, #2
 800a7ea:	e7ca      	b.n	800a782 <__ieee754_sqrt+0x136>
 800a7ec:	3401      	adds	r4, #1
 800a7ee:	f024 0401 	bic.w	r4, r4, #1
 800a7f2:	e7c6      	b.n	800a782 <__ieee754_sqrt+0x136>
 800a7f4:	7ff00000 	.word	0x7ff00000
 800a7f8:	200001d8 	.word	0x200001d8
 800a7fc:	200001e0 	.word	0x200001e0

0800a800 <_init>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	bf00      	nop
 800a804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a806:	bc08      	pop	{r3}
 800a808:	469e      	mov	lr, r3
 800a80a:	4770      	bx	lr

0800a80c <_fini>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr
